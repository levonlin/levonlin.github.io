<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒村</title>
  <subtitle>新草掩旧路，野鬼吟残书。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://levonlin.info/"/>
  <updated>2017-07-19T16:29:06.000Z</updated>
  <id>http://levonlin.info/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】遗留浏览器中的表单</title>
    <link href="http://levonlin.info/2017/07/16/%E3%80%90%E8%AF%91%E3%80%91%E9%81%97%E7%95%99%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95/"/>
    <id>http://levonlin.info/2017/07/16/【译】遗留浏览器中的表单/</id>
    <published>2017-07-16T07:53:32.000Z</published>
    <updated>2017-07-19T16:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/HTML_forms_in_legacy_browsers" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>所有的web开发者都会很快（或者很痛苦地）意识到Web是一个粗糙的环境，其中最糟糕的一点就是老旧的浏览器。提到“老旧浏览器”，我们脑海中往往复现的就是旧版的IE。但其实老旧浏览器不止这一种，一个一年前的Firefox，比如<a href="http://www.mozilla.org/en-US/firefox/organizations/" target="_blank" rel="external">ESR版本</a>也算得上老旧了。至于移动端，由于有些浏览器和操作系统都不能升级，这就导致了许多老旧的安卓手机或iPhone上的浏览器不是最新的，这些也算是老旧浏览器。</p>
<p>令人沮丧的是，我们工作的一部分都要耗在老旧浏览器这片荒野上。但幸运的是，有一些技巧可以协助解决由老旧浏览器引起的80%的问题。</p>
<h2 id="了解存在的问题"><a href="#了解存在的问题" class="headerlink" title="了解存在的问题"></a>了解存在的问题</h2><p>实际上，首要的任务是阅读这些浏览器的文档、试着理解其公共部分。比如，CSS的支持程度是HTML表单的一个重大问题，若你刚开始开发，应先检查下要用的元素（或DMO接口）的支持程度。虽然许多web页面要用的元素、属性、API的兼容性表格，MDN上都有；但别的资源也能提供很大的帮助：</p>
<h3 id="浏览器开发商的文档"><a href="#浏览器开发商的文档" class="headerlink" title="浏览器开发商的文档"></a>浏览器开发商的文档</h3><ul>
<li>Mozilla：就在你现在所访问的地方啦（译注：<a href="https://developer.mozilla.org/" target="_blank" rel="external">MDN</a>）</li>
<li>Microsoft：<a href="http://msdn.microsoft.com/en-us/library/ff410218%28v=vs.85%29.aspx" target="_blank" rel="external">Internet Explorer Standards Support Documentation</a></li>
<li>Opera：<a href="http://www.opera.com/docs/specs/" target="_blank" rel="external">Web specification support in Opera</a></li>
<li>WebKit：由于该引擎有着几个不同的版本，想找到对应文档需要些技巧：<ul>
<li><a href="https://www.webkit.org/blog/" target="_blank" rel="external">Webkit博客</a>和<a href="http://planet.webkit.org/" target="_blank" rel="external">Planet Webkit</a>汇总了Webkit内核开发者一些最好的文章。</li>
<li><a href="http://www.chromium.org/developers/web-platform-status" target="_blank" rel="external">chromium网站</a>也很重要。</li>
<li>还有<a href="https://developer.apple.com/technologies/safari/" target="_blank" rel="external">Apple的网站</a></li>
</ul>
</li>
</ul>
<h3 id="第三方文档"><a href="#第三方文档" class="headerlink" title="第三方文档"></a>第三方文档</h3><ul>
<li><a href="http://caniuse.com/" target="_blank" rel="external">Can I Use</a>上有各类技术的支持程度信息。</li>
<li><a href="http://www.quirksmode.org/" target="_blank" rel="external">Quirks Mode</a>是关于浏览器兼容性的一个极好资源。其<a href="http://www.quirksmode.org/mobile/" target="_blank" rel="external">移动部分</a>是现在最好的。</li>
<li><a href="http://positioniseverything.net/" target="_blank" rel="external">Position Is Everything</a>是一份关于老旧浏览器渲染问题及其解决方法的最好资料。</li>
<li><a href="http://mobilehtml5.org/" target="_blank" rel="external">Mobile HTML5 </a>有着大量移动端浏览器兼容性信息，不只有那些“前5的浏览器”（译注：大概包括苹果、安卓、Nokia、Amazon、Blackberry）</li>
</ul>
<h2 id="让事情变得简单"><a href="#让事情变得简单" class="headerlink" title="让事情变得简单"></a>让事情变得简单</h2><p>由于HTML表单包含了大量复杂的交互，我们得记住一条法则：<a href="http://en.wikipedia.org/wiki/KISS_principle" target="_blank" rel="external">keep it as simple as possible</a>。许多情况下我们会想让表单变得“漂亮”或“带有高级功能”，但构建高效的HTML表单并不单靠设计或技术就能解决，建议花点时间阅读下<a href="http://www.uxforthemasses.com/forms-usability/" target="_blank" rel="external">forms usability on UX For The Masses</a>这篇文章.</p>
<h3 id="优雅降级是web开发者的最佳朋友"><a href="#优雅降级是web开发者的最佳朋友" class="headerlink" title="优雅降级是web开发者的最佳朋友"></a>优雅降级是web开发者的最佳朋友</h3><p><a href="http://www.sitepoint.com/progressive-enhancement-graceful-degradation-choice/" target="_blank" rel="external">优雅降级和渐进增强</a>这两个开发模式通过同时支持众多的浏览器，能让你建立伟大的产品。当你在现代浏览器上构建了一些东西，并想确保它能在老旧浏览器上运行时，你就是在使用优雅降级了。</p>
<p>接下来我们看些关于HTML表单的例子：</p>
<h4 id="HTML的输入框类型"><a href="#HTML的输入框类型" class="headerlink" title="HTML的输入框类型"></a>HTML的输入框类型</h4><p>HTML5带来的输入框类型非常酷，因为它们作降级处理的方法是可预见的。若浏览器不认识<code>&lt;input&gt;</code>元素的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type" target="_blank" rel="external">type</a>特性值，就会回退到<code>text</code>类型。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"myColor"</span>&gt;</div><div class="line">  Pick <span class="selector-tag">a</span> <span class="attribute">color</span></div><div class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"color"</span> id=<span class="string">"myColor"</span> name=<span class="string">"color"</span>&gt;</div><div class="line">&lt;/label&gt;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>chrome 24</th>
<th>Firefox 18</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://developer.mozilla.org/files/4575/color-fallback-chrome.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4577/color-fallback-firefox.png" alt=""></td>
</tr>
</tbody>
</table>
<h4 id="CSS的特性选择器"><a href="#CSS的特性选择器" class="headerlink" title="CSS的特性选择器"></a>CSS的特性选择器</h4><p><a href="https://developer.mozilla.org/en-US/docs/CSS/Attribute_selectors" target="_blank" rel="external">CSS的特性选择器</a>对HTML表单来讲非常有用，但某些老旧的浏览器并不支持它。此时我们常会用一个等价的类名来替代该特性：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"number"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"number"</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>[type=number] &#123;</div><div class="line">  <span class="comment">/* 这里的样式会在某些浏览器下失效 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.number</span> &#123;</div><div class="line">  <span class="comment">/* 该处样式可以在每个地方都生效 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要注意下面的代码是没有必要的（冗余），而且也会在某些浏览器下失效：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>[type=number],</div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.number</span> &#123;</div><div class="line">  <span class="comment">/* 这里的样式会在某些浏览器下失效，因为它们若不能失败其中一个选择器，</span></div><div class="line">     就会跳过整段规则 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="表单按钮"><a href="#表单按钮" class="headerlink" title="表单按钮"></a>表单按钮</h4><p>在HTML表单中定义按钮有两种方式：</p>
<ul>
<li><code>&lt;input&gt;</code>元素的type特性设为<code>button</code>, <code>submit</code>, <code>reset</code>或<code>image</code></li>
<li><code>&lt;button&gt;</code>元素</li>
</ul>
<p>若你想使用元素选择器来指定CSS，使用<code>&lt;input&gt;</code>元素的话会有些麻烦：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span> value=<span class="string">"click me"</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="comment">/* 这处规则会覆盖input定义的按钮的默认样式 */</span></div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCC</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.button</span> &#123;</div><div class="line">  <span class="comment">/* 这里并不会恢复默认样式 */</span></div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.button</span> &#123;</div><div class="line">  <span class="comment">/* 这里也不会恢复！实际上在所有浏览器下都没有方法来做到这点。 */</span></div><div class="line">  <span class="attribute">border</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>&lt;button&gt;</code>元素则要面对两个问题：</p>
<ul>
<li>老旧IE下会有一个bug，当用户点击按钮时，发送的不是<code>value</code>特性的内容，而是<code>&lt;button&gt;</code>元素起止标签间的HTML内容。当然个问题只有当你想发送<code>value</code>的值时才会凸显，例如，你可能想处理关于用户点击了哪个按钮的数据。</li>
<li>某些非常老旧的浏览器不会吧<code>submit</code>作为<code>type</code>特性的默认值，故而还是推荐你总是设置<code>&lt;button&gt;</code>元素的<code>type</code>特性。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 有时点击该按钮会发送"&lt;em&gt;Do A&lt;/em&gt;"而不是"A" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"IWantTo"</span> <span class="attr">value</span>=<span class="string">"A"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">em</span>&gt;</span>Do A<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>选择这两种元素中的哪种，取决于你项目中的约束。</p>
<h3 id="放弃CSS"><a href="#放弃CSS" class="headerlink" title="放弃CSS"></a>放弃CSS</h3><p>HTML表单和老旧浏览器的最大问题是对CSS的支持。如你在<a href="http://levonlin.info/2016/08/06/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8/">表单组件的属性兼容性表</a>一文中所见到的，这很难处理。即使在文本元素上可能可以做些微调（比如大小和颜色），但通常也会有副作用。所以剩下的最佳方式就是不要给HTML表单组件添加一点样式，不过你仍可以给周边元素添加样式。作为专业人士，若你遇到你的客户一定需要给表单组件加样式，可以调研下某些困难的技术，譬如<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">用JavaScript重构表单组件</a>。但其实在这种情况下，你应该毫不犹豫地<a href="http://www.smashingmagazine.com/2011/11/03/%E2%80%9Cbut-the-client-wants-ie-6-support%E2%80%9D/" target="_blank" rel="external">指出客户的愚蠢之处</a>。</p>
<h2 id="特征检测和polyfill"><a href="#特征检测和polyfill" class="headerlink" title="特征检测和polyfill"></a>特征检测和polyfill</h2><p>虽然在现代浏览器上JavaScript是个很棒的技术，但在老旧浏览器上使用它却有很多问题。</p>
<h3 id="“不起眼的“JavaScript"><a href="#“不起眼的“JavaScript" class="headerlink" title="“不起眼的“JavaScript"></a>“不起眼的“JavaScript</h3><p>JavaScript最大的问题就是API的可用性。因此，最佳实践是使用”不起眼的“JavaScript。这是一种开发模式，规定了两个要求：</p>
<ul>
<li>结构和行为严格分离。</li>
<li>如果代码挂掉，页面内容和基本的功能必须还有可访问性和可用性。</li>
</ul>
<p><a href="http://docs.webplatform.org/wiki/concepts/programming/the_principles_of_unobtrusive_javascript" target="_blank" rel="external">The principles of unobtrusive JavaScript</a>一文很好地阐述了该观点。（该文由Peter-Paul Koch为Dev.Opera.com撰写，现已移至Docs.WebPlatform.org）</p>
<h3 id="Modernizr库"><a href="#Modernizr库" class="headerlink" title="Modernizr库"></a>Modernizr库</h3><p>多数情况下，一个好的”polyfill“可以帮我们提供那些缺失的API。所谓的<a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/" target="_blank" rel="external">polyfill</a>，是指一小段用于“填补”老旧浏览器功能上的坑的JavaScript。它们可以用于提供任何功能上的支持，相比CSS或HTML的polyfill，为JavaScript使用polyfill会有更小的风险；毕竟JavaScript会在很多情况下挂掉（比如网络问题、代码冲突等等）。但即使不用polyfill，只要你开发时心中存有“不起眼的“JavaScript原则，其实也没什么大不了。</p>
<p>为缺失的API提供polyfill，最佳的方式是使用<a href="http://modernizr.com/" target="_blank" rel="external">Modernizr</a>库及其衍生项目<a href="http://yepnopejs.com/" target="_blank" rel="external">YepNoep</a>。Modernizr是一个能测试功能可用性、并以此来做相应动作的库。YepNoep则是一个按条件作加载的库。</p>
<p>举个例子：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Modernizr</span><span class="selector-class">.load</span>(&#123;</div><div class="line">  <span class="comment">// 此处测试浏览器是否支持HTML5的表单校验API</span></div><div class="line">  <span class="attribute">test </span>: Modernizr.formvalidation,</div><div class="line"> </div><div class="line">  <span class="comment">// 若浏览器不支持，则加载下列polyfill</span></div><div class="line">  <span class="attribute">nope </span>: form-validation-API-polyfill.js,</div><div class="line"> </div><div class="line">  <span class="comment">// 在任何情况下，依赖那个API的核心App文件都会被下载</span></div><div class="line">  <span class="attribute">both </span>: app.js,</div><div class="line"> </div><div class="line">  <span class="comment">// 一旦这些文件都被加载了，下面的函数调用就会来初始化App</span></div><div class="line">  <span class="attribute">complete </span>: function () &#123;</div><div class="line">    app.init();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Modernizr团队还维护了<a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills" target="_blank" rel="external">一个好用的polyfill列表</a>，请按需自取。</p>
<blockquote>
<p><strong>注意：</strong>在使用“不起眼的“JavaScript原则和优雅降级技术时，Modernizr其它一些很棒的特性也能帮到你。请<a href="http://modernizr.com/docs/" target="_blank" rel="external">阅读Modernizr的文档</a></p>
</blockquote>
<h3 id="关注性能"><a href="#关注性能" class="headerlink" title="关注性能"></a>关注性能</h3><p>即使像Modernizr已经很注重性能了，但加载200kB的polyfill仍会影响应用的性能，这对老旧浏览器来讲更为严重。许多老旧浏览器的JavaScript引擎很慢，这样会让polyfill的执行给用户造成不好的体验。性能是本身就是一个主题，老旧浏览器对性能更是敏感：首先它们就很慢，再者依赖越多的polyfill它们就得执行更多的JavaScript。所以，相比现代浏览器，老旧浏览器有着双重的负担；也因此对代码在老旧浏览器上的实际运行情况，更要进行测试。甚至有时为了性能，相比在所有浏览器上实现相同功能，还得在老旧浏览器移除某些些会带来更好用户体验的功能。最后还有一个建议，多考虑下你的终端用户吧。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如你所见，处理老旧浏览器所涉及的内容不止有表单。这是一整套的技术，全面掌握它们已经超出了本文的范围。</p>
<p>如果已经读完了这个<a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">HTML表单指南</a>的全部文章，你应该能很轻松地使用表单了。若你还发现了哪些新技术、新技巧，也请帮助<a href="https://developer.mozilla.org/en-US/docs/Project:How_to_help" target="_blank" rel="external">完善这个指南</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】使用FormData对象</title>
    <link href="http://levonlin.info/2017/07/15/%E3%80%90%E8%AF%91%E3%80%91%E4%BD%BF%E7%94%A8FormData%E5%AF%B9%E8%B1%A1/"/>
    <id>http://levonlin.info/2017/07/15/【译】使用FormData对象/</id>
    <published>2017-07-15T15:14:58.000Z</published>
    <updated>2017-07-15T16:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="external">FormData</a>对象能让你生成一系列用于<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest</a>发送的键值对。它主要的目的在于发送表单数据，但也能独立用于传输有键形式的数据。其传输的数据格式和表单使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit" target="_blank" rel="external">submit()</a>方法、且编码类型为<code>multipart/form-data</code>所发送的数据格式相同。</p>
<h2 id="从头开始创建一个FormData对象"><a href="#从头开始创建一个FormData对象" class="headerlink" title="从头开始创建一个FormData对象"></a>从头开始创建一个FormData对象</h2><p>你可以自己建立一个FormData对象，首先进行实例化、再通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/append" target="_blank" rel="external">apppend()</a>方法来添加字段，如下所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formData = <span class="built_in">new</span> FormData();</div><div class="line"></div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"username"</span>, <span class="string">"Groucho"</span>);</div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"accountnum"</span>, <span class="number">123456</span>); <span class="comment">// 数字123456会自动转为字符串"123456"</span></div><div class="line"></div><div class="line"><span class="comment">// 用户选择的HTML的文件提交</span></div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"userfile"</span>, fileInputElement.files[<span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="comment">// JavaScript的类文件对象（Blob）</span></div><div class="line"><span class="keyword">var</span> content = <span class="string">'&lt;a id="a"&gt;&lt;b id="b"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class="comment">// 新文件的主体</span></div><div class="line"><span class="keyword">var</span> blob = <span class="built_in">new</span> Blob([content], &#123; <span class="keyword">type</span>: <span class="string">"text/xml"</span>&#125;);</div><div class="line"></div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"webmasterfile"</span>, blob);</div><div class="line"></div><div class="line"><span class="keyword">var</span> request = <span class="built_in">new</span> XMLHttpRequest();</div><div class="line">request.open(<span class="string">"POST"</span>, <span class="string">"http://foo.com/submitform.php"</span>);</div><div class="line">request.send(formData);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>“userfile”字段和“webmasterfile”字段都包含了文件。“accountnum”字段中的数字会自动被FormData.append()方法自动转为字符串。（字段值可以是一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="external">Blob</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/File" target="_blank" rel="external">File</a>或字符串，<strong>若值不是Blob、File之一，就会被转为字符串</strong>）</p>
</blockquote>
<p>上面的例子建立了一个包含名为“username”、“accountnum”、“userfile”和“webmasterfile”字段的FormData对象。然后使用了XMLHttpRequest的<a href="https://developer.mozilla.org/en/DOM/XMLHttpRequest#send(" target="_blank" rel="external">send()</a>方法来发送表单数据。“webmasterfile”字段是个Blob对象，该对象代表了一个由不可变的、原始数据组成的类文件对象，里面的的数据不必使用JavaScript的原生数据类型。File对象也是基于Blob对象的，它继承了Blob的基本功能并做了拓展以支持用户操作系统上的文件。要建立一个Blob对象，你可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob" target="_blank" rel="external">Blob构造函数</a>。</p>
<h2 id="用HTML表单中创建一个FormData对象"><a href="#用HTML表单中创建一个FormData对象" class="headerlink" title="用HTML表单中创建一个FormData对象"></a>用HTML表单中创建一个FormData对象</h2><p>要用现有的<code>&lt;form&gt;</code>元素建立一个FormData对象，可以在建立FormData对象时传入指定的<code>&lt;form&gt;</code>元素。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="type">FormData</span>(someFormElement);</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var formElement = document.querySelector(<span class="string">"form"</span>);</div><div class="line">var request = new XMLHttpRequest();</div><div class="line">request.open(<span class="string">"<span class="keyword">POST</span>"</span>, <span class="string">"submitform.php"</span>);</div><div class="line">request.send(new FormData(formElement));</div></pre></td></tr></table></figure>
<p>在用<code>&lt;form&gt;</code>元素建立FromData对象之后、发送它之前，也可以给它添加额外的数据，如下：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var formElement = document.querySelector(<span class="string">"form"</span>);</div><div class="line">var formData = new FormData(formElement);</div><div class="line">var request = new XMLHttpRequest();</div><div class="line">request.open(<span class="string">"<span class="keyword">POST</span>"</span>, <span class="string">"submitform.php"</span>);</div><div class="line">formData.append(<span class="string">"serialnumber"</span>, serialNumber++);</div><div class="line">request.send(formData);</div></pre></td></tr></table></figure>
<p>这样一来我们就能在发送表单数据前进行配置，以添加一些不需用户编辑的信息。</p>
<h2 id="用FormData对象发送文件"><a href="#用FormData对象发送文件" class="headerlink" title="用FormData对象发送文件"></a>用FormData对象发送文件</h2><p>你也可以用FormData对象发送文件，只需在你的<code>&lt;form&gt;</code>标签间包含一个<code>file</code>类型的<code>&lt;input&gt;</code>元素：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">form</span> enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span> name=<span class="string">"fileinfo"</span>&gt;</div><div class="line">  &lt;<span class="keyword">label</span>&gt;Your email address:&lt;/<span class="keyword">label</span>&gt;</div><div class="line">  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"email"</span> autocomplete=<span class="string">"on"</span> autofocus name=<span class="string">"userid"</span> placeholder=<span class="string">"email"</span> required size=<span class="string">"32"</span> maxlength=<span class="string">"64"</span> /&gt;&lt;<span class="keyword">br</span> /&gt;</div><div class="line">  &lt;<span class="keyword">label</span>&gt;Custom <span class="keyword">file</span> <span class="keyword">label</span>:&lt;/<span class="keyword">label</span>&gt;</div><div class="line">  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"filelabel"</span> size=<span class="string">"12"</span> maxlength=<span class="string">"32"</span> /&gt;&lt;<span class="keyword">br</span> /&gt;</div><div class="line">  &lt;<span class="keyword">label</span>&gt;<span class="keyword">File</span> to stash:&lt;/<span class="keyword">label</span>&gt;</div><div class="line">  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"file"</span> name=<span class="string">"file"</span> required /&gt;</div><div class="line">  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"Stash the file!"</span> /&gt;</div><div class="line">&lt;/<span class="keyword">form</span>&gt;</div><div class="line">&lt;div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>然后你就能用如下代码发送文件了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.forms.namedItem(<span class="string">"fileinfo"</span>);</div><div class="line">form.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> oOutput = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>),</div><div class="line">      oData = <span class="keyword">new</span> FormData(form);</div><div class="line"></div><div class="line">  oData.append(<span class="string">"CustomField"</span>, <span class="string">"This is some extra data"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  oReq.open(<span class="string">"POST"</span>, <span class="string">"stash.php"</span>, <span class="literal">true</span>);</div><div class="line">  oReq.onload = <span class="function"><span class="keyword">function</span>(<span class="params">oEvent</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (oReq.status == <span class="number">200</span>) &#123;</div><div class="line">      oOutput.innerHTML = <span class="string">"Uploaded!"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      oOutput.innerHTML = <span class="string">"Error "</span> + oReq.status + <span class="string">" occurred when trying to upload your file.&lt;br \/&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  oReq.send(oData);</div><div class="line">  ev.preventDefault();</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>若你传入了一个表单的引用，那么表单指定的方法（译注：应指Post、Get）会覆盖open()方法调用时指定的。</p>
</blockquote>
<p>你也可以直接添加File或Blob到FormData对象，如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data.<span class="built_in">append</span>(<span class="string">"myfile"</span>, myBlob, <span class="string">"filename.txt"</span>);</div></pre></td></tr></table></figure>
<p>使用append()方法时，使用第三个可选的参数会指定一个文件名，用于请求头的<code>Content-Disposition</code>字段。若没有指定文件名（或者该参数不被支持），那就默认使用“blob”这个名字。</p>
<h2 id="通过AJAX提交表单和发送文件而不使用FormData对象"><a href="#通过AJAX提交表单和发送文件而不使用FormData对象" class="headerlink" title="通过AJAX提交表单和发送文件而不使用FormData对象"></a>通过AJAX提交表单和发送文件而不使用FormData对象</h2><p>若你想了解如何基于AJAX进行序列化和发送表单操作，而不使用FormData对象，可阅读<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files" target="_blank" rel="external">此文</a>。</p>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="external">Using XMLHttpRequest</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement" target="_blank" rel="external">HTMLFormElement</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="external">Blob</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="external">Typed Arrays</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】通过JavaScript发送表单</title>
    <link href="http://levonlin.info/2017/06/21/%E3%80%90%E8%AF%91%E3%80%91%E9%80%9A%E8%BF%87JavaScript%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95/"/>
    <id>http://levonlin.info/2017/06/21/【译】通过JavaScript发送表单/</id>
    <published>2017-06-21T07:40:19.000Z</published>
    <updated>2017-07-19T16:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>在<a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a>一文中，HTML表单可以声明式地发送一个<a href="https://developer.mozilla.org/en-US/docs/HTTP" target="_blank" rel="external">HTTP</a>请求。但表单也可以用JavaScript来准备一个HTTP请求。本文将探索如何做到这点。</p>
<h2 id="表单，不只是表单"><a href="#表单，不只是表单" class="headerlink" title="表单，不只是表单"></a>表单，不只是表单</h2><p>随着<a href="https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/Quickstart/Intro_to_open_web_apps" target="_blank" rel="external">开放式Web应用</a>的出现，现在提供<a href="https://developer.mozilla.org/en-US/docs/HTML/Forms" target="_blank" rel="external">HTML表单</a>、而不是文字表单供用户填写的做法，已经越发普遍了。而越来越多的开发者也获得了数据传输的控制权。</p>
<h3 id="获得对数据传输的控制权"><a href="#获得对数据传输的控制权" class="headerlink" title="获得对数据传输的控制权"></a>获得对数据传输的控制权</h3><p>标准的HTML表单提交操作会加载数据发送到的URL，这就意味着浏览器的窗口中会进行整个页面的重新加载。而如果避免了页面的重新加载，就会避免页面的闪烁和网络延迟，进而提供更顺畅的用户体验。</p>
<p>在许多现代的UI设计中，HTML表单只是用来收集用户的输入。当用户要发送数据时，Web应用会进行控制，并在后台异步地发送数据，只更新UI中需要更改的部分。</p>
<p>能异步地发送任意数据的技术称为<a href="https://developer.mozilla.org/en-US/docs/AJAX" target="_blank" rel="external">AJAX</a>，表示“异步的JavaScript和XML”。</p>
<h3 id="和传统表单处理的不同"><a href="#和传统表单处理的不同" class="headerlink" title="和传统表单处理的不同"></a>和传统表单处理的不同</h3><p>AJAX使用了<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest</a>(XHR)DOM对象，它可以建立HTTP请求、发送请求并处理结果。</p>
<blockquote>
<p><strong>注意：</strong> 老的AJAX技术可能不是用XMLHttpRequest。比如<a href="http://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a>和<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript" target="_blank" rel="external">eval()</a>函数结合起来使用。虽然该方法可行，但不推荐使用它，因为其存在严重的安全问题。所以除非为了兼容那些特别老旧、不支持XMLHttpRequest或<a href="https://developer.mozilla.org/en-US/docs/JSON" target="_blank" rel="external">JSON</a>的浏览器，还是<strong>避免使用该技术</strong>。</p>
</blockquote>
<p>由于历史原因，XMLHttpRequest本是设计用来获取和发送交换格式为<a href="https://developer.mozilla.org/en-US/docs/XML" target="_blank" rel="external">XML</a>的数据的。但现在JSON取代了XML，有着更普遍的使用。</p>
<p>不过XML和JSON都不符合作为表单数据请求的编码。表单数据（<code>application/x-www-form-urlencoded</code>）是用于构造键值对的URL编码列表的，若是要传输二进制数据，HTTP请求会被重塑为<code>multipart/form-data</code>。</p>
<p>若你能掌控前端（运行在浏览器上的代码）和后端（运行在服务器上的代码），你就能发送JSON或XML、并随心所欲地处理它们。</p>
<p>但如果你使用的是第三方服务，这就没那么容易了，因为某些服务只接受表单数据。当然也有使用表单数据处理起来更方便的情况，比如数据是键值对或二进制数据时，用现成的后端工具就能处理它们、不需要额外的代码。</p>
<p>那么，具体该如何发送数据呢？</p>
<h2 id="发送表单数据"><a href="#发送表单数据" class="headerlink" title="发送表单数据"></a>发送表单数据</h2><p>目前有三种方式来发送表单数据，既有老旧的技术、也有新特性<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/FormData" target="_blank" rel="external">FormData</a>对象，接下来就来深入了解下它们。</p>
<h3 id="在隐藏的iframe中构建DOM"><a href="#在隐藏的iframe中构建DOM" class="headerlink" title="在隐藏的iframe中构建DOM"></a>在隐藏的iframe中构建DOM</h3><p>发送表单数据最古老的方法，是用DOM API建立一个表单，然后发送数据到一个隐藏的<code>&lt;iframe&gt;</code>。为了访问你提交内容的处理结果，应检索下<code>&lt;iframe&gt;</code>的内容。</p>
<blockquote>
<p><strong>警告：避免使用该技术。</strong>在使用第三方服务时，该技术有安全风险，因为它会导致你面临<a href="http://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="external">脚本注入攻击</a>。若你使用HTTPS，使用<code>&lt;ifrme&gt;</code>发送表单还会影响<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Same_origin_policy_for_JavaScript" target="_blank" rel="external">同源策略</a>，并导致内容被发送到一个无法访问的<code>&lt;ifrme&gt;</code>中。当然如果你要兼容很老旧的浏览器，这项技术可能就是你唯一的选择了。</p>
</blockquote>
<p>下面是一个例子：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sendData(</span></span></span><span class="template-variable">&#123;test:'ok'&#125;</span><span class="xml"><span class="tag"><span class="string">)"</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个iFrame来发送我们的数据</span></div><div class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">iframe.name = <span class="string">"myTarget"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 将iFrame添加到文档流中</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  iframe.style.display = <span class="string">"none"</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 用来发送数据的函数</span></div><div class="line"><span class="comment">// 需要一个参数，是一个由键值对组成的对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name,</div><div class="line">      form = <span class="built_in">document</span>.createElement(<span class="string">"form"</span>),</div><div class="line">      node = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 定义响应加载时的行为</span></div><div class="line">  iframe.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"Yeah! Data sent."</span>);</div><div class="line">  &#125;);</div><div class="line">    </div><div class="line">  form.action = <span class="string">"http://www.cs.tut.fi/cgi-bin/run/~jkorpela/echo.cgi"</span>;</div><div class="line">  form.target = iframe.name;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(name <span class="keyword">in</span> data) &#123;</div><div class="line">    node.name  = name;</div><div class="line">    node.value = data[name].toString();</div><div class="line">    form.appendChild(node.cloneNode());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 要发送数据，表单得添加到文档流中</span></div><div class="line">  form.style.display = <span class="string">"none"</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(form);</div><div class="line"></div><div class="line">  form.submit();</div><div class="line"></div><div class="line">  <span class="comment">// 表单一发送就移除它</span></div><div class="line">  <span class="built_in">document</span>.body.removeChild(form);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：<br><a href="https://mdn.mozillademos.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript$samples/Building_a_DOM_in_a_hidden_iframe?revision=1226811" target="_blank" rel="external">效果</a></p>
<h3 id="手动创建一个XMLHttpRequest"><a href="#手动创建一个XMLHttpRequest" class="headerlink" title="手动创建一个XMLHttpRequest"></a>手动创建一个XMLHttpRequest</h3><p>XMLHttpRequest是发送HTTP请求最安全和可靠的方式。要想用XMLHttpRequest发送表单数据，得先用URL编码要发送的数据，并遵循表单数据请求的规范。</p>
<blockquote>
<p><strong>注意：</strong> 若想了解更多关于XMLHttpRequest，这几篇文章可能对你有用：<a href="https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started" target="_blank" rel="external">An introductory article to AJAX</a>，以及一个关于<a href="https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="external">使用XMLHttpRequest</a>的高级教程。</p>
</blockquote>
<p>来重构下我们先前的例子：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendData(</span></span></span><span class="template-variable">&#123;test:'ok'&#125;</span><span class="xml"><span class="tag"><span class="string">)"</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>如你所见，HTML部分并未真的有所改变，但JavaScript部分就完全不同了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> XHR = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  <span class="keyword">var</span> urlEncodedData = <span class="string">""</span>;</div><div class="line">  <span class="keyword">var</span> urlEncodedDataPairs = [];</div><div class="line">  <span class="keyword">var</span> name;</div><div class="line"></div><div class="line">  <span class="comment">// 将data对象转为一个URL编码的键值对数组</span></div><div class="line">  <span class="keyword">for</span>(name <span class="keyword">in</span> data) &#123;</div><div class="line">    urlEncodedDataPairs.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 将键值对组合成一个字符串，并把所有经过URL编码的空格替换为'+'号；以符合浏览器表单提交的行为</span></div><div class="line">  <span class="comment">// the '+' character; matches the behaviour of browser form submissions.</span></div><div class="line">  urlEncodedData = urlEncodedDataPairs.join(<span class="string">'&amp;'</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 定义成功的数据提交后会发生什么</span></div><div class="line">  XHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    alert(<span class="string">'Yeah! Data sent and response loaded.'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 定义失败的情况会发生什么</span></div><div class="line">  XHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    alert(<span class="string">'Oups! Something goes wrong.'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 配置请求</span></div><div class="line">  XHR.open(<span class="string">'POST'</span>, <span class="string">'https://example.com/cors.php'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 添加表单数据POST请求所需的HTTP请求头</span></div><div class="line">  XHR.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 最后，发送数据</span></div><div class="line">  XHR.send(urlEncodedData);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：<br><a href="https://mdn.mozillademos.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript$samples/Building_an_XMLHttpRequest_manually?revision=1226811" target="_blank" rel="external">效果</a></p>
<blockquote>
<p><strong>注意：</strong> 若你想使用此处的XMLHttpRequest方法发送数据到第三方网站，也会受到同源策略的限制。要实现跨域请求，还需要<a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS" target="_blank" rel="external">CORS和HTTP访问控制</a>。</p>
</blockquote>
<h3 id="使用XMLHttpRequest和FormData对象"><a href="#使用XMLHttpRequest和FormData对象" class="headerlink" title="使用XMLHttpRequest和FormData对象"></a>使用XMLHttpRequest和FormData对象</h3><p>手动构建HTTP请求是挺麻烦的，幸运的是，最近的一项<a href="http://www.w3.org/TR/XMLHttpRequest/" target="_blank" rel="external">XMLHttpRequest标准</a>提供了一个处理表单请求的简便方法–FormData对象。</p>
<p>FormData对象可被用来建立要传输的表单数据，或者从表单元素中获取数据来管理如何发送。要注意FormData对象是“只写”的，这意味着你可以改变它们、但不能访问它们的内容。</p>
<p>使用FormData对象的方法会在<a href="http://levonlin.info/2017/07/15/%E3%80%90%E8%AF%91%E3%80%91%E4%BD%BF%E7%94%A8FormData%E5%AF%B9%E8%B1%A1/">使用FormData对象</a>一文中详细介绍，下面有两个例子：</p>
<h4 id="使用独立的FormData对象"><a href="#使用独立的FormData对象" class="headerlink" title="使用独立的FormData对象"></a>使用独立的FormData对象</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendData(</span></span></span><span class="template-variable">&#123;test:'ok'&#125;</span><span class="xml"><span class="tag"><span class="string">)"</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>现在你该很熟悉这个HTML的样子了。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span><span class="params">(data)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> XHR = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  <span class="keyword">var</span> FD  = <span class="keyword">new</span> FormData();</div><div class="line"></div><div class="line">  <span class="comment">// 将数据添加到FormData对象中</span></div><div class="line">  <span class="keyword">for</span>(name <span class="keyword">in</span> data) &#123;</div><div class="line">    FD.append(name, data[name]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 定义成功的数据提交后会发生什么</span></div><div class="line">  XHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</div><div class="line">    alert(<span class="string">'Yeah! Data sent and response loaded.'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 定义失败的情况会发生什么</span></div><div class="line">  XHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</div><div class="line">    alert(<span class="string">'Oups! Something went wrong.'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 配置请求</span></div><div class="line">  XHR.open(<span class="string">'POST'</span>, <span class="string">'https://example.com/cors.php'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 发送FormData对象，HTTP头会自动设置</span></div><div class="line">  XHR.send(FD);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：<br><a href="https://mdn.mozillademos.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript$samples/Using_a_standalone_FormData_object?revision=1226811" target="_blank" rel="external">效果</a></p>
<h4 id="将FormData绑到表单元素上使用"><a href="#将FormData绑到表单元素上使用" class="headerlink" title="将FormData绑到表单元素上使用"></a>将FormData绑到表单元素上使用</h4><p>你也可以将FormData对象绑定到一个表单元素上，这样做会创建一个FormData对象来表示表单中的数据。</p>
<p>HTML是典型的表单：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">form</span> id=<span class="string">"myForm"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"myName"</span>&gt;Send me your name:&lt;/label&gt;</div><div class="line">  &lt;<span class="selector-tag">input</span> id=<span class="string">"myName"</span> name=<span class="string">"name"</span> value=<span class="string">"John"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"submit"</span> value=<span class="string">"Send Me!"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>但JavaScript会接管表单的提交操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XHR = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">    <span class="comment">// 绑定FormData对象和表单元素</span></div><div class="line">    <span class="keyword">var</span> FD = <span class="keyword">new</span> FormData(form);</div><div class="line"></div><div class="line">    <span class="comment">// 定义成功的数据提交后会发生什么</span></div><div class="line">    XHR.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">      alert(event.target.responseText);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 定义失败的情况会发生什么</span></div><div class="line">    XHR.addEventListener(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">      alert(<span class="string">'Oups! Something goes wrong.'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 配置请求</span></div><div class="line">    XHR.open(<span class="string">"POST"</span>, <span class="string">"https://example.com/cors.php"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 发送的数据是用户在表单中提供的</span></div><div class="line">    XHR.send(FD);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// 访问表单元素</span></div><div class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 并接管其submit事件</span></div><div class="line">  form.addEventListener(<span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.preventDefault();</div><div class="line"></div><div class="line">    sendData();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果如下：<br><a href="https://mdn.mozillademos.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript$samples/Using_FormData_bound_to_a_form_element?revision=1226811" target="_blank" rel="external">效果</a></p>
<h2 id="处理二进制数据"><a href="#处理二进制数据" class="headerlink" title="处理二进制数据"></a>处理二进制数据</h2><p>若你在一个含有<code>&lt;input type=&quot;file&quot;&gt;</code>组件的表单中使用FormData对象，那么数据会被自动处理。但要手动发送二进制数据的话，还有很多额外工作要做。</p>
<p>现代Web有很多二进制数据源：比如<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="external">FileReader</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement" target="_blank" rel="external">Canvas</a>、<a href="https://developer.mozilla.org/en-US/docs/WebRTC/navigator.getUserMedia" target="_blank" rel="external">WebRTC</a>。但不幸的是，某些老旧浏览器不能访问二进制数据或者需要复杂的方法才能实现。这些遗留的问题已不在本文讨论范围之内。若你想了解更多关于FileReader API，请阅读<a href="https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications" target="_blank" rel="external">Using files from web applications</a>。</p>
<p>用FormData来发送二进制是很直接的，使用<code>append()</code>方法就好了。但要手动做到这点，就需要一些技巧了。</p>
<p>在下面的例子中，我们会用来FileReader API来访问二进制数据，然后手动建立多部分的表单数据请求。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"i1"</span>&gt;</span>text data:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"i1"</span> <span class="attr">name</span>=<span class="string">"myText"</span> <span class="attr">value</span>=<span class="string">"Some text data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"i2"</span>&gt;</span>file data:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"i2"</span> <span class="attr">name</span>=<span class="string">"myFile"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如你所见，HTML用了标准的<code>&lt;form&gt;</code>，这没什么神奇的。“神奇”的部分在JavaScript里：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 由于我们要访问DOM结点，所以得在页面加载完后才初始化脚本</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 这些变量用来存储表单数据</span></div><div class="line">  <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"i1"</span>);</div><div class="line">  <span class="keyword">var</span> file = &#123;</div><div class="line">        <span class="attr">dom</span>    : <span class="built_in">document</span>.getElementById(<span class="string">"i2"</span>),</div><div class="line">        <span class="attr">binary</span> : <span class="literal">null</span></div><div class="line">      &#125;;</div><div class="line"> </div><div class="line">  <span class="comment">// 使用FileReader API来访问文件内容</span></div><div class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line"></div><div class="line">  <span class="comment">// 由于FileReader是异步的，所以得在其完成文件读取后才存储结果</span></div><div class="line">  reader.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    file.binary = reader.result;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 在页面加载时，若已经选择了文件就直接读取它</span></div><div class="line">  <span class="keyword">if</span>(file.dom.files[<span class="number">0</span>]) &#123;</div><div class="line">    reader.readAsBinaryString(file.dom.files[<span class="number">0</span>]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 否则在用户选择文件时再读取它</span></div><div class="line">  file.dom.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(reader.readyState === FileReader.LOADING) &#123;</div><div class="line">      reader.abort();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    reader.readAsBinaryString(file.dom.files[<span class="number">0</span>]);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// sendData是本例的主要函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 若已经选择了文件，就等浏览器读取完</span></div><div class="line">    <span class="comment">// 否则就延迟本函数的执行</span></div><div class="line">    <span class="keyword">if</span>(!file.binary &amp;&amp; file.dom.files.length &gt; <span class="number">0</span>) &#123;</div><div class="line">      setTimeout(sendData, <span class="number">10</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 要构建多部分的表单数据请求，需要一个XMLHttpRequest实例</span></div><div class="line">    <span class="keyword">var</span> XHR = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">    <span class="comment">// 需要一个分隔符来定义请求体的每部分</span></div><div class="line">    <span class="keyword">var</span> boundary = <span class="string">"blob"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 将请求体存为一个字符串</span></div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 若用户选择了文件</span></div><div class="line">    <span class="keyword">if</span> (file.dom.files[<span class="number">0</span>]) &#123;</div><div class="line">      <span class="comment">// 开启请求体的新部分</span></div><div class="line">      data += <span class="string">"--"</span> + boundary + <span class="string">"\r\n"</span>;</div><div class="line"></div><div class="line">      <span class="comment">// 该部分描述为表单数据</span></div><div class="line">      data += <span class="string">'content-disposition: form-data; '</span></div><div class="line">      <span class="comment">// 定义表单数据的名字</span></div><div class="line">            + <span class="string">'name="'</span>         + file.dom.name          + <span class="string">'"; '</span></div><div class="line">      <span class="comment">// 提供真实的文件名</span></div><div class="line">            + <span class="string">'filename="'</span>     + file.dom.files[<span class="number">0</span>].name + <span class="string">'"\r\n'</span>;</div><div class="line">      <span class="comment">// 提供文件的MIME类型</span></div><div class="line">      data += <span class="string">'Content-Type: '</span> + file.dom.files[<span class="number">0</span>].type + <span class="string">'\r\n'</span>;</div><div class="line"></div><div class="line">      <span class="comment">// 元数据和真实数据部分间有一个空行</span></div><div class="line">      data += <span class="string">'\r\n'</span>;</div><div class="line">      </div><div class="line">      <span class="comment">// 往请求体里添加二进制数据</span></div><div class="line">      data += file.binary + <span class="string">'\r\n'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 文本数据的组织更加简单</span></div><div class="line">    <span class="comment">// 开启请求体的新部分</span></div><div class="line">    data += <span class="string">"--"</span> + boundary + <span class="string">"\r\n"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 描述为表单数据并命名</span></div><div class="line">    data += <span class="string">'content-disposition: form-data; name="'</span> + text.name + <span class="string">'"\r\n'</span>;</div><div class="line">    <span class="comment">// 元数据和真实数据部分间有一个空行</span></div><div class="line">    data += <span class="string">'\r\n'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 往请求体里添加文本数据</span></div><div class="line">    data += text.value + <span class="string">"\r\n"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 完成了所有部分，就“闭合”请求体</span></div><div class="line">    data += <span class="string">"--"</span> + boundary + <span class="string">"--"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 定义成功的数据提交后会发生什么</span></div><div class="line">    XHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">      alert(<span class="string">'Yeah! Data sent and response loaded.'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 定义失败的情况会发生什么</span></div><div class="line">    XHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">      alert(<span class="string">'Oups! Something went wrong.'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 配置请求</span></div><div class="line">    XHR.open(<span class="string">'POST'</span>, <span class="string">'https://example.com/cors.php'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 添加必要的HTTP请求头来处理多部分表单数据的POST请求</span></div><div class="line">    XHR.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'multipart/form-data; boundary='</span> + boundary);</div><div class="line"></div><div class="line">    <span class="comment">// 最后，发送数据</span></div><div class="line">    XHR.send(data);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 访问表单</span></div><div class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 接管submit事件</span></div><div class="line">  form.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.preventDefault();</div><div class="line">    sendData();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果如下：<br><a href="https://mdn.mozillademos.org/en-US/docs/Learn/HTML/Forms/Sending_forms_through_JavaScript$samples/Dealing_with_binary_data?revision=1226811" target="_blank" rel="external">效果</a></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>浏览器的不同，导致通过JavaScript发送表单数据可以简单或很困难。FromData对象是通常的解决方案，而且我们应该毫不犹豫地在老旧浏览器上使用其polyfill：</p>
<ul>
<li><a href="https://gist.github.com/3120320" target="_blank" rel="external">这个gist</a>用Web Workers来提供FromData</li>
<li><a href="https://github.com/francois2metz/html5-formdata" target="_blank" rel="external">HTML5-formdata</a>致力于提供FromData对象的polyfill，但这得依赖<a href="http://www.w3.org/TR/FileAPI/" target="_blank" rel="external">File API</a></li>
<li><a href="https://github.com/jimmywarting/FormData" target="_blank" rel="external">这个polyfill</a>提供了FromData的大部分新方法（entries, keys, values和对for…of的支持）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】怎样创建定制表单组件</title>
    <link href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>http://levonlin.info/2017/05/31/【译】怎样创建定制表单组件/</id>
    <published>2017-05-31T10:45:53.000Z</published>
    <updated>2017-07-19T16:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/How_to_build_custom_form_widgets" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>在许多情况下，<a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">可用的HTML表单组件</a>是不够的。若你想在诸如<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select" target="_blank" rel="external"><code>&lt;select&gt;</code></a>元素的组件上<a href="http://levonlin.info/2016/06/29/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/">应用高级样式</a>、或者想定制组件的行为，你就只能选择创建自己的表单组件。</p>
<p>我们将通过本文学习如何构建一个表单组件。为达到目的，我们选择重构<code>&lt;select&gt;</code>元素作为例子。</p>
<blockquote>
<p><strong>注意：</strong>我们会专注于构建组件，但不会关注如何保证代码的通用和可重用。构建组件时会涉及到一些特殊的JavaScript代码和未知上下文中的DOM操作，而这些内容已经超出了本文的讨论范围。</p>
</blockquote>
<h2 id="设计，结构和语义"><a href="#设计，结构和语义" class="headerlink" title="设计，结构和语义"></a>设计，结构和语义</h2><p>在构建一个定制组件前，应先从明确你想要达到的效果开始，这会节省你宝贵的时间。具体来讲，清晰地定义组件的所有状态是很重要的。要做到这点，最好从一个已经存在的、状态和行为已经为人所熟知的组件开始，这样你就只需尽可能地模仿该组件即可。</p>
<p>在我们的例子中，我们会重构<code>&lt;select&gt;</code>元素。下面是我们期望达到的结果：</p>
<p><img src="https://developer.mozilla.org/files/4481/custom-select.png" alt=""></p>
<p>上面的截屏展示了我们组件的三个主要状态：普通状态（左）、激活状态（中）和打开状态（右）。</p>
<p>至于组件的行为，我们希望可以像其他原生组件一样，通过鼠标和键盘来操控它。先从定义组件如何到达各个状态开始：</p>
<p><strong>组件变为普通状态：</strong></p>
<ul>
<li>页面加载</li>
<li>组件激活且用户点击了组件外任意地方</li>
<li>组件激活且用户用键盘把焦点移动到别的组件</li>
</ul>
<blockquote>
<p><strong>注意：</strong>在页面上移动焦点通常是通过敲tab键来实现的，但不是所有地方都遵循这个惯例。比如Safari上默认是用<a href="http://www.456bereastreet.com/archive/200906/enabling_keyboard_navigation_in_mac_os_x_web_browsers/" target="_blank" rel="external">Option+Tab组合键</a>来实现在页面上移动焦点。</p>
</blockquote>
<p><strong>组件变为激活状态：</strong></p>
<ul>
<li>用户点击了组件</li>
<li>用户按tab键且组件获得了焦点</li>
<li>组件处于打开状态且用户点击了组件</li>
</ul>
<p><strong>组件变为打开状态：</strong></p>
<ul>
<li>组件处于其他非打开状态且用户点击了它</li>
</ul>
<p>在知道如何改变状态后，定义组件的值如何被改变也是很重要的：</p>
<p><strong>组件的值改变：</strong></p>
<ul>
<li>在组件处于打开状态时，用户点击了一个选项</li>
<li>在组件处于激活状态时，用户按了上下方向键</li>
</ul>
<p>最后我们来定义下组件选项的行为：</p>
<ul>
<li>当组件处于打开状态时，被选中的选项会高亮</li>
<li>当鼠标移到一个选项上，该选项会高亮且原先高亮状态的选项会恢复到普通状态</li>
</ul>
<p>考虑例子的演示目的，我们的分析就到此为止；然而如果你认真读过上文，会发现我们漏了一些效果。比如，当组件处于打开状态时，如果用户按了tab键会发生什么呢？答案是–什么都不会发生。正确的效果虽然显而易见（译注：参考select原生组件，也是什么都不会发生），但事实是我们没有在上述说明中定义它，这个效果很容易就会被忽视。在团队协作中，如果设计组件的人和实现它的人不同，这是特别容易出现的问题。</p>
<p>另一个有趣的问题是：组件处于打开状态时，用户按上下方向键会发生什么？要回答它，需要一点技巧。若考虑激活状态和打开状态是完全不相干的，那答案就还是“什么都不会发生”，因为我们并未给打开状态定义任何键盘交互。另一方面，如果考虑激活状态和打开状态有部分重叠，那答案就是：值可能会改变但选项也因此不会被高亮（译注：大概因为组件已经处于激活状态了吧），这也是因为当组件处于打开状态时，我们并未给选项未定义任何键盘交互（只是定义了组件打开时应该发生什么，却没定义打开后要干嘛）。</p>
<p>在我们的例子中，缺失的特性还是比较明显的，所以我们还能处理得了它；但当面对来自外部的新组件时，由于没人知道正确的行为是什么，这时就会造成真正的麻烦。因此，花些时间在设计阶段是很有必要的，如果你此时定义了一个不佳的交互，或忘记了去定义，后续在用户使用了该交互时再去重定义是很困难的。若（处理交互时）你有疑问，应积极寻求他人的帮助；而若你心中有数，则应毫不犹豫地<a href="http://en.wikipedia.org/wiki/Usability_testing" target="_blank" rel="external">进行用户测试</a>。上面讨论的过程，可称之为UX（译注：用户体验）设计。如果你想了解更多这方面的内容，可以参考下面这些资源：</p>
<ul>
<li><a href="http://www.uxmatters.com/" target="_blank" rel="external">UXMatters.com</a></li>
<li><a href="http://uxdesign.com/" target="_blank" rel="external">UXDesign.com</a></li>
<li><a href="http://uxdesign.smashingmagazine.com/" target="_blank" rel="external">The UX Design section of SmashingMagazine</a></li>
</ul>
<blockquote>
<p><strong>注意：</strong>在多数系统中，还有有一种方法可以打开<code>&lt;select&gt;</code>元素以查看所有可用的选项（这和用鼠标点击<code>&lt;select&gt;</code>元素是一样的）。这个方法在Windows下是用Alt+下方向键来实现的，我们的例子中并未实现它–但要这样做也很简单，因为整个操作的机制已经被用于实现click事件了。</p>
</blockquote>
<h3 id="定义HTML结构和语义"><a href="#定义HTML结构和语义" class="headerlink" title="定义HTML结构和语义"></a>定义HTML结构和语义</h3><p>上面我们确定了组建的基本功能，现在可以来构建我们的组件了。第一步我们要定义其HMLT结构，并为其添加基本的语义。下面是我们重构<code>&lt;select&gt;</code>元素所需的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 这是组件的主要容器.</span></div><div class="line">     tabindex 特性用于让用户能聚焦到该组件。 </div><div class="line">     用JavaScript来设置它是一个更好的办法 --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"select"</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 这个容器用于展示组件的当前值 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- 这个容器会包含组件里的所有可用选项，因为选项是一个列表，所有采用ul元素更加合适 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"optList"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 每个选项只会包含要展示的内容，稍后我们会了解如何处理其真实值，用来和表单数据一起发出去 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要注意此处class名的使用；这些class标记了每个相关的元素，而不需要依赖其实际使用的HTML元素。这么做能确保我们不会把CSS和JavaScript与HTML结构作强关联，从而做到改变后续的组件代码实现时，不破坏使用该组件的代码。比如你想实现一个同样的<code>&lt;optgroup&gt;</code>元素时，可用直接用相同的代码来调用。</p>
<h3 id="用CSS创建样式和交互"><a href="#用CSS创建样式和交互" class="headerlink" title="用CSS创建样式和交互"></a>用CSS创建样式和交互</h3><p>现在我们已经有了组件的结构了，接下来要来设计组件了。创建这个自定义组件的目的，是为了用我们想要的形式来给该组件添加样式。要做到这点，我们要把CSS的编码工作拆为两部分：第一部分是让我们组件和<code>&lt;select&gt;</code>元素看起来一致的必要CSS规则，第二部分是用来让组件变成我们想要的样子的样式。</p>
<h4 id="必要的样式"><a href="#必要的样式" class="headerlink" title="必要的样式"></a>必要的样式</h4><p>必要的样式是用来处理我们组件的三个状态的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span> &#123;</div><div class="line">  <span class="comment">/* 给选项列表创建一个定位上下文 */</span></div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line"> </div><div class="line">  <span class="comment">/* 让我们的组件成为文本流的一部分，并使之可伸缩 */</span></div><div class="line">  <span class="attribute">display </span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要一个额外类名<code>active</code>，来定义组件处于激活状态时的外观。因为我们的组件是可以获得操作焦点的，所以还要将相同的样式用于<code>:focus</code>伪类，保证激活和获得焦点时的行为一致。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span><span class="selector-class">.active</span>,</div><div class="line"><span class="selector-class">.select</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">  <span class="attribute">outline</span>: none;</div><div class="line"> </div><div class="line">  <span class="comment">/* box-shadow 属性不是必要的，但它可以作为默认值保证激活状态可见，去掉它也是可以的。 */</span></div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> <span class="number">#227755</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来处理选项列表：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 这里的 .select 选择器，用来确保后面选择器匹配的元素就是我们组件中那个 */</span></div><div class="line"><span class="selector-class">.select</span> <span class="selector-class">.optList</span> &#123;</div><div class="line">  <span class="comment">/* 下面样式确保选项列表会展示在当前值下面、并在HTML文档流之外 */</span></div><div class="line">  <span class="attribute">position </span>: absolute;</div><div class="line">  <span class="attribute">top      </span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">left     </span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要一个额外的class来处理选项列表的隐藏状态。为了管理激活和展开两个不同的状态，这么做是很有必要的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span> <span class="selector-class">.optList</span><span class="selector-class">.hidden</span> &#123;</div><div class="line">  <span class="comment">/* 下面是一个以无障碍方式来隐藏列表的简单方法，我们会在文末讨论更多关于无障碍访问的内容。 */</span></div><div class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p>在有了基本的功能之后，有趣的部分开始了。下面是一个可选的例子，效果和本文开头的那个截图一致。但是你也可以自由探索、看看你能实现怎样的效果。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span> &#123;</div><div class="line">  <span class="comment">/* 所有的大小值都会采用em值来保证无障碍访问</span></div><div class="line">  （保证组件在用户使用浏览器纯文字模式下的缩放时，还保留自适应的能力）。</div><div class="line">  在计算时，假设1em == 16px，这也是大多数浏览器的默认值。</div><div class="line">  如果你对px到em的转换感到困惑，可以访问：http://riddle.pl/emcalc/ */</div><div class="line">  <span class="attribute">font-size   </span>: <span class="number">0.625em</span>; <span class="comment">/* this (10px) is the new font size context for em value in this context */</span></div><div class="line">  <span class="attribute">font-family </span>: Verdana, Arial, sans-serif;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-box-sizing </span>: border-box;</div><div class="line">  <span class="attribute">box-sizing </span>: border-box;</div><div class="line"></div><div class="line">  <span class="comment">/* 需要额外的空间来添加向下箭头 */</span></div><div class="line">  <span class="attribute">padding </span>: .<span class="number">1em</span> <span class="number">2.5em</span> .<span class="number">2em</span> .<span class="number">5em</span>; <span class="comment">/* 1px 25px 2px 5px */</span></div><div class="line">  <span class="attribute">width   </span>: <span class="number">10em</span>; <span class="comment">/* 100px */</span></div><div class="line"></div><div class="line">  <span class="attribute">border        </span>: .<span class="number">2em</span> solid <span class="number">#000</span>; <span class="comment">/* 2px */</span></div><div class="line">  <span class="attribute">border-radius </span>: .<span class="number">4em</span>; <span class="comment">/* 4px */</span></div><div class="line">  <span class="attribute">box-shadow    </span>: <span class="number">0</span> .<span class="number">1em</span> .<span class="number">2em</span> <span class="built_in">rgba</span>(0,0,0,.45); <span class="comment">/* 0 1px 2px */</span></div><div class="line">  </div><div class="line">  <span class="comment">/* 第一句声明用于不支持线性渐变的浏览器。</span></div><div class="line">  第二句声明是因为基于Webkit的浏览器对线性渐变属性还要加个前缀。</div><div class="line">  若你还想支持老旧浏览器，可参考http://www.colorzilla.com/gradient-editor/ */</div><div class="line">  <span class="attribute">background </span>: <span class="number">#F0F0F0</span>;</div><div class="line">  <span class="attribute">background </span>: <span class="built_in">-webkit-linear-gradient</span>(90deg, #E3E3E3, #fcfcfc 50%, #f0f0f0);</div><div class="line">  <span class="attribute">background </span>: <span class="built_in">linear-gradient</span>(0deg, #E3E3E3, #fcfcfc 50%, #f0f0f0);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.select</span> <span class="selector-class">.value</span> &#123;</div><div class="line">  <span class="comment">/* 因为value元素可能会比组件还宽，所以我们得保障这不会改变组件的宽度 */</span></div><div class="line">  <span class="attribute">display  </span>: inline-block;</div><div class="line">  <span class="attribute">width    </span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">overflow </span>: hidden;</div><div class="line"></div><div class="line">  <span class="attribute">vertical-align</span>: top;</div><div class="line"></div><div class="line">  <span class="comment">/* 如果内容溢出了，最好能有省略号来替代。 */</span></div><div class="line">  <span class="attribute">white-space  </span>: nowrap;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们不需要额外的元素来设计向下箭头，而是使用<code>:after</code>伪元素。但其实这也能在select类上用一个简单的背景图片来实现。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content </span>: <span class="string">"▼"</span>; <span class="comment">/* 使用 unicode 字符 U+25BC；参见 http://www.utf8-chartable.de */</span></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">z-index </span>: <span class="number">1</span>; <span class="comment">/* 用来保证箭头会叠在选项列表上面 */</span></div><div class="line">  <span class="attribute">top     </span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right   </span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-box-sizing </span>: border-box;</div><div class="line">  <span class="attribute">box-sizing </span>: border-box;</div><div class="line"></div><div class="line">  <span class="attribute">height  </span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">width   </span>: <span class="number">2em</span>;  <span class="comment">/* 20px */</span></div><div class="line">  <span class="attribute">padding-top </span>: .<span class="number">1em</span>; <span class="comment">/* 1px */</span></div><div class="line"></div><div class="line">  <span class="attribute">border-left  </span>: .<span class="number">2em</span> solid <span class="number">#000</span>; <span class="comment">/* 2px */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> .<span class="number">1em</span> .<span class="number">1em</span> <span class="number">0</span>;  <span class="comment">/* 0 1px 1px 0 */</span></div><div class="line"></div><div class="line">  <span class="attribute">background-color </span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color </span>: <span class="number">#FFF</span>;</div><div class="line">  <span class="attribute">text-align </span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，给选项列表添加样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span> <span class="selector-class">.optList</span> &#123;</div><div class="line">  <span class="attribute">z-index </span>: <span class="number">2</span>; <span class="comment">/* 表明选项列表会始终叠在向下箭头之上 */</span></div><div class="line"></div><div class="line">  <span class="comment">/* 重置ul元素的默认样式 */</span></div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-box-sizing </span>: border-box;</div><div class="line">  <span class="attribute">box-sizing </span>: border-box;</div><div class="line"></div><div class="line">  <span class="comment">/* 确保即使值太少让选项列表小于组件主体，也能让选项列表会和组件主体一样大 */</span></div><div class="line">  <span class="attribute">min-width </span>: <span class="number">100%</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* 如果列表太长了，其内容会在垂直方向上溢出（默认会自动添加一个垂直方向的滚动条），</span></div><div class="line">    但不会在水平方向上也这样（因为我们没有设置宽度，列表会有个自适应宽度，如果不能自适应，</div><div class="line">    内容就会被截断） */</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">10em</span>; <span class="comment">/* 100px */</span></div><div class="line">  <span class="attribute">overflow-y</span>: auto;</div><div class="line">  <span class="attribute">overflow-x</span>: hidden;</div><div class="line"></div><div class="line">  <span class="attribute">border</span>: .<span class="number">2em</span> solid <span class="number">#000</span>; <span class="comment">/* 2px */</span></div><div class="line">  <span class="attribute">border-top-width </span>: .<span class="number">1em</span>; <span class="comment">/* 1px */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">4em</span> .<span class="number">4em</span>; <span class="comment">/* 0 0 4px 4px */</span></div><div class="line"></div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> .<span class="number">2em</span> .<span class="number">4em</span> <span class="built_in">rgba</span>(0,0,0,.4); <span class="comment">/* 0 2px 4px */</span></div><div class="line">  <span class="attribute">background</span>: <span class="number">#f0f0f0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于选项，我们需要添加一个highlight类来标明用户会选取（或已经选取）的值。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.select</span> <span class="selector-class">.option</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: .<span class="number">2em</span> .<span class="number">3em</span>; <span class="comment">/* 2px 3px */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.select</span> <span class="selector-class">.highlight</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面就是我们三个状态的实现效果了：<br><a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_1" target="_blank" rel="external">效果</a></p>
<h2 id="用JavaScript让组件“活”起来"><a href="#用JavaScript让组件“活”起来" class="headerlink" title="用JavaScript让组件“活”起来"></a>用JavaScript让组件“活”起来</h2><p>现在我们组件的结构和设计都已经做好，可以来写JavaScript代码让组件真正能运行起来了。</p>
<blockquote>
<p><strong>警告：</strong>下面的代码是教学代码，在实际编码时不能直接像下面一样使用。其中许多部分，并没有未来使用的保障、而且也不能在老旧浏览器上使用。此外，这些代码也有在生产环境中应该被优化掉的冗余部分。</p>
<p><strong>注意：</strong>创建可复用的组件是很有技巧性的。<a href="http://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html" target="_blank" rel="external">W3C Web Component 草案</a>是这个特定问题的一个解决方案。<a href="http://x-tags.org/" target="_blank" rel="external">X-tag project</a>是这一规范的实验性实现；我们鼓励你好好了解下它。</p>
</blockquote>
<h3 id="为什么不起作用？"><a href="#为什么不起作用？" class="headerlink" title="为什么不起作用？"></a>为什么不起作用？</h3><p>在开始之前，我们需要知道JavaScript的一个严重问题：在浏览器里，它是一个不可靠的技术。当你在创建自定义组件的时候，你不得不依赖JavaScript，因为它是把所有东西维系在一起的绳索。但是，在许多情况下JavaScript并不能在浏览器中运行：</p>
<ul>
<li>用户禁用了JavaScript：这已经是个最不常见的情况了，现在很少有人会禁用JavaScript。</li>
<li>脚本没有加载：这是最普遍的情况，特别是在网络不太可靠的移动端。</li>
<li>脚本有bug：你要经常考虑这一可能性。</li>
<li>脚本和第三方脚本冲突了：使用了追踪脚本或用户自用的书签时会发生这种情况。</li>
<li>脚本和浏览器拓展（如火狐的<a href="https://addons.mozilla.org/fr/firefox/addon/noscript/" target="_blank" rel="external">NoScript</a>拓展或Chrome的<a href="https://chrome.google.com/webstore/detail/notscripts/odjhifogjcknibkahlpidmdajjpkkcfn" target="_blank" rel="external">NoScripts</a>拓展）发生冲突、或受到干扰。</li>
<li>用户使用了老旧浏览器，并且你需要的一种特性不被支持：这通常发生在你用了很新的API时。</li>
</ul>
<p>由于有这些风险，我们需要认真考虑下JavaScript不起作用时会发生什么。深入处理这个问题已经超出了本文的论述范围，因为这和你希望如何让脚本通用和可复用密切相关，我们不会在例子中考虑这点。</p>
<p>在本文的例子中，若JavaScript代码不能运行，我们会回退到展示标准的<code>&lt;select&gt;</code>元素。要做到这点，得先来做两件事。</p>
<p>首先，我们要在使用自定义组件之前，添加一个普通的<code>&lt;select&gt;</code>元素。而为了能让自定义组件的数据和剩下的表单数据一起发送，这一步也是很有必要的。后边我们还会详细介绍。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"no-widget"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"myFruit"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"select"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"optList hidden"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第二，我们还得添加两个新的类名，实现隐藏不需要的元素（即在脚本能运行时的<code>&lt;select&gt;</code>元素、或脚本不能运行时的自定义组件）。要注意的是在默认情况下，此处的HTML代码会隐藏自定义组件。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.widget</span> <span class="selector-tag">select</span>,</div><div class="line"><span class="selector-class">.no-widget</span> <span class="selector-class">.select</span> &#123;</div><div class="line">  <span class="comment">/* 这个CSS选择器意思是：</span></div><div class="line">     - 要么body的类名被设为"widget"，此处就要隐藏`&lt;select&gt;`元素</div><div class="line">     - 要么body的类名没有改变，仍是"no-widget"，那么类名为"select"的元素就要被隐藏了 */</div><div class="line">  <span class="attribute">position </span>: absolute;</div><div class="line">  <span class="attribute">left     </span>: -<span class="number">5000em</span>;</div><div class="line">  <span class="attribute">height   </span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">overflow </span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，我们只需要一个JavaScript开关来决定脚本是否能运行了。这个开关很简单：若页面加载了脚本并运行，就会移除<code>no-widget</code>类并添加<code>widget</code>类，实现对<code>&lt;select&gt;</code>元素和自定义组件可见与否的切换。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.body.classList.remove(<span class="string">"no-widget"</span>);</div><div class="line">  <span class="built_in">document</span>.body.classList.add(<span class="string">"widget"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_2" target="_blank" rel="external">效果</a></p>
<blockquote>
<p><strong>注意：</strong>若你真的想让你的组件变得通用和可复用，除了作类名的切换，更好的方法是（在脚本能执行时）只添加<code>widget</code>类名隐藏<code>&lt;select&gt;</code>元素，并在页面中的每个<code>&lt;select&gt;</code>元素后面指定自定义的组件、动态添加到DOM树中。</p>
</blockquote>
<h3 id="让工作轻松些"><a href="#让工作轻松些" class="headerlink" title="让工作轻松些"></a>让工作轻松些</h3><p>在将要创建的代码中，我们会使用标准的DOM API来完成工作。然而，尽管浏览器对DOM API的支持已经越来越好，但在老旧浏览器上仍存在一些问题（特别在很老的IE上）。</p>
<p>若你想避免老旧浏览器上的麻烦，有两种方法可以做到：使用诸如<a href="http://jquery.com/" target="_blank" rel="external">jQuery</a>, <a href="https://github.com/julienw/dollardom" target="_blank" rel="external">$dom</a>, <a href="http://prototypejs.org/" target="_blank" rel="external">prototype</a>, <a href="http://dojotoolkit.org/" target="_blank" rel="external">Dojo</a>, <a href="http://yuilibrary.com/" target="_blank" rel="external">YUI</a>之类的稳定框架；或者补充那些缺失的但你要用的特性（通过条件加载可以很容易做到这点，比如可以使用<a href="http://yepnopejs.com/" target="_blank" rel="external">yepnope</a>库）。</p>
<p>我们计划使用的特性如下（从风险最大到最安全排列）：</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList" target="_blank" rel="external">classList</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="external">addEventListener</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">forEach</a>（不属于DOM但是现代JavaScript的特性）</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector" target="_blank" rel="external">querySelector</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll" target="_blank" rel="external">querySelectorAll</a></li>
</ol>
<p>除了上述特性的可用性，在开发之前仍存在一个问题。<code>querySelector()</code>方法返回的是一个<code>NodeList</code>而不是数组。<code>Array</code>对象支持<code>forEach</code>方法、但<code>NodeList</code>不支持。因为<code>NodeList</code>看起来像数组、也因为<code>forEach</code>方法用起来很方便，所以我们可以很简单地就给<code>NodeList</code>添加<code>forEach</code>支持、让我们的工作轻松些，就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NodeList.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.forEach.call(<span class="keyword">this</span>, callback);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们说这很简单可不是瞎说的哦。</p>
<h3 id="建立事件回调"><a href="#建立事件回调" class="headerlink" title="建立事件回调"></a>建立事件回调</h3><p>前期工作已经做好了，我们现在可以来定义用户和我们的组件交互时要用到的所有函数了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 这个函数会在取消激活自定义组件时被使用</span></div><div class="line">    需要一个参数：</div><div class="line">    select： 类名为`select`且要被取消激活的DOM节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deactivateSelect</span>(<span class="params">select</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 若组件未被激活，则什么都不做 */</span></div><div class="line">  <span class="keyword">if</span> (!select.classList.contains(<span class="string">'active'</span>)) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* 获取自定义组件的选项列表 */</span></div><div class="line">  <span class="keyword">var</span> optList = select.querySelector(<span class="string">'.optList'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* 关闭选项列表 */</span></div><div class="line">  optList.classList.add(<span class="string">'hidden'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* 取消自定义组件的激活状态 */</span></div><div class="line">  select.classList.remove(<span class="string">'active'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 该函数用于让用户（取消）激活组件</span></div><div class="line">    需要两个参数：</div><div class="line">    select：类名为`select`且要被激活的DOM节点</div><div class="line">    selectList：类名为`select`的所有DOM节点的列表</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">activeSelect</span>(<span class="params">select, selectList</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 若组件已经激活，则什么都不做 */</span></div><div class="line">  <span class="keyword">if</span> (select.classList.contains(<span class="string">'active'</span>)) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* 所有自定义组件的激活状态都得取消，</span></div><div class="line">    因为deactivateSelect函数满足了作为forEach回调函数的要求，</div><div class="line">    所以我们会直接使用它而不是用一个中间的匿名函数</div><div class="line"> */</div><div class="line">  selectList.forEach(deactivateSelect);</div><div class="line"></div><div class="line">  <span class="comment">/* 开启该组件的激活状态 */</span></div><div class="line">  select.classList.add(<span class="string">'active'</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/* 该函数用于让用户打开和关闭选项列表</span></div><div class="line">    需要一个参数：</div><div class="line">    select：有一个列表要切换状态的DOM节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleOptList</span>(<span class="params">select</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 选项列表可以从组件那获得 */</span></div><div class="line">  <span class="keyword">var</span> optList = select.querySelector(<span class="string">'.optList'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* 改变列表的类名来展示和隐藏它 */</span></div><div class="line">  optList.classList.toggle(<span class="string">'hidden'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 该函数用于高亮一个选项</span></div><div class="line">    需要两个参数：</div><div class="line">    select：类名为`select`且包含要被高亮选项的DOM节点</div><div class="line">    option：类名为`option`且要被高亮的DOM节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightOption</span>(<span class="params">select, option</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 获得自定义select元素的所有可用选项 */</span></div><div class="line">  <span class="keyword">var</span> optionList = select.querySelectorAll(<span class="string">'.option'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* 移除所有选项的高亮 */</span></div><div class="line">  optionList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">other</span>) </span>&#123;</div><div class="line">    other.classList.remove(<span class="string">'highlight'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">/* 高亮正确的选项 */</span></div><div class="line">  option.classList.add(<span class="string">'highlight'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面就是处理自定义组件的多个状态所需的所有函数。</p>
<p>接下来，我们把这些函数绑到合适的事件上：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 在文档加载出来后处理下事件绑定 */</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> selectList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.select'</span>);</div><div class="line"></div><div class="line">  <span class="comment">/* 每个自定义组件都要被初始化 */</span></div><div class="line">  selectList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">select</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* 所有的`select`元素也要被初始化 */</span></div><div class="line">    <span class="keyword">var</span> optionList = select.querySelectorAll(<span class="string">'.option'</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 用户把鼠标放到一个选项上时，高亮该选项 */</span></div><div class="line">    optionList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</div><div class="line">      option.addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/* 注意：在我们的函数调用内，`select`和`option`变量都是局部的 */</span></div><div class="line">        highlightOption(select, option);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/* 用户点击了自定义的select元素 */</span></div><div class="line">    select.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">      <span class="comment">/* 注意：在我们的函数调用内，`select`变量是局部的 */</span></div><div class="line">      <span class="comment">/* 改变选项列表的可见状态 */</span></div><div class="line">      toggleOptList(select);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/* 组件获得焦点时</span></div><div class="line">    /* 用户点击组件或用tab键访问组件时，组件会获得焦点 */</div><div class="line">    select.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">       <span class="comment">/* 注意：在我们的函数调用内，`select`和`selectList`变量都是局部的 */</span></div><div class="line"></div><div class="line">      <span class="comment">/* 激活该组件 */</span></div><div class="line">      activeSelect(select, selectList);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/* 组件失去焦点时 */</span></div><div class="line">    select.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">       <span class="comment">/* 注意：在我们的函数调用内，`select`变量是局部的 */</span></div><div class="line"></div><div class="line">      <span class="comment">/* 取消激活该组件 */</span></div><div class="line">      deactivateSelect(select);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此，组件已经能根据我们的设计来改变其状态了，但它的值目前还不会更新，接下来我们就会处理这点。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_3" target="_blank" rel="external">效果</a></p>
<h3 id="处理组件的值"><a href="#处理组件的值" class="headerlink" title="处理组件的值"></a>处理组件的值</h3><p>现在组件已经能用了，但我们还得加点代码，根据用户的输入更新它的值、并让其能随着表单数据一起发送它的值。</p>
<p>要做到这点，最简单的方式就是在私底下用一个原生组件。这样一来，自定义组件就会跟踪浏览器提供的内置控件的值，并和平时一样在表单提交时发送它的值。在浏览器已经为我们做好这一切时，没有必要来重新发明轮子了。</p>
<p>如前所示，出于可访问性的原因，我们已经用了一个原生的select组件来作为回退；同步这个组件的值和自定义组件的值是很容易的：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 该函数用于更新展示的值，并和原生组件作同步</span></div><div class="line"><span class="comment">// 需要两个参数：</span></div><div class="line"><span class="comment">// select：类名为`select`且值要更新的DOM节点</span></div><div class="line"><span class="comment">// index：选定的值的索引</span></div><div class="line"><span class="function">function <span class="title">updateValue</span>(<span class="params"><span class="keyword">select</span>, index</span>) </span>&#123;</div><div class="line">  <span class="comment">// 我们得为给定的自定义组件获取原生组件</span></div><div class="line">  <span class="comment">// 本例中，原生组件是自定义组件的兄弟节点</span></div><div class="line">  <span class="keyword">var</span> nativeWidget = <span class="keyword">select</span>.previousElementSibling;</div><div class="line"></div><div class="line">  <span class="comment">// 获得自定义组件的值容器</span></div><div class="line">  <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">select</span>.querySelector(<span class="string">'.value'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获得完整的选项列表</span></div><div class="line">  <span class="keyword">var</span> optionList = <span class="keyword">select</span>.querySelectorAll(<span class="string">'.option'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 设置选中索引为我们选择的选项的索引</span></div><div class="line">  nativeWidget.selectedIndex = index;</div><div class="line"></div><div class="line">  <span class="comment">// 更新对应的值容器</span></div><div class="line">  <span class="keyword">value</span>.innerHTML = optionList[index].innerHTML;</div><div class="line"></div><div class="line">  <span class="comment">// 高亮自定义组件中关联的选项</span></div><div class="line">  highlightOption(<span class="keyword">select</span>, optionList[index]);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 该函数返回原生组件当前选中的索引</span></div><div class="line"><span class="comment">// 需要一个参数：</span></div><div class="line"><span class="comment">// select：类名为`select`且和原生组件关联的DOM节点</span></div><div class="line"><span class="function">function <span class="title">getIndex</span>(<span class="params"><span class="keyword">select</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// 我们得为给定的自定义组件获取原生组件</span></div><div class="line">  <span class="comment">// 本例中，原生组件是自定义组件的兄弟节点</span></div><div class="line">  <span class="keyword">var</span> nativeWidget = <span class="keyword">select</span>.previousElementSibling;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> nativeWidget.selectedIndex;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们可以用上面这两个函数来绑定原生组件和自定义组件：</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在文档加载出来后处理下事件绑定</span></div><div class="line">window.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></div><div class="line">  var selectList = document.querySelectorAll(<span class="string">'.select'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 每个自定义组件都要被初始化</span></div><div class="line">  selectList.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(select)</span> &#123;</span></div><div class="line">    var optionList = select.querySelectorAll(<span class="string">'.option'</span>),</div><div class="line">        selectedIndex = getIndex(<span class="keyword">select</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 让自定义组件能聚焦</span></div><div class="line">    select.tabIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 让原生组件不可聚焦</span></div><div class="line">    select.previousElementSibling.tabIndex = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 确保默认选择的值被正确展示</span></div><div class="line">    updateValue(<span class="keyword">select</span>, selectedIndex);</div><div class="line"></div><div class="line">    <span class="comment">// 用户点击选项时，更新对应的值</span></div><div class="line">    optionList.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(option, index)</span> &#123;</span></div><div class="line">      option.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> &#123;</span></div><div class="line">        updateValue(<span class="keyword">select</span>, index);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 用户在聚焦的组件上按键盘时，更新对应的值</span></div><div class="line">    select.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> &#123;</span></div><div class="line">      var <span class="built_in">length</span> = optionList.<span class="built_in">length</span>,</div><div class="line">          index  = getIndex(<span class="keyword">select</span>);</div><div class="line"></div><div class="line">      <span class="comment">// 当用户按下箭头时，跳到后一选项</span></div><div class="line">      <span class="keyword">if</span> (event.keyCode === <span class="number">40</span> &amp;&amp; index &lt; <span class="built_in">length</span> - <span class="number">1</span>) &#123; index++; &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 当用户按上箭头时，跳到前一选项</span></div><div class="line">      <span class="keyword">if</span> (event.keyCode === <span class="number">38</span> &amp;&amp; index &gt; <span class="number">0</span>) &#123; index--; &#125;</div><div class="line"></div><div class="line">      updateValue(<span class="keyword">select</span>, index);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码里，要注意<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex" target="_blank" rel="external">tabIndex</a>属性的使用。该属性用来确保原生组件不会获得焦点，并确保自定义组件能在用户用键盘或鼠标访问时获得焦点。</p>
<p>通过上面的工作，我们已经完成任务了！下面就是结果：</p>
<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_4" target="_blank" rel="external">效果</a></p>
<p>等等，我们真的完成了吗？</p>
<h2 id="让组件变得无障碍"><a href="#让组件变得无障碍" class="headerlink" title="让组件变得无障碍"></a>让组件变得无障碍</h2><p>我们已经构建了一个可以运行的组件，虽然距离得到一个具有完整特性的选择框还很远，但它运行得还不错。然而，我们之前所做的只是在处理DOM而已，这个组件并不是真正语义化的，而且虽然它看起来像个选择框，但在浏览器的角度它却并不是这样，因此无障碍技术也不会认为它是个选择框。简而言之，它就是个无障碍性很差的漂亮选择框！</p>
<p>幸运的是，我们有个解决方案叫<a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA" target="_blank" rel="external">ARIA</a>。ARIA表示“无障碍的富Internet应用”，它是个<a href="http://www.w3.org/TR/wai-aria/" target="_blank" rel="external">W3C规范</a>，用来让web应用和自定义组件变得无障碍。基本上这个规范就是一系列拓展了HTML的特性，用这些特性，我们可以更好地描述角色、状态和属性，让我们刚才设计的元素变得像其尽力模仿的原生元素一样。使用这些特性很简单，下面我们来试试。</p>
<h3 id="role特性"><a href="#role特性" class="headerlink" title="role特性"></a>role特性</h3><p>ARIA使用的关键特性是<a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques" target="_blank" rel="external">role</a>。该特性会接收一个定义了元素用途的值，每个值都代表了元素的特点和行为。在本例中，我们会使用一个<a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_listbox_role" target="_blank" rel="external">listbox</a>作为role值，这个值是个“复合的role”，指定的元素可以包含多个特定role的子元素（本例中，至少有一个元素role值为<code>option</code>）。</p>
<p>值得注意的是，ARIA定义的role默认会自动用于标准的HTML标签中。比如说，<code>&lt;table&gt;</code>元素对应<code>grid</code>，<code>&lt;ul&gt;</code>元素对应<code>list</code>。因为我们的组件使用了<code>&lt;ul&gt;</code>元素，所以得确保组件的<code>listbox</code> role能覆盖掉<code>&lt;ul&gt;</code>元素的<code>list</code>值。为此，可以使用<code>presentation</code>这个role值，该值用来指明一个没有特殊含义的元素，而且该元素只用来展示信息而已。这里我们会给<code>&lt;ul&gt;</code>应用<code>presentation</code>值。</p>
<p>要使用<code>listbox</code>这个role值，得像下面一样修改HTML：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 给最外层元素指定role="listbox" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"select"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 给ul元素指定role="presentation" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"optList"</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 给所有li元素指定role="presentation" --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"option"</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"option"</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"option"</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"option"</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"option"</span> <span class="attr">class</span>=<span class="string">"option"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>如果你想兼容那些不支持<a href="https://developer.mozilla.org/en-US/docs/CSS/Attribute_selectors" target="_blank" rel="external">CSS特性选择器</a>的老旧浏览器，同时使用<code>role</code>特性和<code>class</code>特性这种做法是必须的。</p>
</blockquote>
<h3 id="aria-selected特性"><a href="#aria-selected特性" class="headerlink" title="aria-selected特性"></a>aria-selected特性</h3><p>仅使用role特性是不够的，ARIA本身也提供了很多许多状态和属性特性。对这些特性用得越多和越恰当，网页就越能被无障碍技术所理解。在我们的例子中，只会用到一个特性：<code>aria-selected</code>。</p>
<p><code>aria-selected</code>特性用于标记当前选中的选项，这样无障碍技术就能提示用户当前选中项是什么。我们会在JavaScript中动态地使用它，在用户选中一个选项时能标记该选中项。为此，得修改下<code>updateValue()</code>函数：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">updateValue</span>(<span class="params"><span class="keyword">select</span>, index</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> nativeWidget = <span class="keyword">select</span>.previousElementSibling;</div><div class="line">  <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">select</span>.querySelector(<span class="string">'.value'</span>);</div><div class="line">  <span class="keyword">var</span> optionList = <span class="keyword">select</span>.querySelectorAll(<span class="string">'.option'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 确保所有的选项未被选中</span></div><div class="line">  optionList.forEach(function (other) &#123;</div><div class="line">    other.setAttribute(<span class="string">'aria-selected'</span>, <span class="string">'false'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 确保选择的那个选项被选中</span></div><div class="line">  optionList[index].setAttribute(<span class="string">'aria-selected'</span>, <span class="string">'true'</span>);</div><div class="line"></div><div class="line">  nativeWidget.selectedIndex = index;</div><div class="line">  <span class="keyword">value</span>.innerHTML = optionList[index].innerHTML;</div><div class="line">  highlightOption(<span class="keyword">select</span>, optionList[index]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上述修改的最终效果如下（访问该组件时使用无障碍技术，譬如<a href="http://www.nvda-project.org/" target="_blank" rel="external">NVDA</a>或<a href="http://www.apple.com/accessibility/voiceover/" target="_blank" rel="external">VoiceOver</a>，会有更好的体验）：</p>
<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_5" target="_blank" rel="external">效果</a></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>至此我们已经了解了创建定制表单组件的所有基本知识，但如你所见，这么做并不简单，如果使用第三方库的话会比自己从头写起更好、更简单（当然除非你是想构建这样一个库）。</p>
<p>下面是你在自己开发之前应该参考下的库：</p>
<ul>
<li><a href="http://jqueryui.com/" target="_blank" rel="external">jQuery UI</a></li>
<li><a href="https://github.com/marghoobsuleman/ms-Dropdown" target="_blank" rel="external">msDropDown</a></li>
<li><a href="http://www.emblematiq.com/lab/niceforms/" target="_blank" rel="external">Nice Forms</a></li>
<li><a href="https://www.google.fr/search?q=HTML+custom+form+controls&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:fr:official&amp;client=firefox-a" target="_blank" rel="external">更多的库</a></li>
</ul>
<p>若你想更进一步使用本例，为让其中的代码变得通用和可复用，还要对代码做一些改进。这个练习你可以自己尝试下，这里有两个提示：首先，所有函数的第一个参数都相同，这就意味着这些函数需要有同一个执行上下文，使用一个对象来共享执行上下文是很明智的。此外，代码还得保证兼容，即代码最好能在兼容不同Web标准的多种浏览器下运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>一起来学Promise</title>
    <link href="http://levonlin.info/2017/04/28/Promise-Summary/"/>
    <id>http://levonlin.info/2017/04/28/Promise-Summary/</id>
    <published>2017-04-28T07:50:54.000Z</published>
    <updated>2017-05-04T17:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>注意，本文主要针对ES6标准实现的Promise语法进行阐述，实例代码也都使用ES6语法，快速入门ES6请参见<a href="http://www.barretlee.com/blog/2016/07/09/a-kickstarter-guide-to-writing-es6/" target="_blank" rel="external">ECMAScript 6 扫盲</a>。</p>
</blockquote>
<h2 id="一分钟快速入门"><a href="#一分钟快速入门" class="headerlink" title="一分钟快速入门"></a>一分钟快速入门</h2><p>被回调地狱整怕了？快试Promise吧！。Promise的核心思想其实很简单，就是将异步操作结果处理交给Promise对象的方法注册，然后等到异步操作完了再去取用这些处理操作。至于取用哪个处理操作，就得看Promise对象状态了。Promise对象一共有三种状态：Pending（初始状态）、Fulfilled（异步操作成功）、Rejected（异步操作失败）。而三者间的转换只有两种情况：Pending—&gt;Fulfilled、Pending—&gt;Rejected；详见下图：</p>
<p><img src="http://ww1.sinaimg.cn/mw690/85ad0d9cgy1ff9jzqcxxxj208u04u74i.jpg" alt="prmoise-sates"></p>
<p>了解了状态及其转换后，我们就可以来使用Promise对象了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    <span class="comment">// 异步操作</span></div><div class="line">    <span class="comment">// 异步操作成功时调用</span></div><div class="line">    resolve(value)</div><div class="line">    <span class="comment">// 异步操作失败时调用</span></div><div class="line">    reject(error)</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>上述代码中传给Promise构造函数的两个函数resolve, reject，分别用于触发Promise对象的Fullfilled和Rejected状态。当处于Fullfilled状态时Promise会调用<code>then</code>方法，而处于Rejected状态时则会调用<code>catch</code>方法，这两个方法都会返回Promise对象，所以我们可以采用链式写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">promise.then(<span class="function">(<span class="params">value</span>)=&gt;</span> &#123;...&#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>)=&gt;</span> &#123;...&#125;);</div></pre></td></tr></table></figure>
<p>上面的方法链中，<code>then</code>方法里注册了Fullfilled状态的处理函数、<code>catch</code>方法则注册了Rejected状态的处理函数。这种简单明了的写法把异步操作的结果处理函数分离了出来，如果这些处理本身又是异步操作，那我们自然也就把层层异步回调也从回调地狱中剥离了，代码瞬间清爽有木有！</p>
<h2 id="深入Promise调用链"><a href="#深入Promise调用链" class="headerlink" title="深入Promise调用链"></a>深入Promise调用链</h2><p>前面我们只是将一层处理操作分离到<code>then</code>方法中（其中<code>catch</code>方法只是<code>then</code>方法的一个语法糖，后面会再作讲解）；但在实际应用中多个异步操作往往会以串行或并行的方式连续出现，比如下面这个预定房间的流程：</p>
<p><img src="http://ww1.sinaimg.cn/mw690/85ad0d9cgy1ff9k0gycctj207t0d60tc.jpg" alt="order-room"></p>
<p>其中数据校验、向API发送请求、往数据库插入数据都是异步操作，一种用回调的写法大概长这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">validate(data, (err)=&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> errorHandler(err);</div><div class="line">    request(apiUrl, (err, apiResponse)=&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> errorHandler(err);</div><div class="line">            <span class="keyword">if</span> (apiResponse.isSuccessful) insertToDB(data, (err)=&gt; &#123;</div><div class="line">                    <span class="keyword">if</span> (err) <span class="keyword">return</span> errorHandler(err);</div><div class="line">                    successHandler();</div><div class="line">                &#125;);</div><div class="line">            <span class="keyword">else</span> errorHandler(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'API error'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>根据前面我们了解的Promise用法，我们已经能将<code>validate</code>这个异步操作写成Promise形式了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promiseValidate = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    validate(data, (err)=&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</div><div class="line">        resolve();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">promiseValidate(data)</div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">        request(apiUrl, (err, apiResponse)=&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (err) <span class="keyword">return</span> errorHandler(err);</div><div class="line">                <span class="keyword">if</span> (apiResponse.isSuccessful) insertToDB(data, (err)=&gt; &#123;</div><div class="line">                        <span class="keyword">if</span> (err) <span class="keyword">return</span> errorHandler(err);</div><div class="line">                        successHandler();</div><div class="line">                    &#125;);</div><div class="line">                <span class="keyword">else</span> errorHandler(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'API error'</span>));</div><div class="line">            &#125;);</div><div class="line">        &#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">err</span>)=&gt;</span> errorHandler(err));</div></pre></td></tr></table></figure>
<p>但要改就改到底，上面这种Promise和回调写法混合得就不伦不类，除了仍存在回调嵌套的问题，多次出现的错误判断和处理也有点违反DRY。所以接下来我们会深入研究下Promise调用链的行为，重点探讨<code>then</code>方法里注册的回调对调用链上数据传递和Promise对象状态变化的影响，以及如何在调用链上对错误进行统一的处理。</p>
<h3 id="Promise-resolve和Promise-reject"><a href="#Promise-resolve和Promise-reject" class="headerlink" title="Promise.resolve和Promise.reject"></a>Promise.resolve和Promise.reject</h3><p>我们先来看下一种“快速”生成Promise对象的方法：直接调用<code>Promise.resolve(value)</code>或<code>Promise.reject(err)</code>。这种方法和<code>new</code>一个Promise对象的区别在于，Promise对象在生成的时候状态就已经确定，要么是Fullfilled（使用<code>Promise.resolve()</code>）、要么是Rejected（使用<code>Promise.reject()</code>），不会和<code>new</code>实例化一样等要异步操作完了再发生变化。</p>
<p>此外，如果传给<code>Promise.resolve</code>方法的是一个具有<code>then</code>方法的对象（即所谓的<code>Thenable</code>对象），比如jQuery的<code>$.ajax()</code>，那么返回的Promise对象，后续调用的<code>then</code>就是原对象<code>then</code>方法的同一形式（参见下面的代码）。简单来讲，就是<code>Promise.resolve</code>会将<code>Thenable</code>对象转为ES6的Promise对象，这一特性常被用来将Promise的不同实现转换为ES6实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.ajax(<span class="string">'https://httpbin.org/ip'</span>).then(<span class="function">(<span class="params">value</span>)=&gt;</span> &#123;</div><div class="line">    <span class="comment">/* 输出223.65.191.59 */</span></div><div class="line">    <span class="built_in">console</span>.log(value.origin)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve($.ajax(<span class="string">'https://httpbin.org/ip'</span>))</div><div class="line">    .then(<span class="function">(<span class="params">value</span>)=&gt;</span> &#123;</div><div class="line">        <span class="comment">/* 输出223.65.191.59 */</span></div><div class="line">        <span class="built_in">console</span>.log(value.origin)</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="详解Promise-prototype-then"><a href="#详解Promise-prototype-then" class="headerlink" title="详解Promise.prototype.then"></a>详解Promise.prototype.then</h3><p>有了前面知识的铺垫，我们终于可以来详细讲一下Promise对象的<code>then</code>方法了。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>如前面所提到的，<code>catch</code>方法只是<code>then</code>方法的一个语法糖，<br>原因就在于<code>then</code>方法的参数为实际上是“两个”回调函数，分别用于处理调用它的Promise对象的Fullfilled和Rejected状态，而<code>catch</code>方法就等价于<code>then(undefined, Rejected状态处理函数)</code>。</p>
<p>关于这两个回调函数，首先要注意它们是异步调用的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> v = <span class="number">1</span>;</div><div class="line"><span class="comment">/* 输出result: 2 */</span></div><div class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'result: '</span> + v)&#125;);</div><div class="line"><span class="comment">/* 输出result: 2 */</span></div><div class="line"><span class="built_in">Promise</span>.reject().then(<span class="literal">undefined</span>, ()=&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'result: '</span> + v)&#125;);</div><div class="line">v++;</div></pre></td></tr></table></figure></p>
<p>而两个回调函数的参数，则是通过调用<code>then</code>方法的Promise对象指定的：</p>
<ul>
<li><code>new Promise()</code>产生的Promise对象，会分别用内部<code>resolve()</code>、<code>reject()</code>函数的参数</li>
<li><code>Promise.resolve()</code>或<code>Promise.reject()</code>产生的Promise对象，则分别用<code>Promise.resolve()</code>、<code>Promise.reject()</code>的参数</li>
</ul>
<p>而两个回调函数的返回值，会用<code>Promise.resolve(第一个回调返回值)</code>或<code>Promise.reject(第二个回调返回值)</code>的形式作包装，用来“替换”then方法返回的Promise对象。结合上面提到的<code>then</code>回调函数参数指定方式，回调返回值会这样影响下一个<code>then</code>的回调函数：</p>
<ul>
<li>返回的是普通数据，会传给下一级调用的<code>then</code>方法作为回调函数的参数</li>
<li>返回的是Promise对象或Thenable对象，会被拿来“替换”then方法返回的Promise对象，具体<code>then</code>的回调函数怎么调用和传参就得看其内部实现了</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>一个新的Promise对象，状态看执行哪个回调函数决定。注意这是一个新对象，不是简单把调用<code>then</code>的Promise对象拿来改装后返回：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span> resolve(<span class="number">100</span>));</div><div class="line"><span class="keyword">var</span> thenPromise = aPromise.then(<span class="function">(<span class="params">value</span>)=&gt;</span> <span class="built_in">console</span>.log(value));</div><div class="line"><span class="keyword">var</span> catchPromise = thenPromise.catch(<span class="function">(<span class="params">error</span>)=&gt;</span> <span class="built_in">console</span>.error(error));</div><div class="line"><span class="comment">/* true */</span></div><div class="line"><span class="built_in">console</span>.log(aPromise !== thenPromise);</div><div class="line"><span class="comment">/* true */</span></div><div class="line"><span class="built_in">console</span>.log(thenPromise !== catchPromise);</div></pre></td></tr></table></figure></p>
<h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><p>知道了<code>then</code>方法的具体细节后，我们就能明白Promise调用链上：</p>
<ul>
<li>传递数据的方法：利用上面提到的<code>then</code>回调的参数传递形式——不论是在Promise对象产生过程中直接传递、还是在<code>then</code>回调返回值中间接传递——就能实现将每一级异步操作的结果传递给后续<code>then</code>中注册的处理函数处理。</li>
<li>Promise对象状态传递和改变的方法：利用<code>then</code>回调的返回值，可以控制某个操作后<code>then</code>方法返回的Promise对象及其状态。</li>
</ul>
<p>现在我们把所有异步操作改为Promise语法，再利用在Promise调用链传递数据和控制状态的方法，就能把本节开始提到的预定房间操作中的回调嵌套都展开来了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promiseValidate = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    validate(data, (err)=&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</div><div class="line">        resolve();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="keyword">let</span> promiseRequest = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    request(data, (err, apiResponse)=&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</div><div class="line">        <span class="comment">// 在Promise对象产生过程中直接传递异步操作的结果</span></div><div class="line">        resolve(apiResponse);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">let</span> promiseInsertToDB = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    insertToDB(data, (err)=&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</div><div class="line">        resolve();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line">promiseValidate(data)</div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> promiseRequest(apiUrl))</div><div class="line">    .then(<span class="function">(<span class="params">apiResponse</span>)=&gt;</span> &#123;</div><div class="line">        <span class="comment">// 控制then回调的返回值，来改变then方法返回的新Promise对象的状态</span></div><div class="line">        <span class="keyword">if</span> (apiResponse.isSuccessful) <span class="keyword">return</span> insertToDB(data);</div><div class="line">        <span class="keyword">else</span> errorHandler(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'API error'</span>));</div><div class="line">        &#125;)</div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> successHandler())</div><div class="line">    .catch(<span class="function">(<span class="params">err</span>)=&gt;</span> <span class="keyword">return</span> errorHandler(err));</div></pre></td></tr></table></figure>
<p>上面的代码不仅将嵌套的代码展开，让我们挣脱了“回调地狱”；而且可以对异步操作的错误直接利用统一的Promise错误处理方法，避免写一堆重复的代码。如果要进一步DRY，可以抽象出一个将典型的Node.js回调接口封装为Promise接口的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 处理形如 receiver.fn(...args, (err, res)=&gt; &#123;&#125;) 的接口 */</span></div><div class="line"><span class="keyword">let</span> promisify = <span class="function">(<span class="params">fn, receiver</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; <span class="comment">// 返回重新封装的Promise接口</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      fn.apply(receiver, [...args, (err, res) =&gt; &#123; <span class="comment">// 重新绑定this</span></div><div class="line">        <span class="keyword">return</span> err ? reject(err) : resolve(res);</div><div class="line">      &#125;]);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 用例 */</span></div><div class="line"><span class="keyword">let</span> promiseValidate = promisify(validate, global);</div><div class="line"><span class="keyword">let</span> promiseRequest = promisify(request, global);</div><div class="line"><span class="keyword">let</span> promiseInsertToDB = promisify(insertToDB, global);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意，由于resolve和reject方法只能接收一个参数，所上面这个函数处理的回调里只能有err和一个数据参数。</p>
</blockquote>
<h3 id="Promise调用链上的错误处理"><a href="#Promise调用链上的错误处理" class="headerlink" title="Promise调用链上的错误处理"></a>Promise调用链上的错误处理</h3><p>在Promise调用链上的处理错误的思路，就是去触发Promise对象的Rejected状态，利用状态的传递特性实现对错误的捕获，再在<code>catch</code>或<code>then</code>回调里处理这些错误。下面我们就来进行相关的探讨：</p>
<h4 id="错误的捕获"><a href="#错误的捕获" class="headerlink" title="错误的捕获"></a>错误的捕获</h4><p>首先我们有必要详细了解下Promise对象的Rejected状态的产生和传递过程。</p>
<p>Rejected状态的产生有两种情况：</p>
<ul>
<li>调用了reject函数：Promise对象实例化的回调调用了<code>reject()</code>，或者直接调用了<code>Promise.reject()</code></li>
<li>通过<code>throw</code>抛出错误</li>
</ul>
<p>而只要产生了Rejected状态，就会在调用链上持续传递，直到遇见Rejected状态的处理回调（<code>catch</code>的回调或<code>then</code>的第二个回调）。再结合之前提到的Promise调用链上的数据传递方法，错误就能在调用链上作为参数被相应的回调“捕获”了。这个过程可以参见下图：</p>
<p><img src="http://ww1.sinaimg.cn/mw690/85ad0d9cgy1ff9k158856j20az0eygmb.jpg" alt="promise-reject-flow"></p>
<p>这里要注意，通过<code>throw</code>抛出错时，如果错误是在<code>setTimeout</code>等的回调中抛出，是不会让Promise对象产生Rejected状态的，这也以为着Promise调用链上捕获不了这个错误。举个例子，下面这段代码就不会有任何输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve()</div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> setTimeout(<span class="number">100</span>, ()=&gt; &#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'hi'</span>)&#125;))</div><div class="line">    .catch(<span class="function">(<span class="params">err</span>)=&gt;</span> <span class="built_in">console</span>.log(err));</div></pre></td></tr></table></figure>
<p>究其原因，是因为<code>setTimeout</code>的异步操作和Promise的异步操作不属于同一种任务队列，<code>setTimeout</code>回调里的错误会直接抛到全局变成<code>Uncaught Error</code>，而不会作用到Promise对象及其调用链上。这就也意味着，想要保证在调用链上产生的错误能被捕获，就必须始终使用调用reject函数的方式来产生和传递错误。</p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>错误处理可以在<code>catch</code>的回调或<code>then</code>的第二个回调里进行。虽然前面提到<code>catch</code>方法等价于<code>then(undefined, Rejected状态处理函数)</code>，但推荐始终使用<code>catch</code>来处理错误，原因有两个：</p>
<ul>
<li>代码的可读性</li>
<li>对于<code>then(Fullfilled状处理函数, Rejected状态的处理函数)</code>这种写法，如果Fullfilled状态的处理函数里出错了，那错误只会继续向下传递，同级的Rejected状态处理函数没办法捕获该错误</li>
</ul>
<h4 id="优化房间预订例子的错误处理"><a href="#优化房间预订例子的错误处理" class="headerlink" title="优化房间预订例子的错误处理"></a>优化房间预订例子的错误处理</h4><p>了解完了Promise调用链上的错误处理，我们再来回顾一开始提到的房间预订例子。之前我们的代码里只是对异步操作中的可能出现错误进行了统一的处理，但是其中的<code>API error</code>等别的执行错误并未使用在Promise调用链上捕获和处理错误的方式。为了进一步DRY，我们可以通过调用<code>Promise.reject</code>，强制将返回的Promise对象变为Rejected状态，共用统一的Promise错误处理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(apiResponse)=&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (apiResponse.isSuccessful) <span class="keyword">return</span> insertToDB(data);</div><div class="line">        <span class="comment">// 返回的Promise对象为Rejected状态，共用统一的Promise错误处理</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'API error'</span>));</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="Promise-all和Promise-race"><a href="#Promise-all和Promise-race" class="headerlink" title="Promise.all和Promise.race"></a>Promise.all和Promise.race</h3><p>前面研究的多个异步操作间往往具有前后依赖关系，或者说它们是“串行”进行的，只有前一个完成了才能进行后一个。但有时我们处理的异步操作间可能并不具有依赖关系，比如处理多张图片，这时再使用上面的调用链写法，就只能等处理完一张图片、对应的Promise对象状态变化了，才能再去处理下一张，就显得很低效了。所以，我们需要一种能在调用链中同时处理多个Promise对象的方法，<code>Promise.all</code>和<code>Promise.race</code>就是这样应运而生的。</p>
<p>这两个方法的相同点是会接受一个Promise对象组成的数组作为参数，包装返回成一个新的Promise实例。而它们的区别就在于返回的这个Promise实例状态如何变化：</p>
<ul>
<li><code>Promise.all</code>：<ul>
<li>所有传入的Promise对象状态都变成Fullfilled，最终状态才会变成Fullfilled；此时便会调用<code>Promise.resolve(各Promise对象resolve参数组成的数组)</code>，生成新状态的Promise对象返回</li>
<li>各个Promise对象若有一个被reject，最终状态就变成Rejected；此时便会调用Promise.reject(第一个被reject的实例的reject参数)，生成新状态的Promise对象返回</li>
</ul>
</li>
<li><code>Promise.race</code>：只要传入的各个Promise对象中有一个率先改变状态（Fullfilled或Rejected），返回的Promise对象状态就会改变为相应状态</li>
</ul>
<p>有了这两个方法，我们就能在Promise调用链上“并行”等待某些异步操作了，还是用前面提到的客房例子来举例，如果我们在预定房间时需要请求的API不止一个，调用链可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">promiseValidate(data)</div><div class="line">    <span class="comment">/* 请求多个API */</span></div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">Promise</span>.all([promiseRequest(apiUrl1), promiseRequest(apiUrl2)]))</div><div class="line">    .then(<span class="function">(<span class="params">apiResponse</span>)=&gt;</span> &#123;</div><div class="line">        <span class="comment">/* 传给下个then回调的是一个resolve参数组成的数组 */</span></div><div class="line">        <span class="keyword">if</span> (apiResponse[<span class="number">0</span>].isSuccessful &amp;&amp; apiResponse[<span class="number">1</span>].isSuccessful) <span class="keyword">return</span> insertToDB(data);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'API error'</span>));</div><div class="line">        &#125;)</div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> successHandler())</div><div class="line">    .catch(<span class="function">(<span class="params">err</span>)=&gt;</span> <span class="keyword">return</span> errorHandler(err));</div></pre></td></tr></table></figure>
<h2 id="Promise的应用"><a href="#Promise的应用" class="headerlink" title="Promise的应用"></a>Promise的应用</h2><p>Promise是一种异步调用的写法，自然是用来写出清晰的异步代码、让我们摆脱回调写法带来的种种弊端，本文一直使用的预定房间例子就是一个佐证。不过考虑实际的应用场景，还是有一些需要注意的地方：</p>
<h3 id="前端异步处理"><a href="#前端异步处理" class="headerlink" title="前端异步处理"></a>前端异步处理</h3><p>前端的浏览器兼容性是阻碍新技术运用的一大难题，虽然使目前浏览器对于ES6的支持越来越完善了，但除非你不考虑IE（<a href="http://caniuse.com/#feat=promises" target="_blank" rel="external">兼容性表</a>），否则在前端代码里直接使用的原生的Promise实现并不太现实。对于这种情况，我们可以用一些<a href="http://liubin.org/promises-book/#promise-library" target="_blank" rel="external">Polyfill或拓展类库</a>来让我们能写Promise代码。</p>
<h3 id="Node的异步处理："><a href="#Node的异步处理：" class="headerlink" title="Node的异步处理："></a>Node的异步处理：</h3><p>Node.js环境下对ES6的Promise支持，在零点几版开始就有了，所以我们在编写服务器代码、或者写一些跑在Node上的模块时可以直接上Promise语法。不过要注意的是，Node上的大部分模块开放的API，还是默认使用回调风格，这是为了方便用户在不了解Promise语法时快速上手；所以一般自己写的模块API也会遵循这个惯例，至于模块内部实现那就随你的意愿使用了。</p>
<p>还有一个要值得注意的是，最近Node实现了更优雅的异步写法–<a href="https://medium.com/@tsmith18256/async-await-in-node-js-v7-a9386b44e115" target="_blank" rel="external">async函数</a>，不过新的写法是基于Promise实现的，所以虽然async函数的出现让Promise有种高不成低不就的感觉，但了解Promise的用法还是很有必要的，希望本文能帮你做到这点:D。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://liubin.org/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a><br><a href="https://segmentfault.com/a/1190000007598894" target="_blank" rel="external">Promise 的链式调用与中止</a><br><a href="https://75team.com/post/how-to-convert-callback-to-promise.html" target="_blank" rel="external">如何把 Callback 接口包装成 Promise 接口</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意，本文主要针对ES6标准实现的Promise语法进行阐述，实例代码也都使用ES6语法，快速入门ES6请参见&lt;a href=&quot;http://www.barretlee.com/blog/2016/07/09/a-kickstarter-guide
    
    </summary>
    
      <category term="JavaScript" scheme="http://levonlin.info/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="Node.js" scheme="http://levonlin.info/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>聊聊校招简历这件事</title>
    <link href="http://levonlin.info/2017/01/19/%E8%81%8A%E8%81%8A%E6%A0%A1%E6%8B%9B%E7%AE%80%E5%8E%86%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>http://levonlin.info/2017/01/19/聊聊校招简历这件事/</id>
    <published>2017-01-19T03:44:39.000Z</published>
    <updated>2017-01-20T16:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>简历是求职的一个敲门砖，作为一个刚参加过秋招的应届生，这里想就应届生如何制作校招简历，分享下我的一些想法，既是给自己一个总结，也希望能和大家交流交流、帮到有需要的人。</p>
<h2 id="首要原则"><a href="#首要原则" class="headerlink" title="首要原则"></a>首要原则</h2><p>简历、简历，首要的就是“简”，要简练、或者说上面的每个文字都要有最大效用。原因有二：</p>
<ul>
<li>要过筛简历这一关。现在简历大多都是网上投递，尤其在校招季节，每个公司收到简历的量是巨大的；hr看一份简历的时间其实很有限，只有在最短的时间内让他们确认你可以胜任这份工作才是王道。</li>
<li>别给自己面试时留坑。你在简历上写的每句话，都可能作为面试官面试时的一个切入点或是主题；没有把握的东西不要写得绝对、甚至就不要写上去。一个简历内容不太可靠、可信的人，如何证明你在工作上可靠呢？</li>
</ul>
<p>至于简历如何写得简练，得关注两个点：目标公司和目标职位。简历的简练是相对而言的，适用于一类公司、一类职位的简历，未必就能用于别的公司和职位。像是外企可能要你准备份英文简历、国企可能想了解下你的政治面貌；投程序员时你可以提下你在github上贡献的代码，而需要看脸的岗位就需要在简历上贴上你的玉照了~</p>
<p>下面我会结合我的经历和看法，从内容、样式、文件格式来分析下如何打造一份简练的应届生简历；最后还要发挥程序员的专长，讲讲我是如何搭建一个可以持续迭代的简历工程的。这里我的目标公司是互联网公司、目标职位是前端工程师，而既然有了前提，就肯定不是什么通用模板了，主要就讲个思路来和大家探讨探讨：</p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>简历的内容，我是先做加法再做减法，先把能用到的信息汇集起来，再按实际情况逐个删减。保留下来的东西有两种，要么就是联系方式等必要信息，要么就是证明你适合这个职位的信息；而一些没有含金量、或不相关的奖项或证书就别放进去充数了，比如并不能说明程序员计算机水平的“计算机等级证书”。</p>
<p>所以最后我留下的，就只有四部分信息：联系方式、教育背景、专业能力、项目经历和作品；接下来就是怎么组织这些内容了。</p>
<h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><p>留给hr发招聘相关信息用的，常用的手机和邮箱地址是必不可少的了。然后是加分项，放上你活跃的专业平台账号，对程序员来讲主要就是github或博客地址啦，一是给hr确认你的专业相关性，也会让技术面试官先行了解下你。</p>
<h3 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h3><p>基本上给出时间、学校、专业就差不多了，主要是为了说明下自己的出身是否科班；至于GPA或者一些奖项，如果含金量很高，那就写上吧。</p>
<h3 id="专业能力"><a href="#专业能力" class="headerlink" title="专业能力"></a>专业能力</h3><p>这个就得因工作而异了，要有什么样的能力其实招聘要求上已经列举了一些，你要做的只是按自己的实际情况做删减或补充而已。但要注意标准—“简练”，不相关的不要列，没有掌握的不要写掌握，尤其慎用“精通”，同时注意把强相关和关键的能力前置。</p>
<p>比如对于前端工程师，可以这么列举：</p>
<ul>
<li>首先基本的要求是会用html, css, js来开发，然后你可以针对招聘要求，拓展开讲讲你对一些新知识诸如es6的掌握、使用什么框架或工程化方案等等。</li>
<li>之后是加分项，站在整个web开发上说明下你的技术水平，是否了解一些后端开发或前后端协作的东西。</li>
<li>再接下来是通用的计算机能力，比如git、数据结构和算法、linux等等。</li>
<li>最后别忘了你的英文水平，对于一个新技术基本来源于英文世界的岗位，这可是个硬实力，可以贴上你的CET成绩，若你有翻译作品则更佳。</li>
</ul>
<p>如果到这里，你发现自己现在能列出的相关技能实在少到不能看，那还是老老实实对着招聘要求列个学习目标，再好好准备下吧。</p>
<h3 id="经历与作品"><a href="#经历与作品" class="headerlink" title="经历与作品"></a>经历与作品</h3><p>这里是可以给你自由发挥的地方，当然注意还是“相关”经历。关键在于概括自己做了什么工作、取得什么成果，这样才能反映你的能力和与这个职位的相关性。如果自己参加过的项目上线了，那就果断贴出来演示地址；如果没有那就把自己负责的那工作和成就讲清楚。</p>
<p>至于列举的顺序，我认为从现在列到过去好些，一来能最先展现的是自己当前水平、这是面试官最想看到的；而且一般你的能力越靠后是越高的，这也是你想先让面试官看到的。</p>
<p>同样，如果没有拿得出手的作品，一个是再好好准备下；另外也得想想，为何要投这个岗位还没有相关经历，是不是自己真的了解了这个工作呢？</p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>关于简历样式，我的追求是简洁。简历最重要的还是里面的信息，花里胡哨的外表只会分散注意力；另外也是自己设计能力渣渣，所以自然就要求简单咯:(</p>
<p>但简洁不代表不需要样式，要明确的是，样式是为了突出内容重点、起到引导你简历读者的目的。那要采用什么样式呢？首先我放弃了表格，一来有些简历表格是横向列举信息的，感觉这样的信息呈现不是很清晰连贯、会降低读者对重点的抓取；此外我也觉得，那些线框其实是完全没必要的，靠简单的分段或列表就能把信息区分清楚了。所以设计可以相当简单：把自己的大名作为标题放到最前面，然后上面各个内容各取一个标题，再去填各个内容段落即可。</p>
<p>至于样式的组织，和你在哪写简历是有关的，由于职业癖好和追求，我不想在word里写简历，我希望我的简历是基于页面的形式，即靠css来定义样式（在下面还会具体讲这一点）。</p>
<h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><p>在投简历时，可以是word格式、也可以是pdf格式，这个就得看企业要求了。上面提到，我的简历首先是页面形式，这样既可以直接放在网上浏览，也能<code>ctrl+p</code>打印或转pdf，而转为其他格式也还是挺方便的。</p>
<h2 id="终极篇：搭建属于自己的简历工程"><a href="#终极篇：搭建属于自己的简历工程" class="headerlink" title="终极篇：搭建属于自己的简历工程"></a>终极篇：搭建属于自己的简历工程</h2><p>既然我要用基于页面形式的简历，而不是在word上码字，这首先涉及到如何开发的问题；同时简历是会随着职业生涯的前进而不断更新迭代的，面对不同求职目标也不只会有一份简历，这就又涉及到如何管理多个简历的问题。这样看来，写简历的编写与管理也算得上一个软件工程了，所以我便有了搭建属于自己的简历工程的想法，下面就讲讲我是怎么做的吧：</p>
<h3 id="技术选型与开发环境"><a href="#技术选型与开发环境" class="headerlink" title="技术选型与开发环境"></a>技术选型与开发环境</h3><ul>
<li>编程语言：要生成网页可以直接写HTML，不过为了方便，也因为样式本来就简单，故而我用了<a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="external">markdown</a>来编写。</li>
<li>开发环境：选一个你喜欢的文本编辑器和浏览器即可；我习惯使用Sublime Text来写markdown，再装上下面两个插件就能给你带来一个愉悦的markdown编写环境了：<ul>
<li>用插件<a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="external">MarkdownEditing</a>替换自带的语法高亮，原来那个高亮实在太单薄了；</li>
<li>使用<a href="https://packagecontrol.io/packages/Markdown%20Preview" target="_blank" rel="external">MarkdownPreview</a>插件可以直接将markdown文件build为HTML页面、还可以启动浏览器预览效果。该插件默认使用github的markdown样式输出，当然你也可以自己配置要用到的css。</li>
</ul>
</li>
</ul>
<h3 id="版本控制和在线浏览"><a href="#版本控制和在线浏览" class="headerlink" title="版本控制和在线浏览"></a>版本控制和在线浏览</h3><p>前面只解决了如何编写的问题，而简历的不同历史、不同版本要管理好的话，就得上版本控制系统了。这里使用<a href="https://git-scm.com/" target="_blank" rel="external">git</a>来做简历源码的版本控制，这样既能很方便地追溯历史，也能在同时拥有多套简历时用不同的分支来管理简历。</p>
<p>之后再将简历工程push到<a href="http://github.com/" target="_blank" rel="external">github</a>上，就可以随时随地把整个工程下到一台任何一台连了网的电脑上。更爽的是，你还可以使用gihub的<a href="https://pages.github.com/" target="_blank" rel="external">pages</a>服务，把简历生成的HTML放到工程中，这样简历就能直接在线浏览，不用再去自己买服务器了。</p>
<h3 id="保护隐私"><a href="#保护隐私" class="headerlink" title="保护隐私"></a>保护隐私</h3><p>做成可以在线预览的简历，自然就是期望能被人很方便地看到，方便用人单位联系你。但是，web上除了有人在浏览之外，还有一个东西也会浏览上面的内容，这就是所谓的<a href="https://en.wikipedia.org/wiki/Web_crawler" target="_blank" rel="external">web爬虫</a>。由于简历上会留下我们的联系方式等隐私信息，让用人单位看到这些信息自然没太大问题，同时被人手动骚扰我们毕竟还是小概率事件；但换了爬虫就不一样了，爬到你的联系方式之后，程序就可以自动向你推送消息，这个过程可是相当高效。</p>
<p>所以为了防止你的邮箱给垃圾信息塞爆，这里的目标是：不要让爬虫能直接爬到你的联系方式、但同时又要保证这些信息可以在网页上被人眼浏览到。要做到这点，我们得稍微了解下爬虫原理：目前大多数爬虫都只能简单爬到HTML页面、再用这个页面上的信息来做其他操作。所以只要原始的HTML里没有直接出现联系方式，而让这些字符靠程序生成的，那就能实现我们上面的目标啦。</p>
<p>至于生成字符的程序，自然是js脚本了，由于在markdown中可以直接插入HTML标签，所以我们把联系方式替换为如下标签即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(解密加密的联系方式); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里解释下“解密加密的联系方式”，就是填在上面代码中的是一个加密的联系方式，之后再用脚本执行解密，这样爬虫就不会爬到你的联系方式而是爬到一段js脚本了。这里加解密的方法有很多种，举个例子，你的电话是8888，可以用<a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="external">base64加密</a>，获得加密字符串’ODg4OA==’，然后再用一个浏览器自带的<code>atob</code>函数解密这个字符；所以替换8888的就是<code>&lt;script&gt;document.write(atob(&#39;ODg4OA==&#39;)); &lt;/script&gt;</code>。</p>
<p>到此为止，我的简历就实现了工程化编写和管理了。这么做虽然挺geek的、但对我来讲还算是个方便又高效的写简历方式：更新简历只需改几行markdown，再敲几个git命令就能实现更新版本、远端备份、发布在线预览。同时每个环节都可以围绕自己制作简历的思路来配置，这比简单去套别人的模板好多了，毕竟一份好的简历，肯定不是套模板来的，或者说少了对自己、对工作的思考就做不出合适的简历、甚至也难以找到适合自己的工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简历是求职的一个敲门砖，作为一个刚参加过秋招的应届生，这里想就应届生如何制作校招简历，分享下我的一些想法，既是给自己一个总结，也希望能和大家交流交流、帮到有需要的人。&lt;/p&gt;
&lt;h2 id=&quot;首要原则&quot;&gt;&lt;a href=&quot;#首要原则&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="求职" scheme="http://levonlin.info/categories/%E6%B1%82%E8%81%8C/"/>
    
    
      <category term="求职" scheme="http://levonlin.info/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="简历" scheme="http://levonlin.info/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>【译】表单数据校验</title>
    <link href="http://levonlin.info/2016/12/31/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/"/>
    <id>http://levonlin.info/2016/12/31/【译】表单数据校验/</id>
    <published>2016-12-31T06:23:42.000Z</published>
    <updated>2017-07-19T16:44:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>当你需要经常在服务器上校验数据时，在Web页面上的另加校验就有诸多好处。多数情况下，<a href="http://www.slideshare.net/jwegesin/forms-suck" target="_blank" rel="external">用户会被表单惹恼</a>。而当用户填完表单时就校验数据，既有助于用户立即发现他们犯的错误，也能减少等待HTTP响应的时间、并减少服务器对错误表单输入的处理。本文介绍的，就是如何在表单所在页面对表单数据进行校验。</p>
<h2 id="使用浏览器内置的表单校验"><a href="#使用浏览器内置的表单校验" class="headerlink" title="使用浏览器内置的表单校验"></a>使用浏览器内置的表单校验</h2><p><a href="https://developer.mozilla.org/en-US/docs/HTML/HTML5" target="_blank" rel="external">HTML5</a>的一大特性，就是在不依赖脚本的情况下校验大多数的用户数据。该特性是通过使用表单元素上的<a href="https://developer.mozilla.org/en-US/docs/HTML/HTML5/Constraint_validation" target="_blank" rel="external">校验特性</a>来实现的。</p>
<h3 id="元素校验不通过时"><a href="#元素校验不通过时" class="headerlink" title="元素校验不通过时"></a>元素校验不通过时</h3><p>当一个元素校验不通过时，会发生两件事：</p>
<ul>
<li>该元素会匹配到<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>这个CSS伪类，它能让你给校验不过的元素提供特定的样式。类似地，校验通过的元素则会匹配<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:valid" target="_blank" rel="external">:valid</a>伪类。</li>
<li>当用户要发送数据时，浏览器会阻止这个表单、并展示一段错误信息。</li>
</ul>
<h3 id="input元素的校验约束"><a href="#input元素的校验约束" class="headerlink" title="input元素的校验约束"></a><code>input</code>元素的校验约束</h3><p>所有的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" target="_blank" rel="external"><code>&lt;input&gt;</code></a>元素都能使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external">pattern</a>特性来作校验。该特性采用一个区分大小写的<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">正则表达式</a>作为它的值。若元素的值非空、或者不匹配该特性所指定的正则表达式，该元素就会被认为是校验不通过的。</p>
<h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choose"</span>&gt;</span>Would you prefer a banana or a cherry?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"choose"</span> <span class="attr">name</span>=<span class="string">"i_like"</span> <span class="attr">pattern</span>=<span class="string">"banana|cherry"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:valid</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><iframe width="100%" frameborder="0" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation$samples/A_simple_example?revision=1152350" height="50"></iframe></p>

<p>在本例中，<code>&lt;input&gt;</code>元素可以接受如下三种值：空字符串、字符串”banana”或”cherry”。</p>
<h4 id="required特性"><a href="#required特性" class="headerlink" title="required特性"></a>required特性</h4><p>若某个元素需要在提交表单之前填一个值，那我们可以通过<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>特性来标记该元素。当该特性为<code>true</code>时，所在的文本域不允许为空。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choose"</span>&gt;</span>Would you prefer a banana or cherry?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"choose"</span> <span class="attr">name</span>=<span class="string">"i_like"</span> <span class="attr">pattern</span>=<span class="string">"banana|cherry"</span> <span class="attr">required</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:valid</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意文本框相比上个例子有何不同：</p>
<p><iframe width="100%" frameborder="0" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation$samples/The_required_attribute?revision=1152350" height="50"></iframe></p>

<blockquote>
<p><strong>注意：</strong><code>&lt;input&gt;</code>元素的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type" target="_blank" rel="external">type</a>特性被设为<code>email</code>或<code>url</code>时，无需再使用<code>pattern</code>特性来坐校验。指定<code>email</code>类型时，文本框的值就得是个正确格式的email地址（同时指定<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple" target="_blank" rel="external">mutiple</a>特性时，还可以是一个逗号分隔的email地址列表）。指定<code>url</code>类型的文本框则会自动匹配一个URL。</p>
</blockquote>
<h3 id="其他校验约束"><a href="#其他校验约束" class="headerlink" title="其他校验约束"></a>其他校验约束</h3><p>所有接受用户输入的表单元素（<code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>等）都支持<code>required</code>特性，但要注意<code>&lt;textarea&gt;</code>元素并不支持<code>pattern</code>特性。</p>
<p>所有的文本输入框（<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>）都可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>特性来约束文本大小。输入框的值若大于<code>maxlength</code>指定的值，就会校验不通过。但是浏览器通常不会让用户输入超过文本框指定长度的文本。</p>
<p>对于数字输入框，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>特性也提供了校验约束。若输入框的值小于<code>min</code>的值或大于<code>max</code>的值，输入框就会校验不通过。</p>
<p>来个完整点的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Title<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"This field is mandatory"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"r1"</span> <span class="attr">value</span>=<span class="string">"Mr"</span> &gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"r2"</span> <span class="attr">value</span>=<span class="string">"Ms"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r2"</span>&gt;</span>Ms.<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"n1"</span>&gt;</span>How old are you?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- pattern特性可以给没实现number类型input元素但支持pattern特性的浏览器一个向后兼容。</span></div><div class="line">         请注意支持pattern特性的浏览器会使用数字输入框时让该特性失效。</div><div class="line">         该特性在这里的用法仅是做个向后兼容而已。 --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">"12"</span> <span class="attr">max</span>=<span class="string">"120"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"n1"</span> <span class="attr">name</span>=<span class="string">"age"</span></span></div><div class="line">           <span class="attr">pattern</span>=<span class="string">"\d+"</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"t1"</span>&gt;</span>What's your favorite fruit?<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"This field is mandatory"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"t1"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">list</span>=<span class="string">"l1"</span> <span class="attr">required</span></span></div><div class="line">           <span class="attr">pattern</span>=<span class="string">"[Bb]anana|[Cc]herry|[Aa]pple|[Ss]trawberry|[Ll]emon|[Oo]range"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"l1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"t2"</span>&gt;</span>What's your e-mail?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"t2"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"t3"</span>&gt;</span>Leave a short message<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"t3"</span> <span class="attr">name</span>=<span class="string">"msg"</span> <span class="attr">maxlength</span>=<span class="string">"140"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">1em</span> sans-serif;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=email]</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span>,</div><div class="line"><span class="selector-tag">textarea</span>,</div><div class="line"><span class="selector-tag">fieldset</span> &#123;</div><div class="line"><span class="comment">/* 需要给Webkit浏览器下的表单元素适当的样式 */</span></div><div class="line">  <span class="attribute">-webkit-appearance</span>: none;</div><div class="line">  </div><div class="line">  <span class="attribute">width </span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="attribute">font-family</span>: inherit;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">90%</span>;</div><div class="line">  </div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">1px</span> red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">  <span class="attribute">outline</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><iframe width="100%" frameborder="0" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation$samples/Other_validation_constraints?revision=1152350" height="420"></iframe></p>

<h3 id="定制错误信息"><a href="#定制错误信息" class="headerlink" title="定制错误信息"></a>定制错误信息</h3><p>如我们上面看到的几个例子所示，每次用户要发送未通过校验的表单时，浏览器都会展示一段错误信息。该信息的展示方式取决于浏览器本身。</p>
<p>这些自动生成的信息有两大缺点：</p>
<ul>
<li>没有标准的方法来用CSS改变其外观和体验。</li>
<li>它们还要依赖浏览器本地信息，这意味着你会在使用一种语言的页面中，遇到错误信息使用另一种语言展示的情况。</li>
</ul>
<p><strong>使用法语版本的浏览器浏览英文页面</strong></p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>渲染效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>Firefox 17 (Windows 7)</td>
<td><img src="https://developer.mozilla.org/files/4329/error-firefox-win7.png" alt=""></td>
</tr>
<tr>
<td>Chrome 22 (Windows 7)</td>
<td><img src="https://developer.mozilla.org/files/4327/error-chrome-win7.png" alt=""></td>
</tr>
<tr>
<td>Opera 12.10 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4331/error-opera-macos.png" alt=""></td>
</tr>
</tbody>
</table>
<p>要定制这些信息的外观和文本，你必须使用JavaScript，没有只使用HTML和CSS的方法。</p>
<p>HTML5提供了<a href="http://www.w3.org/TR/html5/forms.html#the-constraint-validation-api" target="_blank" rel="external">约束验证API</a>来检查和定制表单元素的状态。此外它也能改变错误信息的文本。来看个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span>I would like you to provide me an e-mail<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">name</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Javascript中，你可以调用<a href="https://developer.mozilla.org/en-US/docs/HTML/HTML5/Constraint_validation#Constraint_API&#39;s_element.setCustomValidity(" target="_blank" rel="external">setCustomValidity()</a>)方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var email = document.getElementById(&quot;mail&quot;);</div><div class="line"></div><div class="line">email.addEventListener(&quot;keyup&quot;, function (event) &#123;</div><div class="line">  if (email.validity.typeMismatch) &#123;</div><div class="line">    email.setCustomValidity(&quot;I expect an e-mail, darling!&quot;);</div><div class="line">  &#125; else &#123;</div><div class="line">    email.setCustomValidity(&quot;&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><iframe width="100%" frameborder="0" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation$samples/Customized_error_messages?revision=1152350" height="50"></iframe></p>

<h2 id="使用Javascript校验表单"><a href="#使用Javascript校验表单" class="headerlink" title="使用Javascript校验表单"></a>使用Javascript校验表单</h2><p>若你想要控制错误信息的样式和效果，或者想处理那些不支持HTML5表单验证的浏览器，那你就只能使用Javascript了。</p>
<h3 id="HTML5约束验证API"><a href="#HTML5约束验证API" class="headerlink" title="HTML5约束验证API"></a>HTML5约束验证API</h3><p>现在越来越多的浏览器开始支持约束验证API，而且也支持得越来越靠谱。该API囊括了各个表单元素上的一系列方法和属性。</p>
<h4 id="约束验证API的属性"><a href="#约束验证API的属性" class="headerlink" title="约束验证API的属性"></a>约束验证API的属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>validationMessage</td>
<td>可以是一段本地化的信息，用于描述表单控件所不满足的验证条件（如果有的话）；当控件不支持任何约束验证（<code>willValidae</code>的值为<code>false</code>）、或控件的值满足了约束条件时，也可以是一个空字符串</td>
</tr>
<tr>
<td>validity</td>
<td>一个用于描述元素校验阶段的<a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState" target="_blank" rel="external">validityState</a>对象</td>
</tr>
<tr>
<td>validity.customError</td>
<td>元素触发了定制的错误时返回<code>true</code>，否则返回<code>false</code></td>
</tr>
<tr>
<td>validity.patternMismatch</td>
<td>元素的值不匹配提供的模板时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>伪类</td>
</tr>
<tr>
<td>validity.rangeOverflow</td>
<td>元素的值大于提供的最大值时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range" target="_blank" rel="external">:out-fo-range</a>伪类</td>
</tr>
<tr>
<td>validity.rangeUnderflow</td>
<td>元素的值小于提供的最小值时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range" target="_blank" rel="external">:out-fo-range</a>伪类</td>
</tr>
<tr>
<td>validity.stepMismatch</td>
<td>元素的值不符合<code>step</code>特性提供的规则时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range" target="_blank" rel="external">:out-fo-range</a>伪类</td>
</tr>
<tr>
<td>validity.tooLong</td>
<td>元素的值的长度超过要求的最大长度时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range" target="_blank" rel="external">:out-fo-range</a>伪类</td>
</tr>
<tr>
<td>validity.typeMismatch</td>
<td>元素的值不是正确的语法时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>伪类</td>
</tr>
<tr>
<td>validity.valid</td>
<td>元素的值没有校验出的问题时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:valid" target="_blank" rel="external">:valid</a>，否则会匹配<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>伪类</td>
</tr>
<tr>
<td>validity.valueMissing</td>
<td>元素是必填项但没有值时返回<code>true</code>，否则返回<code>false</code>。当返回<code>true</code>时，该元素会匹配CSS的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>伪类</td>
</tr>
<tr>
<td>willValidate</td>
<td>元素在表单提交时会被校验则返回<code>true</code>，否则返回<code>false</code></td>
</tr>
</tbody>
</table>
<h4 id="约束验证API的方法"><a href="#约束验证API的方法" class="headerlink" title="约束验证API的方法"></a>约束验证API的方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>checkValidity()</td>
<td>元素的值没有校验出的问题时返回<code>true</code>，否则返回<code>false</code>。当校验不通过时，该方法还会在相应元素上触发<a href="https://developer.mozilla.org/en-US/docs/Web/Events/invalid" target="_blank" rel="external">invalid</a>事件。</td>
</tr>
<tr>
<td>setCustomValidity(message)</td>
<td>给元素添加一段定制的错误信息；若你手动设置了错误信息，则给元素会被当做校验未通过，并显示出特定的错误。这就能让你摆脱标准的约束验证API提供的错误信息，直接使用Javascript来建立自己的错误信息。该信息在报错时会展示给用户。</td>
</tr>
</tbody>
</table>
<p>对于老旧浏览器，我们可以使用<a href="https://github.com/ryanseddon/H5F" target="_blank" rel="external">H5F之类的polyfill</a>来弥补其对于约束验证API的不支持。由于这里你已经使用了Javascript，所以使用polyfill也并不会成为你设计或实现网站、Web应用时的额外负担。</p>
<h4 id="使用约束验证API的例子"><a href="#使用约束验证API的例子" class="headerlink" title="使用约束验证API的例子"></a>使用约束验证API的例子</h4><p>来看下如何使用该API来建立定制的错误信息，首先HTLM如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">novalidate</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Please enter an email address:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">name</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">aria-live</span>=<span class="string">"polite"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个简单的表格用了<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate" target="_blank" rel="external">novalidate</a>特性来关闭浏览器的自动校验；这样我们的脚本就能控制整个校验过程了。但是这样做却不会禁用掉约束验证API、以及 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:valid" target="_blank" rel="external">:valid</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range" target="_blank" rel="external">:in-range</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range" target="_blank" rel="external">:out-of-range</a> 等一系列CSS伪类。这就意味着，虽然浏览器不会自动在表单发送前校验它的数据，但你仍可自己来做校验、并且按需给予表单样式。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Live_Regions" target="_blank" rel="external">aria-live</a>特性用来确保我们定制的错误信息能展示给任何人，包括那些使用诸如屏幕阅读器等无障碍设备的人。</p>
<p><strong>CSS</strong><br>这段CSS用于装饰我们的表单、并让错误的输出看起来更吸引人些。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 这段只是用来美化表单 */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">1em</span> sans-serif;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> * &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=email]</span>&#123;</div><div class="line">  <span class="attribute">-webkit-appearance</span>: none;</div><div class="line"></div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">font-family</span>: inherit;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">90%</span>;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 这段是给校验未通过的输入框的样式 */</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:invalid</span>&#123;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#900</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#FDD</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">  <span class="attribute">outline</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 这段是给错误信息的样式 */</span></div><div class="line"><span class="selector-class">.error</span> &#123;</div><div class="line">  <span class="attribute">width  </span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#900</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line"> </div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.error</span><span class="selector-class">.active</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0.3em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>JavaScript</strong><br>下面的Javascript代码用来处理我们自定义的错误校验。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取DOM节点的方法有许多，这里我们获取了表单自身以及email输入框，还有一个让我们放置错误信息的span元素。</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> form  = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'form'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">'mail'</span>);</div><div class="line"><span class="keyword">var</span> error = <span class="built_in">document</span>.querySelector(<span class="string">'.error'</span>);</div><div class="line"></div><div class="line">email.addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// 每次用户输入时，我们都会检查email输入框是否合法</span></div><div class="line">  <span class="keyword">if</span> (email.validity.valid) &#123;</div><div class="line">    <span class="comment">// 当校验通过时，如果已经有一段错误信息在显示了，就移除掉错误信息</span></div><div class="line">    error.innerHTML = <span class="string">""</span>; <span class="comment">// 重置消息内容</span></div><div class="line">    error.className = <span class="string">"error"</span>; <span class="comment">// 重置消息的显示状态</span></div><div class="line">  &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line">form.addEventListener(<span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// 每次用户要提交表单时，我们都会检查email输入框是否合法</span></div><div class="line">  <span class="keyword">if</span> (!email.validity.valid) &#123;</div><div class="line">    <span class="comment">// 如果输入框不合法，我们就展示那段定制的错误信息</span></div><div class="line">    error.innerHTML = <span class="string">"I expect an e-mail, darling!"</span>;</div><div class="line">    error.className = <span class="string">"error active"</span>;</div><div class="line">    <span class="comment">// 通过取消事件来阻止表单提交</span></div><div class="line">    event.preventDefault();</div><div class="line">  &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>下面是运行结果：</p>
<p><iframe width="100%" frameborder="0" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation$samples/Example_using_the_constraint_validation_API?revision=1152350" height="130"></iframe></p>

<p>约束验证API给了我们处理表单校验的强大工具，并让我们能有力地控制其用户界面，这就远超过只用HTML和CSS所能做的事了。</p>
<h3 id="不使用内置API来校验表单"><a href="#不使用内置API来校验表单" class="headerlink" title="不使用内置API来校验表单"></a>不使用内置API来校验表单</h3><p>有时，面对老旧浏览器和<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">定制的组件</a>，你不能（或者不想）使用约束验证API。但在这种情况下，你仍然可以使用Javascript来校验你的表单。表单的校验更多是个用户界面的问题、而非真正的数据校验。</p>
<p>要校验一个表单，你得先问你自己几个问题：</p>
<p><strong>我需要进行什么类型的校验？</strong><br>你得先决定如何校验数据，这取决于你：可以用字符串操作、类型转换、正则表达式等等。只要记住表单数据通常是一段文本，而且传到你的脚本里时也是一些字符串就好。</p>
<p><strong>表单校验未通过时，我应该做什么？</strong><br>这就是个UI的问题了。得靠你决定表单的行为：是不论是否通过都发送数据呢？还是高亮那些出现错误的字段？还是展示一些错误信息？</p>
<p><strong>如何帮助用户用户纠正非法数据？</strong><br>要减少用户的不满，很重要的是提供尽可能多的帮助信息，以指导用户纠正他们的输入。还应该提供些前置的输入建议、和清晰的错误信息，让用户知道该输入什么。</p>
<p>若你还想深入了解表单校验的UI要求，可以读读下面这些有用的文章：</p>
<ul>
<li>SmashingMagazine: <a href="http://uxdesign.smashingmagazine.com/2012/06/27/form-field-validation-errors-only-approach/" target="_blank" rel="external">Form-Field Validation: The Errors-Only Approach</a></li>
<li>SmashingMagazine: <a href="http://www.smashingmagazine.com/2009/07/07/web-form-validation-best-practices-and-tutorials/" target="_blank" rel="external">Web Form Validation: Best Practices and Tutorials</a></li>
<li>Six Revision: <a href="http://sixrevisions.com/user-interface/best-practices-for-hints-and-validation-in-web-forms/" target="_blank" rel="external">Best Practices for Hints and Validation in Web Forms</a></li>
<li>A List Apart: <a href="http://www.alistapart.com/articles/inline-validation-in-web-forms/" target="_blank" rel="external">Inline Validation in Web Forms</a></li>
</ul>
<h4 id="未使用约束验证API的例子"><a href="#未使用约束验证API的例子" class="headerlink" title="未使用约束验证API的例子"></a>未使用约束验证API的例子</h4><p>为了更好地说明，我们接下来要重构上述的例子，让它能在老旧浏览器上运行：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Please enter an email address:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"mail"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">name</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">aria-live</span>=<span class="string">"polite"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 某些老旧浏览器上button元素的`type`特性不会被默认指定为`submit`--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如你所见，HTML的和之前几乎一模一样；这里只移除了HTML5的部分。要注意的是<a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA" target="_blank" rel="external">ARIA</a>是个并不依赖于HTML5的独立特性，所以我们仍会保留它。</p>
<p><strong>CSS</strong><br>类似地，CSS不需要做大规模修改；只要把<code>:invalid</code>伪类转为真的类，并且不去使用IE6不支持的特性选择器即可。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 这段只是用来美化表单 */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">1em</span> sans-serif;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> * &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.mail</span> &#123;</div><div class="line">  <span class="attribute">-webkit-appearance</span>: none;</div><div class="line"></div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">font-family</span>: inherit;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">90%</span>;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 这段是给校验未通过的输入框的样式 */</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.invalid</span>&#123;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#900</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#FDD</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus.invalid</span> &#123;</div><div class="line">  <span class="attribute">outline</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 这段是给错误信息的样式 */</span></div><div class="line"><span class="selector-class">.error</span> &#123;</div><div class="line">  <span class="attribute">width  </span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#900</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line"> </div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.error</span><span class="selector-class">.active</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0.3em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>JavaScript</strong><br>Javascript代码的改变最大，为了兼容我们需要做更多的事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 老旧浏览器上获取DOM节点的方法少了些</span></div><div class="line"><span class="keyword">var</span> form  = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'form'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">'mail'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 下面是个访问DOM里下个兄弟元素节点的的技巧</span></div><div class="line"><span class="comment">// 但这样做很危险，因为很容易就会建立一个死循环</span></div><div class="line"><span class="comment">// 在现代浏览器上，应该使用element.nextElementSibling</span></div><div class="line"><span class="keyword">var</span> error = email;</div><div class="line"><span class="keyword">while</span> ((error = error.nextSibling).nodeType != <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 按照HTML5的规范来</span></div><div class="line"><span class="keyword">var</span> emailRegExp = <span class="regexp">/^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/</span>;</div><div class="line"></div><div class="line"><span class="comment">// 许多老旧浏览器不支持addEventListener方法</span></div><div class="line"><span class="comment">// 下面是个解决该问题的简单方法，当然方法远不止这一种</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element, event, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> previousEventCallBack = element[<span class="string">"on"</span>+event];</div><div class="line">  element[<span class="string">"on"</span>+event] = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> output = callback(e);</div><div class="line">    </div><div class="line">    <span class="comment">// 回调返回`false`时会终止回调链并结束事件回调的执行</span></div><div class="line">    <span class="keyword">if</span> (output === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> previousEventCallBack === <span class="string">'function'</span>) &#123;</div><div class="line">      output = previousEventCallBack(e);</div><div class="line">      <span class="keyword">if</span>(output === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 现在可以来重构我们的校验了</span></div><div class="line"><span class="comment">// 由于我们不依赖CSS伪类，故而必须在email字段明确设置valid/invalid类</span></div><div class="line">addEvent(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里我们检验该字段是否为空(注意，该字段不是必填的)</span></div><div class="line">  <span class="comment">// 若不是，我们再检验它的内容是否为正确格式的email地址</span></div><div class="line">  <span class="keyword">var</span> test = email.value.length === <span class="number">0</span> || emailRegExp.test(email.value);</div><div class="line"> </div><div class="line">  email.className = test ? <span class="string">"valid"</span> : <span class="string">"invalid"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 定义用户在该字段输入时会发生什么</span></div><div class="line">addEvent(email, <span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> test = email.value.length === <span class="number">0</span> || emailRegExp.test(email.value);</div><div class="line">  <span class="keyword">if</span> (test) &#123;</div><div class="line">    email.className = <span class="string">"valid"</span>;</div><div class="line">    error.innerHTML = <span class="string">""</span>;</div><div class="line">    error.className = <span class="string">"error"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    email.className = <span class="string">"invalid"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 定义用户提交数据时会发生什么</span></div><div class="line">addEvent(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> test = email.value.length === <span class="number">0</span> || emailRegExp.test(email.value);</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (!test) &#123;</div><div class="line">    email.className = <span class="string">"invalid"</span>;</div><div class="line">    error.innerHTML = <span class="string">"I expect an e-mail, darling!"</span>;</div><div class="line">    error.className = <span class="string">"error active"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 某些老旧浏览器不支持event.preventDefault()方法</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    email.className = <span class="string">"valid"</span>;</div><div class="line">    error.innerHTML = <span class="string">""</span>;</div><div class="line">    error.className = <span class="string">"error"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果如下所示：</p>
<p><iframe width="100%" frameborder="0" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation$samples/Example_that_doesn't_use_the_constraint_validation_API?revision=1152350" height="130"></iframe></p>

<p>如你所见，自己建立一个校验系统并不是一件难事。难点就在于如何跨平台、并在你创建的任何表单上都能使用它。现在有许多库能执行表单校验，你应该毫不犹豫地使用他们。如下是几个例子：</p>
<ul>
<li>独立的库<ul>
<li><a href="http://validatious.org/" target="_blank" rel="external">Validatious</a></li>
<li><a href="http://rickharrison.github.com/validate.js/" target="_blank" rel="external">Validate.js</a></li>
</ul>
</li>
<li>jQuery插件<ul>
<li><a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/" target="_blank" rel="external">Validation</a></li>
<li><a href="http://unwrongest.com/projects/valid8/" target="_blank" rel="external">Valid8</a></li>
</ul>
</li>
</ul>
<h4 id="远端校验"><a href="#远端校验" class="headerlink" title="远端校验"></a>远端校验</h4><p>有些情况下使用远端校验还是挺有用的。在用户输入的数据得添加到应用服务器的数据存储时，这种校验是有必要的。一个相应的例子就是需要填用户名的注册表单。为避免用户名重复，更聪明的办法是发送一个AJAX请求来检查用户名的可用性，而不是让用户发送完数据、然后再返回一个带有错误的表单。</p>
<p>使用这种校验，需要注意以下几点：</p>
<ul>
<li>因为需要公开暴露API和一些数据，所以得保证数据不是敏感的。</li>
<li>由于网络存在延迟，故得进行异步校验。这就得靠一些UI设计来保证校验不能正确执行时，用户操作不至于被阻塞。</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>表单校验并不用靠复杂的Javascript，但它要求我们认真为用户着想，始终得帮用户纠正他们输入的数据。要做到这点，请确保：</p>
<ul>
<li>展示明确的错误信息</li>
<li>约定好输入格式</li>
<li>指出错误出现的确切位置（特别是在那些巨大的表单中）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】发送表单数据</title>
    <link href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/"/>
    <id>http://levonlin.info/2016/09/24/【译】发送表单数据/</id>
    <published>2016-09-24T11:37:28.000Z</published>
    <updated>2017-07-19T17:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Sending_and_retrieving_form_data" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>多数时候，<a href="https://developer.mozilla.org/en-US/docs/HTML/Forms" target="_blank" rel="external">HTML表单</a>的目的只是为了把数据发给服务器，之后服务器再处理这些数据并发送响应给用户。虽然看起来挺简单的，但我们还是得注意一些事情以确保传送的数据不会破坏服务器、或者给你的用户制造麻烦。</p>
<h2 id="数据会到哪里去"><a href="#数据会到哪里去" class="headerlink" title="数据会到哪里去"></a>数据会到哪里去</h2><h3 id="关于客户端-服务器架构"><a href="#关于客户端-服务器架构" class="headerlink" title="关于客户端/服务器架构"></a>关于客户端/服务器架构</h3><p>整个web都是基于一种基本的客户端/服务器架构，该架构可以归纳如下：</p>
<p>一个客户端（通常是Web浏览器）使用<a href="https://developer.mozilla.org/en-US/docs/HTTP" target="_blank" rel="external">HTTP协议</a>发送一个请求给服务器（通常是web服务器程序，譬如<a href="http://httpd.apache.org/" target="_blank" rel="external">Apache</a>, <a href="http://nginx.com/" target="_blank" rel="external">Nginx</a>, <a href="http://www.iis.net/" target="_blank" rel="external">IIS</a>, <a href="http://tomcat.apache.org/" target="_blank" rel="external">Tomcat</a>等等），而服务器则以相同的协议响应这个请求。</p>
<p><img src="https://mdn.mozillademos.org/files/4291/client-server.png" alt=""></p>
<p>在客户端，HTML表单只是提供一种比较方便且用户友好的方式，用来配置发送给服务器的HTTP请求。这样用户就可以自己提供能被HTTP请求传送的信息。</p>
<h3 id="客户端：定义如何发送数据"><a href="#客户端：定义如何发送数据" class="headerlink" title="客户端：定义如何发送数据"></a>客户端：定义如何发送数据</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form" target="_blank" rel="external"><code>&lt;form&gt;</code></a>元素能够定义其数据如何被发送，它所有的特性都是为了在用户点击发送按钮时，让你配置要发送的请求。其中最重要的两个特性是<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action" target="_blank" rel="external">action</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method" target="_blank" rel="external">method</a>。</p>
<h4 id="action特性"><a href="#action特性" class="headerlink" title="action特性"></a>action特性</h4><p>该特性定义了数据会被发往何处，它的值必须是个合法的URL。若该特性未指定，则数据会发送到包含该表单的页面所在的URL。</p>
<p><strong>示例</strong><br>在下面的例子中，数据会发送至<a href="http://foo.com：" target="_blank" rel="external">http://foo.com：</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://foo.com"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里，数据会被发送到表单页所在的服务器，但到达的却是服务器上不同的URL：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/somewhere_else"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如下，当不指定任何特性时，表单数据会给发送到包含该表单的的页面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>许多老旧的页面会使用下面的符号来表明，数据得被发送到包含该表单的的页面；这在当时是必须的，因为直到HTML5之前，action特性都是必填的。但现在就不再需要了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>可以指定一个使用HTTPS（安全的HTTP）协议的URL，此时数据会随请求的其他部分一起加密，即使表单本身位于一个通过HTTP访问的不安全页面。此外，若表单位于一个安全的页面，而你却给action特性指定了一个不安全的HTTP URL，则所有的浏览器会在每次用户要发送数据时给他们一个安全警告，因为此时这些数据将不被加密。</p>
</blockquote>
<h4 id="method特性"><a href="#method特性" class="headerlink" title="method特性"></a>method特性</h4><p>该特性定义了数据如何被发送。HTTP协议提供了几种方式来执行一个请求；HTML表单数据可以通过其中至少方式来发送：GET和POST。</p>
<p>要理解这两种方式的不同，我们得回过头来来看下HTTP是如何工作的。当你想取得Web上的某个资源时，浏览器会发送一个请求给指定的URL。一个HTTP请求含有两个部分：包含和浏览器功能有关的一系列全局字段的请求头，以及包含要给服务器处理的信息的请求体。</p>
<h5 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h5><p>浏览器使用GET方法来请求服务器发回指定的资源：“嘿服务器，我想获得这个资源”。这种情况下，浏览器只会发送一个空的请求体，而正因如此，若浏览器使用该方式，那么发给服务器的数据会给追加到URL后面。</p>
<p><strong>示例</strong><br>考虑如下表单：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://foo.com"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"say"</span> <span class="attr">value</span>=<span class="string">"Hi"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">value</span>=<span class="string">"Mom"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send my greetings<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用GET方法时，HTTP请求看起来就这样：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/?say=Hi&amp;to=Mom</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: foo.com</div></pre></td></tr></table></figure>
<h5 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h5><p>POST方法则稍有不同，浏览器发送这个方法给服务器，用以请求一个和HTTP请求体里数据有关的响应：“嘿服务器，看看这些数据然后给我发回一个适当的结果”。若表单使用该方法发送，则数据会给追加到HTTP请求体里。</p>
<p><strong>示例</strong><br>考虑如下表单（和上面那个一样）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://foo.com"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"say"</span> <span class="attr">value</span>=<span class="string">"Hi"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">value</span>=<span class="string">"Mom"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send my greetings<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用POST方法时，HTTP请求看起来就这样：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: foo.com</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"><span class="attribute">Content-Length</span>: 13</div><div class="line"></div><div class="line"><span class="applescript"><span class="built_in">say</span>=Hi&amp;<span class="keyword">to</span>=Mom</span></div></pre></td></tr></table></figure>
<p><code>Content-length</code>头部字段指示了请求体的大小，而<code>Content-Type</code>字段则标识了发往服务器的资源类型。我们将在稍后讨论下这些请求头。</p>
<p>当然，HTTP请求是不会展示给用户看的（若你想看到它们，还得使用诸如火狐的<a href="https://developer.mozilla.org/en-US/docs/Tools/Web_Console" target="_blank" rel="external">Web Console</a>或者<a href="https://developers.google.com/chrome-developer-tools/" target="_blank" rel="external">chrome Developer Tools</a>等工具），唯一展示给用户的，只有访问的URL。所以使用GET请求时，用户将会在他们的地址栏看到数据，而使用POST请求则看不到。这点至关重要，原因如下：</p>
<ol>
<li>若你要发送密码（或者任何敏感数据），那千万别用GET方法，否则该数据会不安全地展示在地址栏上。</li>
<li>若你想要发送大量数据，最好用POST方法，因为一些浏览器会限制URL的大小。此外，许多服务器也会限制接收的URL长度。</li>
</ol>
<h3 id="服务器端：处理数据"><a href="#服务器端：处理数据" class="headerlink" title="服务器端：处理数据"></a>服务器端：处理数据</h3><p>不论你选择哪种HTTP方法，服务器只会接收到一个字符串并将其解析，再以键/值对列表的形式获取数据。而如何访问这个列表，取决于你基于何种开发平台、以及用了何种框架。你使用的技术也会决定如何处理重复的键名，通常某个键名最后接收到的值是优先被选取的。</p>
<h4 id="示例：原生PHP"><a href="#示例：原生PHP" class="headerlink" title="示例：原生PHP"></a>示例：原生PHP</h4><p>PHP提供了几个全局对象来处理数据。假设你使用POST方法，下面的示例会直接提取你的数据并展示给用户。当然，要如何处理数据取决于你，你可以展示它、将其存进数据库、用邮件发送它、或者其他任何方式。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">// 全局变量$_POST让你能够访问用POST方法发送的数据</span></div><div class="line">  <span class="comment">// 要访问用GET方法发送的数据，可以使用$_GET</span></div><div class="line">  $say = htmlspecialchars($_POST[<span class="string">'say'</span>]);</div><div class="line">  $to  = htmlspecialchars($_POST[<span class="string">'to'</span>]);</div><div class="line"></div><div class="line">  <span class="keyword">echo</span>  $say, <span class="string">' '</span>, $to;</div></pre></td></tr></table></figure>
<p>这个示例会用我们发送的数据生成一个页面。考虑我们前面用的表单示例数据，输出结果会是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi Mom</div></pre></td></tr></table></figure>
<h4 id="示例：原生Python"><a href="#示例：原生Python" class="headerlink" title="示例：原生Python"></a>示例：原生Python</h4><p>下面的示例使用Python来做相同的事—将给定的数据展示到web页面上。其中使用了<a href="http://docs.python.org/3/library/cgi.html" target="_blank" rel="external">CGI Python package </a>来处理表单数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> html</div><div class="line"><span class="keyword">import</span> cgi</div><div class="line"><span class="keyword">import</span> cgitb; cgitb.enable()     <span class="comment"># 用于处理错误</span></div><div class="line"></div><div class="line">print(<span class="string">"Content-Type: text/html"</span>) <span class="comment"># 请求头字段，标识后面的内容是HTML</span></div><div class="line">print()                          <span class="comment"># 空行，表示请求头的结束</span></div><div class="line"></div><div class="line">form = cgi.FieldStorage()</div><div class="line">say  = html.escape(form[<span class="string">"say"</span>].value);</div><div class="line">to   = html.escape(form[<span class="string">"to"</span>].value);</div><div class="line"></div><div class="line">print(say, <span class="string">" "</span>, to)</div></pre></td></tr></table></figure>
<p>结果和之前用PHP处理是一样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi Mom</div></pre></td></tr></table></figure>
<h4 id="其它语言和框架"><a href="#其它语言和框架" class="headerlink" title="其它语言和框架"></a>其它语言和框架</h4><p>还有许多其他的服务端技术可以用来处理表单，比如Perl, Java, <a href="http://www.microsoft.com/net" target="_blank" rel="external">.Net</a>, Ruby等等，选择你最喜欢的一种就好。我们很少直接使用这些技术，因为这么做得需要很多技巧来填坑；通常我们会在众多好用的框架中选择一种，这样会让表单的处理更容易些，比如：</p>
<ul>
<li><a href="http://symfony.com/" target="_blank" rel="external">Symfony</a> for PHP</li>
<li><a href="https://www.djangoproject.com/" target="_blank" rel="external">Django</a> for Python</li>
<li><a href="http://rubyonrails.org/" target="_blank" rel="external">Ruby</a> On Rails for Ruby</li>
<li><a href="http://grails.org/" target="_blank" rel="external">Grails</a> for Java</li>
</ul>
<p>值得注意的是，就算用了这些框架，处理表单是不一定就会变得轻松。但至少这样用起来会更好些，还能节省你不少时间。</p>
<h2 id="特殊案例：发送文件"><a href="#特殊案例：发送文件" class="headerlink" title="特殊案例：发送文件"></a>特殊案例：发送文件</h2><p>文件是HTML表单中一个特殊的例子，其他数据都是文本数据，而文件则一般是、或者被认为是二进制数据。由于HTTP是个文本协议，所以对处理二进制数据得有特别的要求。</p>
<h3 id="enctype特性"><a href="#enctype特性" class="headerlink" title="enctype特性"></a>enctype特性</h3><p>该特性能让你指定HTTP请求头中的<code>Content-Type</code>字段值，这个字段的重要性在于，它能告诉服务器要发送的数据类型。其默认值是<code>application/x-www-form-urlencoded</code>，对应的解释是：“这份表单数据已被编码为URL格式”。</p>
<p>而当你想发送文件时，得先做两件事：</p>
<ul>
<li>将method特性设置为<code>POST</code>，因为使用表单时，文件内容是不能被放到URL参数里的</li>
<li>将<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype" target="_blank" rel="external">enctype</a>特性的值设为<code>multipart/form-data</code>，这样数据就会被分割为多个部分，每个文件都会追加上和他们一起发送的表单有关的文本。</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myFile"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send the file<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>某些浏览器支持<code>&lt;input&gt;</code>元素的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple" target="_blank" rel="external">multiple</a>特性，以便让一个input元素能发送多个文件。至于服务器会如何处理这些文件，就得取决于它用来什么技术了。如前所述，使用框架能让你的活的轻松些~</p>
<p><strong>警告：</strong>为防止滥用，许多服务器会对文件和HTTP请求设置大小限制。所以，最好在发送文件之前和服务器管理员核实一下这个限制。</p>
</blockquote>
<h2 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h2><p>每次要发数据给服务器前，你都得考虑下安全问题。HTML表单是针对服务器的首要攻击载体之一，但该危害的来源并非HTML表单本身，而在于服务器如何处理数据。</p>
<h3 id="常见的安全问题"><a href="#常见的安全问题" class="headerlink" title="常见的安全问题"></a>常见的安全问题</h3><p>著名的安全问题有很多，如何划分取决于你在做什么：</p>
<h4 id="XSS和CSRF"><a href="#XSS和CSRF" class="headerlink" title="XSS和CSRF"></a>XSS和CSRF</h4><p>跨站脚本攻击（XSS）和跨站请求伪造（CSRF）是最常见的攻击类型，它们会在你展示由用户发给用户的数据时发生。</p>
<p>XSS让攻击者能再其他用户访问的Web页面上注入客户端脚本。攻击者会利用跨站脚本的脆弱性来绕过访问控制策略，譬如<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Same_origin_policy_for_JavaScript" target="_blank" rel="external">同源策略</a>。这种攻击可以取得从小麻烦到严重安全危机不等的危害效果。</p>
<p>CSRF很像XSS，因为它们都以相同的方式开始—注入客户端脚本到Web页面，但它们的攻击目标却不同。CSRF攻击者会试着升级权限以成为一个高权限的用户（比如网站管理员），然后执行本不能够执行的动作（如把数据发送给不受信任的用户）。</p>
<p>XSS攻击利用了用户对网站的信任，而CSRF攻击则利用了网站对其用户的信任。</p>
<p>要防止此类攻击，就得时常校验用户发送给服务器的数据；同时（如果需要展示）也尽量别展示用户提供的HTML内容，而应该处理用户提供的数据，以避免将其原封不动地显示出来。目前几乎所有市面上的的框架，至少都会实现一个过滤器，用以移除用户提交数据中<code>&lt;script&gt;</code>, <code>&lt;iframe&gt;</code>, <code>&lt;object&gt;</code>等标签，这样有助于减轻风险，但并不意味着会根除它。</p>
<h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>SQL注入是一种对目标网站的数据库执行动作的攻击方式。通常攻击者会发送一段SQL请求，并希望服务器能执行它（多数发生在应用服务器想存储数据之时）。这实际上已成为<a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">针对web站点的主要攻击载体之一</a>。</p>
<p>该攻击的危害是很严重的，小到数据丢失、大到被攻击者通过权限升级访问整个网站架构。这确实是非常重大的威胁，所以你不应该存储那些用户提交而没经过特殊处理（例如，在PHP/MySQL架构下经过<a href="http://www.php.net/manual/en/function.mysql-real-escape-string.php" target="_blank" rel="external">mysql_real_escape_string()</a>处理）的数据。</p>
<h4 id="HTTP头部注入和邮件注入"><a href="#HTTP头部注入和邮件注入" class="headerlink" title="HTTP头部注入和邮件注入"></a>HTTP头部注入和邮件注入</h4><p>这种攻击会在你的应用使用用户在表单上输入的数据来构造HTTP头、或者email时发生。该攻击虽然不会危害你的服务器或者影响你的用户，但却会给更深处的问题大开方便之门，比如会话劫持、钓鱼攻击。</p>
<p>所有这些攻击往往都是悄无声息地发生的，而且会把你的服务器弄成<a href="http://en.wikipedia.org/wiki/Zombie_(computer_science" target="_blank" rel="external">肉鸡</a>)。</p>
<h3 id="偏执些：永远别信任你的用户"><a href="#偏执些：永远别信任你的用户" class="headerlink" title="偏执些：永远别信任你的用户"></a>偏执些：永远别信任你的用户</h3><p>所以，要如何对抗这些威胁呢？这一点已超出本指南的主题范围了，但有几条规则时需要我们牢记的。最重要的一条就是：永远别信任你的用户，包括你自己；即使是受信任的用户也会有被劫持可能。</p>
<p>所有的到达你服务器的数据都必须被校验并处理，而且要一直保持，不能有例外。</p>
<ul>
<li>过滤潜在的危险字符。要关注的哪些特定字符，取决于使用数据的上下文、也取决于你使用的服务器平台，而所有的服务端语言都会提供相应的功能。</li>
<li>限制传入的数据量，只允许有必要的。</li>
<li>把上传的文件放沙盒里（将它们存储到放到一个不同的服务器上，并且要访问到它们只有通过一个不同的子域名、或一个完全不同的域名才行）。</li>
</ul>
<p>若你能遵循这三条规则，就应该能避免绝大多数问题，但一个更好的办法是让一个有资格的第三方来做安全审查，别以为你能看透所有潜在的问题。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如你所见，发送表单数据时很简单的，但保障一个应用的安全就需要很多技术了。前端开发者不是那种去定义一个数据安全模型的角色，虽然可能得执行<a href="http://levonlin.info/2016/12/31/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/">客户端数据校验</a>，但是服务器也不能信任这些校验，因为它并不能确切知道客户端上到底发生过什么。</p>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>若你想学习更多关于wep应用安全防护的知识，可以深入了解下面这些资源：</p>
<ul>
<li><a href="https://www.owasp.org/index.php/Main_Page" target="_blank" rel="external">The Open Web Application Security Project (OWASP)</a></li>
<li><a href="http://shiflett.org/" target="_blank" rel="external">Chris Shiflett’s blog about PHP Security</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="web" scheme="http://levonlin.info/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>DOM元素的属性（property）和特性（attribute）</title>
    <link href="http://levonlin.info/2016/09/11/DOM%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%88property%EF%BC%89%E5%92%8C%E7%89%B9%E6%80%A7%EF%BC%88attribute%EF%BC%89/"/>
    <id>http://levonlin.info/2016/09/11/DOM元素的属性（property）和特性（attribute）/</id>
    <published>2016-09-11T09:29:50.000Z</published>
    <updated>2016-12-24T09:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从jQuery的prop-和attr-方法说开去"><a href="#从jQuery的prop-和attr-方法说开去" class="headerlink" title="从jQuery的prop()和attr()方法说开去"></a>从jQuery的<code>prop()</code>和<code>attr()</code>方法说开去</h2><p>jQuery中有两个获取DOM元素属性的方法：<code>prop()</code>和<code>attr()</code>，看似可以互相替换，但若搞不清这两个方法获取的到底是什么“属性”，有时就会出现令人困惑的结果。<br>官方文档中，用了下面的例子来解释这两者的不同：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>操作</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>elem.checked</td>
<td>true (Boolean) Will change with checkbox state</td>
</tr>
<tr>
<td>$( elem ).prop( “checked” )</td>
<td>true (Boolean) Will change with checkbox state</td>
</tr>
<tr>
<td>elem.getAttribute( “checked” )</td>
<td>“checked” (String) Initial state of the checkbox; does not change</td>
</tr>
<tr>
<td>$( elem ).attr( “checked” ) (1.6)</td>
<td>“checked” (String) Initial state of the checkbox; does not change</td>
</tr>
<tr>
<td>$( elem ).attr( “checked” ) (1.6.1+)</td>
<td>“checked” (String) Will change with checkbox state</td>
</tr>
<tr>
<td>$( elem ).attr( “checked” ) (pre-1.6)</td>
<td>true (Boolean) Changed with checkbox state</td>
</tr>
</tbody>
</table>
<p>我们可以看到，使用<code>prop()</code>当于直接使用了DOM元素对象的属性，而<code>attr()</code>相当于使用了DOM元素的<code>getAttribute()</code>或<code>setAttribute()</code>方法（而1.6前和1.6后的效果比较特殊，下面会解释）。这两种不同的实现，决定了两种方法获取到的值并不一样，这就得涉及到DOM元素属性（property）和特性（attribute）间的区别了。</p>
<h2 id="属性（property）和特性（attribute）"><a href="#属性（property）和特性（attribute）" class="headerlink" title="属性（property）和特性（attribute）"></a>属性（property）和特性（attribute）</h2><p>我们知道DOM的实现就是把一个HTML文档映射为一棵DOM树，而DOM树上的每个节点其实就是一个javascript对象。所以DOM元素属性和普通对象的属性一样，就是DOM对象这个javascript对象上的属性而已，我们可以直接在DOM对象上通过<code>.</code>或<code>[]</code>来获取和设置它们，比如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"form-item"</span> <span class="attr">value</span>=<span class="string">"value0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formItem = <span class="built_in">document</span>.querySelector(<span class="string">'[name=from-item]'</span>);</div><div class="line"><span class="built_in">console</span>.log(formItem.value); <span class="comment">/* value0 */</span></div><div class="line">formItem.value = <span class="string">'value1'</span>; <span class="comment">/* 文本框显示“value1”，但此时HTML中的value特性仍为"value0"  */</span></div><div class="line"><span class="built_in">console</span>.log(formItem.value); <span class="comment">/* value1 */</span></div></pre></td></tr></table></figure>
<p>而同时在DOM元素节点之外，还有其他类型的节点，比如文本节点、注释节点、还有我们要讨论的特性节点（Attr节点）等等；这些节点当然也是DOM树上的一个js对象。要操作特性节点，可以在DOM元素上通过<code>getAttribute()</code>、<code>setAttribute()</code>、<code>removeAttribute()</code>等方法来实现，或者用<code>attributes</code>属性获取特性节点集合再作操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(formItem.getAttribute(<span class="string">'value'</span>)); <span class="comment">/* value0，不受上面属性设置的影响，仍保持页面加载后html中的值 */</span></div><div class="line"></div><div class="line">formItem.setAttribute(<span class="string">'value'</span>, <span class="string">'value2'</span>); <span class="comment">/* 文本框仍显示“value1”，但此时HTML中的value特性已被改为"value2" */</span></div><div class="line"><span class="built_in">console</span>.log(formItem.getAttribute(<span class="string">'value'</span>)); <span class="comment">/* value2 */</span></div><div class="line"><span class="built_in">console</span>.log(formItem.value); <span class="comment">/* value1，不随特性节点的改变而改变 */</span></div></pre></td></tr></table></figure>
<p>上面的例子中，尤其要区分两点：</p>
<ul>
<li>属性和特性两者不是一一对应的：Attr节点对应的就是HTML各标签中的特性，这些特性有的未必会被内置为DOM元素的属性，比如HTML5的<code>data-*</code>特性等自定义特性；而DOM元素的属性也未必都是HTML中的特性，比如一些DOM元素的操作方法</li>
<li>即使特性节点名和DOM元素的属性名一致，这两者的操作和行为也是不同的：<ul>
<li>DOM元素的属性是DOM对象原生实现的，符合一般对象属性的行为；这些属性操作和同名的HTML特性节点无关，但可以在显示上覆盖HTML特性节点的设置</li>
<li>对于特性节点的操作都是针对HTML文档上的特性；对特性的操作不会改变同名属性值，只是改变HTML的文档内容而已</li>
</ul>
</li>
</ul>
<p>所以我们可以得到属性和特性的根本区别了：</p>
<p><strong>DOM元素的属性（property）是该对象所拥有的属性，而特性（attribute）则是该元素在HTML中的所拥有的特性节点。property是对象属性，本身不操作特性节点，但可以覆盖HTML中的同名特性的效果，是js操作；attribute是DOM节点对象，只用于获取和设置HTML特性，是文本操作。</strong></p>
<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>通过上面的讨论，既然属性和特性有根本性区别，那也就意味着他们的应用场合不太一样、也不能混淆：</p>
<ul>
<li>property的操作是纯js操作，用于获取和设置原生的一些特性；并且对于事件属性如<code>onclick</code>可以获得处理函数、对于<code>style</code>属性可以获得一个对象。</li>
<li>attribute的操作是文本操作，用于获取和设置HTML文档中的特性内容，注意这些内容都是字符串形式；同时它能操作的特性也不只是原生限定的那几种，对于一些拓展特性如<code>data-*</code>也可以操作。</li>
</ul>
<p>回到一开始举的jQuery的例子，<code>elem.checked</code>由于是属性操作，所以可以返回一个布尔值。而<code>elem.getAttribute( &quot;checked&quot; )</code>由于是针对HTML特性的文本操作，所以返回的就是一个字符串，当然这个字符串的值也未必是”checked”，而是由HTML中指定的值决定的。</p>
<p>至于为什么<code>attr</code>方法会在jQuery 1.6之前的版本、1.6本身和1.6之后出现各种不一致的行为呢？首先<code>prop</code>方法是在1.6版本之后引入的，之前只有<code>attr</code>时，该方法对返回属性是还是特性没有作严格区分；而在1.6版本开始会明确让<code>attr</code>返回特性、<code>prop</code>负责处理属性，同时1.6后为考虑向后兼容，<code>attr</code>返回特性会随属性的改变而改变，但返回的已经只能是“特性形式”的字符串了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从jQuery的prop-和attr-方法说开去&quot;&gt;&lt;a href=&quot;#从jQuery的prop-和attr-方法说开去&quot; class=&quot;headerlink&quot; title=&quot;从jQuery的prop()和attr()方法说开去&quot;&gt;&lt;/a&gt;从jQuery的&lt;cod
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="DOM" scheme="http://levonlin.info/tags/DOM/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>【译】表单组件的属性兼容性表</title>
    <link href="http://levonlin.info/2016/08/06/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8/"/>
    <id>http://levonlin.info/2016/08/06/【译】表单组件的属性兼容性表/</id>
    <published>2016-08-06T12:31:37.000Z</published>
    <updated>2017-01-20T16:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Property_compatibility_table_for_form_widgets" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>下面的兼容性表将总结出HTML表单对CSS的支持程度，由于CSS和HTML表单的复杂性，这几个表不能认为是最佳的参考对象。尽管如此，它们也能让你更了解能做什么、不能做什么，这将有助于你学习如何开发。</p>
<h2 id="如何阅读这些表格"><a href="#如何阅读这些表格" class="headerlink" title="如何阅读这些表格"></a>如何阅读这些表格</h2><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>各个属性都有如下四个可能的值：<br><strong>YES</strong><br>具有可靠而一致的跨浏览器支持。但你可能还得在某些边际情况下面对一些奇怪的副作用。</p>
<p><strong>PARTIAL</strong><br>当该属性生效时，你可能会频繁遇见那些奇怪的副作用或者不一致性。最好避免使用这些属性，除非你能掌控这些副作用。</p>
<p><strong>NO</strong><br>该属性不能生效，或者表现很不一致以至于不可靠。</p>
<p><strong>N.A</strong><br>该属性对于这类组件来说没有什么意义。</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>每种属性都有两种可能的效果：<br><strong>N(Normal)</strong><br>指该属性被直接应用。</p>
<p><strong>T(Tweaked)</strong><br>指该属性和下列额外规则一起使用：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line"><span class="comment">/* 在Webkit浏览器下禁用原生的外观和效果 */</span></div><div class="line">  <span class="attribute">-webkit-appearance</span>: none;</div><div class="line"></div><div class="line"><span class="comment">/* 在Gecko浏览器下禁用原生的外观和效果 */</span></div><div class="line">  <span class="attribute">-moz-appearance</span>: none;</div><div class="line"></div><div class="line"><span class="comment">/* 在几个不同的浏览器下禁用原生的外观和效果，包括Opera,Internet Explorer和Firefox */</span></div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="兼容性表"><a href="#兼容性表" class="headerlink" title="兼容性表"></a>兼容性表</h2><h3 id="统一行为"><a href="#统一行为" class="headerlink" title="统一行为"></a>统一行为</h3><p>在整体水平上，一些行为对于多数浏览器来说是一致的：</p>
<p>border, background, border-radius, height<br>在一些浏览器上，使用这些属性可以部分或者完全禁止组件的原生外观和体验。所以使用时请小心。</p>
<p>line-height<br>该属性的跨浏览器支持很不一致，得避免使用它。</p>
<p>text-decoration<br>在表单组件上，Opera不支持该属性。</p>
<p>text-overflow<br>在表单组件上，Opera，safari 和 IE9不支持该属性。</p>
<p>text-shadow<br>在表单组件上Opera不支持该属性，而IE9干脆就完全不支持它。</p>
<blockquote>
<p><strong>译注：</strong>由于表格内容比较复杂、使用markdown难以表现原有格式，而且考虑到这些表格更多只是让我们做个参考、阅读难度也不是很大。所以下文将只会摘取兼容性表中一些属性的说明作翻译，完整表格请参照原文。^_^</p>
</blockquote>
<h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>1.Webkit浏览器（多数指Mac OSX和iOS上的）对搜索框使用了原生的外观和效果。所以得使用<code>-webkit-appearance:none</code>来让搜索框能使用该属性。<br>2.在Windows7上，IE9不会应用到边框，除非使用了<code>background:none</code>。</td>
</tr>
<tr>
<td>border</td>
<td>同上</td>
</tr>
<tr>
<td>padding</td>
<td>同上</td>
</tr>
<tr>
<td>color</td>
<td>1.若未设置<code>border-color</code>属性，某些Webkit浏览器会给<code>&lt;textarea&gt;</code>的边框和字体都使用<code>color</code>属性。</td>
</tr>
<tr>
<td>font</td>
<td>参见<code>line-height</code>的备注</td>
</tr>
<tr>
<td>text-decoration</td>
<td>参见Opera的备注</td>
</tr>
<tr>
<td>text-indent</td>
<td>1.IE9只在<code>&lt;textarea&gt;</code>上支持该属性，而Opera只在单行文本框上支持它。</td>
</tr>
<tr>
<td>background</td>
<td>同<code>height</code></td>
</tr>
<tr>
<td>border-radius</td>
<td>1.同<code>height</code>。<br>2.Opera上的<code>border-radius</code>属性只在明确设置了边框后才生效。</td>
</tr>
<tr>
<td>box-shadow</td>
<td>1.IE9不支持该属性。</td>
</tr>
</tbody>
</table>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>1.该属性不会在Mac OSX上的Webkit浏览器上生效。</td>
</tr>
<tr>
<td>padding</td>
<td>同上</td>
</tr>
<tr>
<td>font</td>
<td>参见<code>line-height</code>的备注</td>
</tr>
<tr>
<td>border-radius</td>
<td>1.Opera上的<code>border-radius</code>属性只在明确设置了边框后才生效。</td>
</tr>
<tr>
<td>box-shadow</td>
<td>1.IE9不支持该属性。</td>
</tr>
</tbody>
</table>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>在实现了number组件的浏览器上，没有统一的方法来改变那个用于调节输入框值的调节器样式。值得注意的是，Safari中该调节器是位于输入框外的。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>1.Opera上的数字调节器被放大了，这会导致输入框的内容被隐藏。</td>
</tr>
<tr>
<td>padding</td>
<td>同上</td>
</tr>
<tr>
<td>font</td>
<td>参见<code>line-height</code>的备注</td>
</tr>
<tr>
<td>background</td>
<td>1.虽然被支持，但在不同浏览器间表现很不一致</td>
</tr>
<tr>
<td>border-radius</td>
<td>同上</td>
</tr>
<tr>
<td>box-shadow</td>
<td>同上</td>
</tr>
</tbody>
</table>
<h3 id="单选框和复选框"><a href="#单选框和复选框" class="headerlink" title="单选框和复选框"></a>单选框和复选框</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>1.某些浏览器会添加额外的外边距，而另一些则会伸展该组件</td>
</tr>
<tr>
<td>height</td>
<td>同上</td>
</tr>
</tbody>
</table>
<h3 id="选择框-单行"><a href="#选择框-单行" class="headerlink" title="选择框(单行)"></a>选择框(单行)</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>该属性可被由于<code>&lt;select&gt;</code>元素，但却不能用于<code>&lt;option&gt;</code>或<code>&lt;optgroup&gt;</code>元素</td>
</tr>
<tr>
<td>padding</td>
<td>1.该属性可用，但在MAC OSX上的一些浏览器存在不一致的表现<br>2.该属性可用于<code>&lt;select&gt;</code>元素，但对于<code>&lt;option&gt;</code>和<code>&lt;optgroup&gt;</code>的处理则存在不一致</td>
</tr>
<tr>
<td>color</td>
<td>1.在MAC OSX上的Webkit浏览器不支持在原生组件上（译注：指的应是单行选择框这一组件）使用该属性；而且它们和Opera都不在<code>&lt;option&gt;</code>和<code>&lt;optgroup&gt;</code>上支持该属性</td>
</tr>
<tr>
<td>font</td>
<td>1.在MAC OSX上的Webkit浏览器不支持在原生组件上使用该属性；而且它们和Opera都不在<code>&lt;option&gt;</code>和<code>&lt;optgroup&gt;</code>上支持该属性</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>1.IE9不支持在<code>&lt;select&gt;</code>, <code>&lt;option&gt;</code>, <code>&lt;optgroup&gt;</code>上使用该属性；Mac OSX上的Webkit浏览器不支持在<code>&lt;option&gt;</code>, <code>&lt;optgroup&gt;</code>上使用该属性</td>
</tr>
<tr>
<td>text-align</td>
<td>1.Windows7上的IE9和Webkit浏览器不支持在这一组件上使用该属性</td>
</tr>
<tr>
<td>text-decoration</td>
<td>1.只有Firefox实现了对该属性的完全支持，Opera根本不支持该属性，而其他浏览器只支持在<code>&lt;select&gt;</code>元素上使用它</td>
</tr>
<tr>
<td>text-indent</td>
<td>1.多数浏览器只在<code>&lt;select&gt;</code>元素上支持该属性<br>2.IE9不支持该属性</td>
</tr>
<tr>
<td>text-shadow</td>
<td>同上</td>
</tr>
<tr>
<td>text-transform</td>
<td>1.多数浏览器只在<code>&lt;select&gt;</code>元素上支持该属性</td>
</tr>
<tr>
<td>background</td>
<td>同上</td>
</tr>
<tr>
<td>border-radius</td>
<td>同上</td>
</tr>
<tr>
<td>box-shadow</td>
<td>同上</td>
</tr>
</tbody>
</table>
<h3 id="选择框-多行"><a href="#选择框-多行" class="headerlink" title="选择框(多行)"></a>选择框(多行)</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>padding</td>
<td>1.Opera不支持在<code>&lt;select&gt;</code>使用padding-top和padding-bottom</td>
</tr>
<tr>
<td>font</td>
<td>参见<code>line-height</code>的备注</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>1.IE9不支持在<code>&lt;select&gt;</code>, <code>&lt;option&gt;</code>, <code>&lt;optgroup&gt;</code>上使用该属性；Mac OSX上的Webkit浏览器不支持在<code>&lt;option&gt;</code>, <code>&lt;optgroup&gt;</code>上使用该属性</td>
</tr>
<tr>
<td>text-align</td>
<td>1.Windows7上的IE9和Webkit浏览器不支持在这一组件上使用该属性</td>
</tr>
<tr>
<td>text-decoration</td>
<td>1.只被FireFox和IE9支持</td>
</tr>
<tr>
<td>text-transform</td>
<td>1.多数浏览器只在<code>&lt;select&gt;</code>元素上支持该属性</td>
</tr>
<tr>
<td>border-radius</td>
<td>1.在Opera上只有明确设置了边框的情况下，border-radius属性才能使用</td>
</tr>
<tr>
<td>box-shadow</td>
<td>1.IE9不支持该属性</td>
</tr>
</tbody>
</table>
<h3 id="文件选择器"><a href="#文件选择器" class="headerlink" title="文件选择器"></a>文件选择器</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>font</td>
<td>1.虽然被支持，但在不同浏览器间表现很不一致</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>1.多数浏览器将该属性用于选择按钮</td>
</tr>
<tr>
<td>text-indent</td>
<td>1.该属性表现得像额外的左外边距</td>
</tr>
<tr>
<td>background</td>
<td>1.虽然被支持，但在不同浏览器间表现很不一致</td>
</tr>
<tr>
<td>box-shadow</td>
<td>1.IE9不支持该属性</td>
</tr>
</tbody>
</table>
<h3 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>1.Opera采用对选择框一样的限制来处理该组件</td>
</tr>
<tr>
<td>padding</td>
<td>同上</td>
</tr>
<tr>
<td>background</td>
<td>1.虽然被支持，但在不同浏览器间表现很不一致</td>
</tr>
<tr>
<td>border-radius</td>
<td>同上</td>
</tr>
<tr>
<td>box-shadow</td>
<td>同上</td>
</tr>
</tbody>
</table>
<h3 id="度量和进度条"><a href="#度量和进度条" class="headerlink" title="度量和进度条"></a>度量和进度条</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>padding</td>
<td>1.当在调整过的元素上使用padding属性时，Chrome会隐藏<code>&lt;progress&gt;</code>和<code>&lt;meter&gt;</code></td>
</tr>
<tr>
<td>background</td>
<td>1.虽然被支持，但在不同浏览器间表现很不一致</td>
</tr>
<tr>
<td>border-radius</td>
<td>同上</td>
</tr>
<tr>
<td>box-shadow</td>
<td>同上</td>
</tr>
</tbody>
</table>
<h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>1.Chrome和Opera在组件周围添加了额外的空间，Windows7上的Opera拉伸了滑块</td>
</tr>
<tr>
<td>padding</td>
<td>1.可用，但不会有视觉效果</td>
</tr>
<tr>
<td>background</td>
<td>1.虽然被支持，但在不同浏览器间表现很不一致</td>
</tr>
<tr>
<td>border-radius</td>
<td>同上</td>
</tr>
<tr>
<td>box-shadow</td>
<td>同上</td>
</tr>
</tbody>
</table>
<h3 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h3><table>
<thead>
<tr>
<th>属性</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>border-radius</td>
<td>1.IE9不支持该属性</td>
</tr>
<tr>
<td>box-shadow</td>
<td>同上</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】HTML表单高级样式</title>
    <link href="http://levonlin.info/2016/06/29/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/"/>
    <id>http://levonlin.info/2016/06/29/【译】HTML表单高级样式/</id>
    <published>2016-06-29T07:44:25.000Z</published>
    <updated>2017-07-19T16:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Advanced_styling_for_HTML_forms" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>在本文中，我们将了解如何在<a href="https://developer.mozilla.org/en-US/docs/CSS" target="_blank" rel="external">HTML</a>表单上使用<a href="https://developer.mozilla.org/en-US/docs/HTML" target="_blank" rel="external">CSS</a>，为那些难于自定义的表单组件加以样式。如<a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/Styling_HTML_forms" target="_blank" rel="external">前文</a>所述，文本框和按钮很适合使用CSS，而现在我们得来探索HTML表单样式的那些坑了。</p>
<p>在进一步讨论前，先回顾下两种HTML表单组件：</p>
<p><strong>比较糟糕的</strong><br>一些元素只能使用很少的样式，而且得依赖一些复杂的技巧，偶尔还得用到CSS3的高级知识。</p>
<p><strong>丑陋的</strong><br>别指望用CSS给这些元素添加样式了。在最好的情况，你还能写一点不能跨浏览器支持的代码，而且还不可能完全控制这些元素的样式。</p>
<h2 id="CSS的表现力"><a href="#CSS的表现力" class="headerlink" title="CSS的表现力"></a>CSS的表现力</h2><p>除了文本框和按钮，表单组件面临的最大问题，是CSS在多数情况下没有足够的表现力来恰当地给复杂组件添加样式。</p>
<p>近来HTML和CSS的演进已在拓展CSS的表现力：</p>
<ul>
<li><a href="http://www.w3.org/TR/CSS21/selector.html#dynamic-pseudo-classes" target="_blank" rel="external">CSS2.1</a>很受限，只提供了三个伪类：<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:active" target="_blank" rel="external">:active</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus" target="_blank" rel="external">:focus</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:hover" target="_blank" rel="external">:hover</a></li>
</ul>
</li>
<li><a href="http://www.w3.org/TR/css3-selectors/" target="_blank" rel="external">CSS Selector Level 3</a>新增了几个和HTML表单相关的伪类：<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled" target="_blank" rel="external">:enabled</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled" target="_blank" rel="external">:disabled</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:checked" target="_blank" rel="external">:checked</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate" target="_blank" rel="external">:indeterminate</a></li>
</ul>
</li>
<li><a href="http://dev.w3.org/csswg/css3-ui/#pseudo-classes" target="_blank" rel="external">CSS Basic UI Level 3</a>也添加了几个伪类用于描述组件状态：<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:default" target="_blank" rel="external">:default</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:valid" target="_blank" rel="external">:valid</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid" target="_blank" rel="external">:invalid</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range" target="_blank" rel="external">:in-range</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range" target="_blank" rel="external">:out-of-range</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:required" target="_blank" rel="external">:required</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:optional" target="_blank" rel="external">:optional</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only" target="_blank" rel="external">:read-only</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write" target="_blank" rel="external">:read-write</a></li>
</ul>
</li>
<li><a href="http://dev.w3.org/csswg/selectors4/" target="_blank" rel="external">CSS Selector Level 4</a>正处于开发状态，而且讨论的重点并不在于增加更多内容以改进表单：<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:user-error" target="_blank" rel="external">:user-error</a>只是<code>:invalid</code>伪类的一个增强版、</li>
</ul>
</li>
</ul>
<p>虽然上述这些都是个好的开始，但其中仍有两个问题：第一，某些浏览器并不会实现CSS2.1之外的特性。第二，这些改进并未好到能处理诸如日期选择器之类的复杂组件。</p>
<p>浏览器厂商也为拓展CSS在表单上的表现力做了些试验，最好得了解下哪些可以使用。</p>
<blockquote>
<p><strong>警告：</strong>虽然这些实验挺有趣的，但<strong>它们并非标准、并不可靠</strong>。若你要使用它们（通常你也不会这么做），你得自己担起风险，而且使用非标准属性也是<a href="http://www.alistapart.com/articles/every-time-you-call-a-proprietary-feature-css3-a-kitten-dies/" target="_blank" rel="external">可能阻碍Web发展的做法</a>。</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/CSS/CSS_Reference/Mozilla_Extensions" target="_blank" rel="external">Mozilla的CSS拓展</a><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-placeholder" target="_blank" rel="external">:-moz-placeholder</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-submit-invalid" target="_blank" rel="external">:-moz-submit-invalid</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid" target="_blank" rel="external">:-moz-ui-invalid</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-valid" target="_blank" rel="external">:-moz-ui-valid</a></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/CSS/CSS_Reference/Webkit_Extensions" target="_blank" rel="external">Webkit的CSS拓展</a><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-input-placeholder" target="_blank" rel="external">::-webkit-input-placeholder</a></li>
<li><a href="http://trac.webkit.org/wiki/Styling%20Form%20Controls" target="_blank" rel="external">更多拓展</a></li>
</ul>
</li>
<li><a href="http://msdn.microsoft.com/en-us/library/ie/hh869403%28v=vs.85%29.aspx" target="_blank" rel="external">Microsoft的CSS拓展</a><ul>
<li><a href="http://msdn.microsoft.com/en-us/library/ie/hh772745%28v=vs.85%29.aspx" target="_blank" rel="external">:-ms-input-placeholder</a></li>
</ul>
</li>
<li><a href="http://www.opera.com/docs/specs/" target="_blank" rel="external">Opera没有和HTML表单相关的拓展</a></li>
</ul>
<h3 id="控制表单元素的外观"><a href="#控制表单元素的外观" class="headerlink" title="控制表单元素的外观"></a>控制表单元素的外观</h3><p>基于 WebKit- (Chrome, Safari) 和 Gecko- (Firefox) 的浏览器为HTML组件提供了最高等级的定制。这些定制也是跨平台的，所以浏览器需要一个机制来转换那些能被改变样式的表单组件的原生外观和体验。</p>
<p>于是它们使用了私有属性：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-appearance" target="_blank" rel="external">-webkit-appearance</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance" target="_blank" rel="external">-moz-appearance</a>。<strong>这些属性是非标准的，也不应被使用</strong>。实际上，它们在Webkit和Gecko上的表现也不尽相同。但是，有一个值是应该知道的：<code>none</code>，使用该值你就可以获得对组件样式的（几乎所有）控制权。</p>
<p>所以，若你在一个元素上应用样式时遇到问题，可以试着使用这些私有属性（译注：用<code>none</code>值覆盖默认值）。下面我们会看到几个例子，但最为人熟知的用例是重置Webkit浏览器上搜索框的样式。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#999</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="attribute">-webkit-appearance</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>在我们讨论Web技术时，是难于预测未来的，但拓展CSS的表现力确实很难。另一些做了探索工作的标准如<a href="http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html" target="_blank" rel="external">Shadow DOM</a>提供了新的视角。我们对完全可配置样式的表单的追求还远未结束。</p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="多选框和单选框"><a href="#多选框和单选框" class="headerlink" title="多选框和单选框"></a>多选框和单选框</h3><p>给多选框和单选框添加样式是很让人凌乱的。例如，多选框和单选框的大小往往不会发生改变，而且不同浏览器的表现相当不同。</p>
<h4 id="一个简单例子"><a href="#一个简单例子" class="headerlink" title="一个简单例子"></a>一个简单例子</h4><p>考虑如下示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span> &#123;</div><div class="line">    <span class="attribute">width </span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不同浏览器的处理如下：</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>渲染效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>Firefox 16 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4165/checkbox-firefox-macos.png" alt=""></td>
</tr>
<tr>
<td>Chrome 22 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4163/checkbox-chrome-macos.png" alt=""></td>
</tr>
<tr>
<td>Opera 12.01 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4167/checkbox-opera-macos.png" alt=""></td>
</tr>
<tr>
<td>Internet Explorer 9 (Windows 7)</td>
<td><img src="https://developer.mozilla.org/files/4169/checkbox-IE9-win7.png" alt=""></td>
</tr>
<tr>
<td>Internet Explorer 7 (Windows XP)</td>
<td><img src="https://developer.mozilla.org/files/4171/checkbox-IE7-winxp.png" alt=""></td>
</tr>
</tbody>
</table>
<h4 id="复杂点的例子"><a href="#复杂点的例子" class="headerlink" title="复杂点的例子"></a>复杂点的例子</h4><p>由于Opera和IE没有诸如<code>-webkit-appearance</code>和<code>-moz-appearance</code>之类的特性，所以使用这类特性是不太合适的。幸运的是，在这种情况下用CSS还能找出解决办法来。举一个常见的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"first"</span> <span class="attr">name</span>=<span class="string">"fruit-1"</span> <span class="attr">value</span>=<span class="string">"cherry"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"first"</span>&gt;</span>I like cherry<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"second"</span> <span class="attr">name</span>=<span class="string">"fruit-2"</span> <span class="attr">value</span>=<span class="string">"banana"</span> <span class="attr">disabled</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"second"</span>&gt;</span>I can't like banana<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"third"</span> <span class="attr">name</span>=<span class="string">"fruit-3"</span> <span class="attr">value</span>=<span class="string">"strawberry"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"third"</span>&gt;</span>I like strawberry<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>加一些基本样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">1em</span> sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line"></div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">fieldset</span> &#123;</div><div class="line">  <span class="attribute">border </span>: <span class="number">1px</span> solid <span class="number">#CCC</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">cursor </span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span>+<span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">margin </span>: .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，我们来加样式以获得一个定制的复选框。</p>
<p>我们的计划是用我们自己的图像来替换原生的复选框。首先得准备一张具有所有复选框所需状态的图像，这些状态有：未勾选、已勾选、禁用未勾选、禁用已勾选。该图像可用CSS雪碧图来做：</p>
<p><img src="https://developer.mozilla.org/files/4173/checkbox-sprite.png" alt=""></p>
<p>先从隐藏原生的复选框开始，我们只是简单地把它们从页面的可视范围中挪出。这里有两个要重点考虑的事：</p>
<ul>
<li>别使用<code>display:none</code>来隐藏复选框，因为如前面提到的，我们需要保证复选框对用户可用。使用<code>display:none</code>的话，复选框就不再是用户可访问的，即不能再勾选或者不勾选它。</li>
<li>我们将使用一些CSS3选择器来实现我们的样式。为支持老旧浏览器，可以在我们要用的选择器前加<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:root" target="_blank" rel="external">:root</a>伪类。在已有的实现中，支持我们需要的选择器的浏览器也支持<code>:root</code>伪类，而剩下的浏览器就不支持了。所以这是一种用来识别老旧浏览器的方便做法，老旧浏览器中将会看到普通的复选框、而现代浏览器中将会看到定制的复选框。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span> &#123;</div><div class="line">  <span class="comment">/* 原生的复选框会从页面的可视范围中被挪出 */</span></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">1000em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们已经移除了原生的复选框，可以添加我们自己的了，这里会在原生复选框后面的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label" target="_blank" rel="external"><code>&lt;label&gt;</code></a>元素使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:before" target="_blank" rel="external">:before</a>伪元素。下面的选择器中，我们先用<a href="https://developer.mozilla.org/en-US/docs/CSS/Attribute_selectors" target="_blank" rel="external">属性选择器</a>来获取复选框；然后使用<a href="https://developer.mozilla.org/en-US/docs/CSS/Adjacent_sibling_selectors" target="_blank" rel="external">相邻兄弟选择器</a>来获取原来复选框后的<code>label</code>。最后我们通过给<code>:before</code>伪元素添加样式，用其来显示我们定制的复选框。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">width  </span>: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">height </span>: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span> .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"https://developer.mozilla.org/files/4173/checkbox-sprite.png"</span>) no-repeat <span class="number">0</span> <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 下一属性用于在文本基线调整复选框的位置 */</span></div><div class="line"></div><div class="line">  <span class="attribute">vertical-align</span>: bottom;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来用原来复选框的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:checked" target="_blank" rel="external">:checked</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled" target="_blank" rel="external">:disabled</a>伪类来改变我们定制的复选框的状态。由于我们使用了CSS雪碧图，我们只需要调整背景的位置而已。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">16px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:disabled</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">32px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:disabled</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">48px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后也是很重要的一步：当用户使用键盘在不同表单组件间浏览时，每个组件应该能看到聚焦的效果。由于我们隐藏了原生的复选框，所以只能自己实现这一特性来让用户知晓他们正处于何处。下列的CSS实现了对我们的定制复选框的聚焦：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:focus</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dotted black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终效果如下：</p>
<p><iframe height="130" src="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/Advanced_styling_for_HTML_forms$samples/A_more_complex_example?revision=784065" width="250"></iframe></p>

<h3 id="处理选择框噩梦"><a href="#处理选择框噩梦" class="headerlink" title="处理选择框噩梦"></a>处理选择框噩梦</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select" target="_blank" rel="external"><code>&lt;select&gt;</code></a>元素被认为是一个“丑陋的”组件，因为不太可能给它添加跨平台的样式。当然，还是有一些可以探讨的东西的，这里就不长篇大论了，先看个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">select</span> &#123;</div><div class="line">  <span class="attribute">width   </span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">padding </span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">option</span> &#123;</div><div class="line">  <span class="attribute">padding </span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">color   </span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后面的表格展示了不同浏览器如何在两种情况下处理这一样式。（渲染效果中）前两列只是简单的例子，后两列则使用了些定制的CSS来获得对组件外观的更多控制，如下所示：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">select</span>, <span class="selector-tag">option</span> &#123;</div><div class="line">  <span class="attribute">-webkit-appearance </span>: none; <span class="comment">/* 获得对Webkit浏览器里外观的控制 */</span></div><div class="line">  <span class="attribute">-moz-appearance </span>: none; <span class="comment">/* 获得对Gecko浏览器里外观的控制 */</span></div><div class="line"></div><div class="line">  <span class="comment">/* 获得对Presto (Opera) 和 Trident (IE)浏览器里外观的控制</span></div><div class="line">     注意这也能在Gecko浏览器里起作用，且对Webkit浏览器有副作用 */  </div><div class="line">  <span class="attribute">background </span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>普通渲染（关闭）</th>
<th>普通渲染（打开）</th>
<th>调整后渲染（关闭）</th>
<th>调整后渲染（打开）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Firefox 16 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4201/select-firefox-macos.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4199/select-firefox-macos-open.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4197/select-firefox-macos-custom.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4195/select-firefox-macos-custom-open.png" alt=""></td>
</tr>
<tr>
<td>Firefox 16 (Windows 7)</td>
<td><img src="https://developer.mozilla.org/files/4209/select-firefox-win7.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4207/select-firefox-win7-open.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4205/select-firefox-win7-custom.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4203/select-firefox-win7-custom-open.png" alt=""></td>
</tr>
<tr>
<td>Chrome 22 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4183/select-chrome-macos.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4181/select-chrome-macos-open.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4179/select-chrome-macos-custom.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4177/select-chrome-macos-custom-open.png" alt=""></td>
</tr>
<tr>
<td>Chrome 22 (Windows 7)</td>
<td><img src="https://developer.mozilla.org/files/4191/select-chrome-win7.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4189/select-chrome-win7-open.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4187/select-chrome-win7-custom.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4185/select-chrome-win7-custom-open.png" alt=""></td>
</tr>
<tr>
<td>Opera 12.01 (Mac OSX)</td>
<td><img src="https://developer.mozilla.org/files/4225/select-opera-macos.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4223/select-opera-macos-open.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4221/select-opera-macos-custom.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4219/select-opera-macos-custom-open.png" alt=""></td>
</tr>
<tr>
<td>Internet Explorer 9 (Windows 7)</td>
<td><img src="https://developer.mozilla.org/files/4217/select-IE9-win7.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4215/select-IE9-win7-open.png" alt=""></td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>Internet Explorer 7 (Windows XP)</td>
<td><img src="https://developer.mozilla.org/files/4213/select-IE7-winxp.png" alt=""></td>
<td><img src="https://developer.mozilla.org/files/4211/select-IE7-winxp-open.png" alt=""></td>
<td>N/A</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>如你所见，即使使用了 <code>-*-qppearance</code> 属性，仍会有问题存在：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding" target="_blank" rel="external">padding</a>属性在不同操作系统和浏览器中的处理是不一致的。</li>
<li>老旧的IE不支持平滑的样式。</li>
<li>火狐没有能给予下拉箭头样式的方式。</li>
<li>若想要给下拉菜单中的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option" target="_blank" rel="external"><code>&lt;option&gt;</code></a>元素以样式，则Chrome和Opera在不同系统下的表现不尽相同。</li>
</ul>
<p>同时，在本例中，我们只讨论了三个CSS属性；想想要考虑更多的CSS属性会有多么混乱。可见，CSS确实不太适合用来改变这些组件的外观和体验，但它仍让你能做些调整，如果你愿意忍受不同浏览器或不同操作系统上的不同的话。</p>
<p>我们将在下篇文章：<a href="http://levonlin.info/2016/08/06/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8/">表单组件的属性兼容表</a>中尝试指出哪些属性是可用的。</p>
<h2 id="通向漂亮表单之路：一些有用的库和拓展工具"><a href="#通向漂亮表单之路：一些有用的库和拓展工具" class="headerlink" title="通向漂亮表单之路：一些有用的库和拓展工具"></a>通向漂亮表单之路：一些有用的库和拓展工具</h2><p>尽管CSS在复选框和单选框上的表现力已经够用了，但离其支持高级表单组件仍然遥遥无期。即使在<code>&lt;select&gt;</code>元素上有一些可能，但文件组件、日期选择器等仍不能被添加样式。</p>
<p>若你想获得对表单组件的完整控制权，你就得依赖Javascript，别无选择。在<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">怎样创建定制表单组件</a>一文中，我们将了解如何自己实现它，而如今有一些很有用的库可以帮到你：</p>
<ul>
<li><a href="http://sprawsm.com/uni-form/" target="_blank" rel="external">Uni-form</a>是一个规范了表单格式和使用CSS给予表单样式的框架。在和jQuery一起使用时，它也提供了些额外的可选特性。</li>
<li><a href="http://formalize.me/" target="_blank" rel="external">Formalize</a>是一些常见Javascript框架（如jQuery、Dojo、YUI等）的一个插件，用于规范化和定制表单。</li>
<li><a href="http://www.emblematiq.com/lab/niceforms/" target="_blank" rel="external">Niceforms</a>是个提供了完整web表单定制的独立Javascript方法。你可以使用一些内建的主题、也可自己创建。</li>
</ul>
<p>下面几个库则不止用于处理表单，但它们在处理HTML表单时有很多有趣的特性：</p>
<ul>
<li><a href="jQuery UI">jQuery UI</a>提供了些非常有趣的可定制高级组件，比如日期选择器（特别关注了无障碍访问）。</li>
<li><a href="http://twitter.github.com/bootstrap/base-css.html#forms" target="_blank" rel="external">Twitter Bootstrap</a>非常有用，如果你想规范化你的表单的话。</li>
<li><a href="http://afarkas.github.com/webshim/demos/demos/webforms.html" target="_blank" rel="external">WebShim</a>是一个庞大的工具，用于处理那些支持HTML5的浏览器。其web表单部分挺有用的。</li>
</ul>
<p>要知道，绑定CSS和Javascript会引起副作用。所以若你选择了上述的一种库，就得时常保证在脚本失效时会可回退的样式表。造成脚本失效的原因很多，特别在移动端，故你的Web站点或app设计得能最好地处理这些情况。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>当在HTML表单上使用CSS仍存在许多坑时，有很多方法可以绕过这些坑。本来是没有确切、通用的解决方案的，但现代浏览器带来了新可能。而现在，最佳方案是研究不同浏览器对用在HTML表单组件的CSS的支持程度。</p>
<p>下篇文章，我们将探索各种HTML表单组件对那些最重要的CSS属性的支持程度：<a href="http://levonlin.info/2016/08/06/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8/">表单组件的属性兼容表</a>。</p>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><ul>
<li><a href="http://diveintohtml5.info/forms.html" target="_blank" rel="external">Dive into HTML5: Forms</a></li>
<li><a href="http://www.smashingmagazine.com/2011/06/27/useful-ideas-and-guidelines-for-good-web-form-design/" target="_blank" rel="external">Useful ideas and guidelines for good web form design</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>美大面试</title>
    <link href="http://levonlin.info/2016/06/15/%E7%BE%8E%E5%A4%A7%E9%9D%A2%E8%AF%95/"/>
    <id>http://levonlin.info/2016/06/15/美大面试/</id>
    <published>2016-06-15T12:00:00.000Z</published>
    <updated>2017-01-20T16:10:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>相比百度，美大的面试官似乎很关注标准方面的问题、同时也问了一些体现综合能力的题目。总结如下：</p>
<h2 id="hover控制显隐的级联菜单"><a href="#hover控制显隐的级联菜单" class="headerlink" title="hover控制显隐的级联菜单"></a>hover控制显隐的级联菜单</h2><p>这个常见于导航条和电商网站的侧边栏，也可以用于实现自定义的右键菜单，最简单的一个思路就是用<code>hover</code>伪类+子菜单绝对定位来做，但感觉回答得挺勉强的，模拟大众点评的侧边栏形式再实现一遍吧：</p>
<p></p><p data-height="300" data-theme-id="17410" data-slug-hash="XKjaWe" data-default-tab="html,result" data-user="levonlin" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/levonlin/pen/XKjaWe/" target="_blank" rel="external">sidebar</a> by levonlin (<a href="http://codepen.io/levonlin" target="_blank" rel="external">@levonlin</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="获取股票价格"><a href="#获取股票价格" class="headerlink" title="获取股票价格"></a>获取股票价格</h2><p>给定一个表格，每行的几个单元格分别放置股票代码、名称和待获取的股票价格以及一个按钮。要求点击一个按钮就获取改行的股票价格，数据交换格式自定。</p>
<p>核心思路就是通过点击事件发送请求，并显示回传数据而已。因为按钮可能很多，就想到了使用事件代理减少性能损耗。原生实现如下（用了新浪财经的数据）：</p>
<p></p><p data-height="309" data-theme-id="17410" data-slug-hash="YWGQWY" data-default-tab="js,result" data-user="levonlin" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/levonlin/pen/YWGQWY/" target="_blank" rel="external">Get Stocks Price</a> by levonlin (<a href="http://codepen.io/levonlin" target="_blank" rel="external">@levonlin</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="实现轮播图"><a href="#实现轮播图" class="headerlink" title="实现轮播图"></a>实现轮播图</h2><p>就是经典的带自动播放、进度显示、左右方向控制的轮播图啦，而且要求封装接口实现批量导入图片生成轮播图。</p>
<p>其实自己也实现过几次了，但是回答时还是思路很不清晰，说明还是没有学到位，构建的能力不足啊。重新研究了一下：</p>
<p>轮播图的主要有三个组件（图片、箭头、原点），而这三个组件又对应三个切换（自动切换、左右切换、任意切换）的操作。这里此采用了构造函数+原型对象来封装整个功能，构造函数主要做三件事：</p>
<ul>
<li>获取配置的属性（三个切换的开关）</li>
<li>输出整个组件初始结构、获取UI属性</li>
<li>初始化三个切换动作</li>
</ul>
<p>构造函数中各种实例属性配置完后，接下来就只要在对象的原型里，把输出组件、切换动作这两类方法实现就好了。难点就是切换的实现，为简单起见，这里用了个<code>_moveTo</code>方法一步到位，没有过渡；同时原点状态的切换也是重新渲染后直接替换，减少了频繁琐碎的类名切换操作。</p>
<p>最后，只要new一下构造函数，把资源、配置传进去，一个轮播图就可以轻松生成：</p>
<p></p><p data-height="320" data-theme-id="17410" data-slug-hash="dpWjdV" data-default-tab="js,result" data-user="levonlin" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/levonlin/pen/dpWjdV/" target="_blank" rel="external">carousel</a> by levonlin (<a href="http://codepen.io/levonlin" target="_blank" rel="external">@levonlin</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>记得最清楚的是冒泡，其他的就不太熟悉了，将常用的几种贴下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 冒泡 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> last = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i = last) &#123;</div><div class="line">        last = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">var</span> temp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j+<span class="number">1</span>] = temp;</div><div class="line">                last = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 选择 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">var</span> maxIndex = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[maxIndex] &lt; arr[j]) &#123;</div><div class="line">                maxIndex = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (maxIndex !== i) &#123;</div><div class="line">            <span class="keyword">var</span> temp = arr[i];</div><div class="line">            arr[i] = arr[maxIndex];</div><div class="line">            arr[maxIndex] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 插入 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">var</span> temp = arr[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt; arr.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &lt; temp) &#123;</div><div class="line">                arr[j - <span class="number">1</span>] = arr[j];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        arr[j - <span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="几个标准"><a href="#几个标准" class="headerlink" title="几个标准"></a>几个标准</h2><p>标准这东西，除非遇到实在不能解决的问题，自己平常是很少去深究的。而这次面试问了好多这方面的问题，让我感觉这方面的认知真的很匮乏。其实想想未来的职业发展，研究并掌握标准是一种保障，也是自己升值潜力的所在，毕竟前端界千变万化还是基于标准的，这就是所谓内功吧：</p>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>问了DOM0级别事件和DOM2级事件的不同，这个还好，DOM0级在元素上只能一个事件加一个处理函数，而DOM2可以添加多个嘛。然而接下来再问DOM3级的内容、有没有DOM4等我就懵了，印象中DOM3多了些xml方面的api，但具体也说不上了，翻了翻高程，大概有这么几个方面：</p>
<ul>
<li>引入用于比较节点的方法：<code>isSameNode</code>（DOM4已废弃）和<code>isEqualNode</code>，这两者间其实就是<code>==</code>和<code>===</code>的区别。</li>
<li>节点上数据的get和set操作:<code>getUserData</code>、<code>setUserData</code>。（DOM4已废弃）</li>
<li>DOM3级新支持的事件：<code>focusin</code>、<code>focusout</code>、<code>texInput</code>、<code>mouseenter</code>、<code>mouseleave</code>、<code>compositionstart</code>、<code>compositioninupdate</code>、<code>compositionend</code>。以及键盘事件的新属性：<code>key</code>、<code>char</code>、<code>location</code>、<code>getModifierState()</code>等。</li>
<li>XML节点的几个命名空间方法：isDefaultNameSpace(nameSpace)、lookupNamespaceURI(prefix)、lookupPrefix(nameSpace)</li>
<li>新增了Xpath的API。</li>
</ul>
<p>要了解更多内容还是参见<a href="https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/" target="_blank" rel="external">官网</a>吧。至于DOM4，去年也已经<a href="https://www.w3.org/TR/2015/REC-dom-20151119/" target="_blank" rel="external">发布</a>了。</p>
<h3 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h3><p>问我css3的发布机制，平常也是只用不深究，故也不甚了解。查了下，为避免规范过于庞大，css3是将整个规范拆分为一个个模块的形式发布的。</p>
<p>有几个比较重要的模块：</p>
<blockquote>
<p>选择器、颜色、背景和边框、数值和单位、文字特效、2D/3D转换、动画、多列布局、用户界面</p>
</blockquote>
<h2 id="浏览器如何渲染css"><a href="#浏览器如何渲染css" class="headerlink" title="浏览器如何渲染css"></a>浏览器如何渲染css</h2><p>参见<a href="http://blog.jobbole.com/68208/" target="_blank" rel="external">这篇文章</a>可知大致流程如下：</p>
<ol>
<li>解析HTML构建DOM树</li>
<li>结合css构建渲染树</li>
<li>渲染树布局（reflow，这一步产生了盒模型）</li>
<li>渲染树绘制（rasterizing）</li>
</ol>
<p>由于每一步都要耗费时间进行计算，所以这也前端性能优化的重点，比如要避免触发浏览器重构、重绘等。</p>
<h2 id="es6新的数组遍历方法"><a href="#es6新的数组遍历方法" class="headerlink" title="es6新的数组遍历方法"></a>es6新的数组遍历方法</h2><p>最窘的是把<code>forEach</code>当成es6的。。。，还说出了个<code>for-of</code>，但这不止适用于数组，还可用于字符串和<code>Map</code>、<code>Set</code>等新类型的遍历。</p>
<p>事后想起来专门用于数组的还有<code>map</code>和<code>filter</code>，但它们还是早在es5里就有了，只是自己长期没用，潜意识里就把它们划进“未来标准”里去了。查了下才知道，es6提供了三个用来遍历数组的新方法：<code>entries()</code>、<code>keys()</code>和<code>values()</code>，它们都将遍历结果保存于一个遍历器对象中返回。区别如下：</p>
<ul>
<li><code>keys()</code>是对数组的键名的遍历。</li>
<li><code>values()</code>是对数组键值的遍历。</li>
<li><code>entries()</code>方法是对数值的键值对的遍历。</li>
</ul>
<p>顺便附上自己不常用的<code>map</code>和<code>filter</code>：</p>
<ul>
<li><code>arr.map(callback[, thisArg])</code>: callback以元素、索引、数组本身作参数，thisArg设置回调函数的this；返回一个处理后的新数组（这点和forEach只返回undefined不同，意味着该方法可以链式调用）。</li>
<li><code>arr.filter(callback[, thisArg])</code>：callback以元素、索引、数组本身作参数，返回true则保留该元素，false则舍去，thisArg设置回调函数的this；返回一个处理后的新数组（也可链式调用）。</li>
</ul>
<h2 id="块级元素和内联元素有何不同"><a href="#块级元素和内联元素有何不同" class="headerlink" title="块级元素和内联元素有何不同"></a>块级元素和内联元素有何不同</h2><p>回答得不全，得考虑容纳性、换行、盒模型上的差别：</p>
<ul>
<li>块级元素：可容纳内联元素和其他块状元素；排斥其他元素与其位于同一行；拥有完整的盒模型特性。</li>
<li>内联元素：只能容纳文本或内联元素；允许其他内联元素与其位于同一行；不设宽高（高度和行高有关）、上下margin无效、上下padding、border溢出。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相比百度，美大的面试官似乎很关注标准方面的问题、同时也问了一些体现综合能力的题目。总结如下：&lt;/p&gt;
&lt;h2 id=&quot;hover控制显隐的级联菜单&quot;&gt;&lt;a href=&quot;#hover控制显隐的级联菜单&quot; class=&quot;headerlink&quot; title=&quot;hover控制显隐的
    
    </summary>
    
      <category term="求职" scheme="http://levonlin.info/categories/%E6%B1%82%E8%81%8C/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="求职" scheme="http://levonlin.info/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>【译】HTML表单样式</title>
    <link href="http://levonlin.info/2016/06/05/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F/"/>
    <id>http://levonlin.info/2016/06/05/【译】HTML表单样式/</id>
    <published>2016-06-05T06:13:20.000Z</published>
    <updated>2017-07-19T16:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Styling_HTML_forms" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>本文中，我们将学习如何使用<a href="https://developer.mozilla.org/en-US/docs/CSS" target="_blank" rel="external">CSS</a>来让<a href="https://developer.mozilla.org/en-US/docs/HTML" target="_blank" rel="external">HTML</a>表单看起来更漂亮，这可能需要窍门才能做到。由于历史及技术上的原因，表单组件并不太适合使用CSS；而也正因为有这些困难，许多的开发者会选择<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">创建定制表单组件</a>来获得对外观和体验的控制。然而，在现代浏览器中，网页设计师可以拥有更多对表单元素的控制权了。让我们来深入了解下吧。</p>
<h2 id="为何难以使用CSS给表单组件添加样式？"><a href="#为何难以使用CSS给表单组件添加样式？" class="headerlink" title="为何难以使用CSS给表单组件添加样式？"></a>为何难以使用CSS给表单组件添加样式？</h2><p>在web发展的早期，大约1995年，表单控件就已经在<a href="http://www.ietf.org/rfc/rfc1866.txt" target="_blank" rel="external">the HTML 2 specification</a>中给添加到HTML了。由于表单组件的复杂性，浏览器开发商们就选择了依靠操作系统来管理和渲染它们。</p>
<p>几年之后，CSS诞生了，这就在技术上使得用原生组件来实现表单的做法也有了样式需求。然而在CSS的早期，给表单控件添加样式并未被优先考虑。</p>
<p>由于用户们习惯了在交互平台上的视觉体验，浏览器开发商不得不让表单控件可以被添加样式；而说实话，在今天也依然难以重构所有表单控件让它们可被样式化。</p>
<p>即使到了现在，也依然没有一个单独的浏览器实现了所有CSS 2.1规范。然而随着时间推移，浏览器开发商们已经改进了表单元素的CSS支持，虽然其可用性仍受诟病，但现在你已经可以使用CSS来给<a href="https://developer.mozilla.org/en-US/docs/HTML/Forms" target="_blank" rel="external">HTML表单</a>添加样式了。</p>
<h3 id="并非所有组件受CSS的影响都是平等的"><a href="#并非所有组件受CSS的影响都是平等的" class="headerlink" title="并非所有组件受CSS的影响都是平等的"></a>并非所有组件受CSS的影响都是平等的</h3><p>如今在表单使用CSS时依然有一些困难；这些问题可归为三类：</p>
<h4 id="还好的"><a href="#还好的" class="headerlink" title="还好的"></a>还好的</h4><p>若存在跨平台问题，一些元素可以只添加少许的样式，有如下几个结构元素：</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form" target="_blank" rel="external"><code>&lt;form&gt;</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset" target="_blank" rel="external"><code>&lt;fieldset&gt;</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label" target="_blank" rel="external"><code>&lt;label&gt;</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output" target="_blank" rel="external"><code>&lt;output&gt;</code></a></li>
</ol>
<p>此外，还有所有的文本框组件（单行或多行），以及按钮。</p>
<h4 id="比较糟糕的"><a href="#比较糟糕的" class="headerlink" title="比较糟糕的"></a>比较糟糕的</h4><p>一些元素只能使用很少的样式，而且得依赖一些复杂的技巧，偶尔还得用到CSS3的高级知识。</p>
<p>这其中包括了<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend" target="_blank" rel="external"><code>&lt;legend&gt;</code></a>元素；该元素不能在跨平台时被恰当地定位。此外，复选框及单选框不能直接添加样式；然而有了CSS3之后你就可以做到这点了。<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">placeholder</a>的内容是不能通过标准方法来添加样式的，但所有实现了它的浏览器都会以私有的CSS伪元素或伪类的形式让你能给它添加样式。</p>
<p>至于要具体如何处理这些特殊情况，我们会在<a href="http://levonlin.info/2016/06/29/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/">HTML表单高级样式</a>一文中讨论。</p>
<h4 id="丑陋的"><a href="#丑陋的" class="headerlink" title="丑陋的"></a>丑陋的</h4><p>某些元素是不能用CSS添加样式的。它们包括所有的高级UI组件比如范围滑块、颜色、日期控件，以及下拉组件（包括<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select" target="_blank" rel="external"><code>&lt;select&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option" target="_blank" rel="external"><code>&lt;option&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup" target="_blank" rel="external"><code>&lt;optgroup&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist" target="_blank" rel="external"><code>&lt;datalist&gt;</code></a> 等元素）。文件选择器组件也被认为是不能添加样式的，而新的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress" target="_blank" rel="external"><code>&lt;progress&gt;</code></a>和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter" target="_blank" rel="external"><code>&lt;meter&gt;</code></a>元素也在此之列。</p>
<p>这些组件的主要问题在于，它们拥有非常复杂的结构，而CSS没有足够的表现力来给这些组件的各个细节添加样式。若你非得定制这些组件，就只能依靠Javascript来构建一棵能让你添加样式的DOM树。我们将在<a href="https://developer.mozilla.org/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets" target="_blank" rel="external">如何创建定制表单组件</a>一文中学习如何做到这一点。</p>
<h2 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h2><p>在用CSS给那些<a href="./#还好的">易于添加样式的元素</a>的元素以样式时，你不必面对任何困难，因为它们多数表现得和其它HTML元素一样。然而，每个浏览器的用户代理样式表会导致一些不一致的情况，所以，这里会有几个技巧来帮你轻松地给它们添加样式。</p>
<h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><p>搜索框是文本框中唯一一种需要点技巧来添加样式的。在基于webkit的浏览器（chrome, safari等）中，你得用<code>-webkit-appearance</code>属性来作下调整。我们将会在<a href="http://levonlin.info/2016/06/29/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/">HTML表单高级样式</a>一文更深入地探讨该属性。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#999</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">-webkit-appearance</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4153/search-chrome-macos.png" alt=""></p>
<p>在上面这张Chrome的搜索框截图中，连个文本框都设置了边框，但第一个文本框没有使用<code>-webkit-appearance</code>属性进行渲染，而第二个贼使用了<code>-webkit-appearance:none</code>。它们间的差别值得注意。</p>
<h3 id="字体和文本"><a href="#字体和文本" class="headerlink" title="字体和文本"></a>字体和文本</h3><p>CSS字体和文本特性在任何组件中都可以被轻易使用（当然，你也可以在表单组件上使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face" target="_blank" rel="external">@font-face</a>）。然而，不同浏览器的行为表现通常是不一样的。某些组件默认不会从父元素那继承<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family" target="_blank" rel="external">font-family</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size" target="_blank" rel="external">font-size</a>，同时许多浏览器会使用系统的默认样式来作为替代。要让你的表单的外观与其他内容保持一致，你可以在样式表中添加如下规则：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;</div><div class="line">  <span class="attribute">font-family </span>: inherit;</div><div class="line">  <span class="attribute">font-size   </span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的截图体现了设置之后的不同；左边是MAC OSX的Firefox中元素的默认渲染效果，其使用了系统的默认字体样式。而右边则是使用了上面的字体协调样式后的相同元素。</p>
<p><img src="https://developer.mozilla.org/files/4157/font-firefox-macos.png" alt=""></p>
<p>要使用系统默认样式还是自定义样式以适应页面内容，仍存在很多争议。这个决定权在于身为网页或web应用设计师的你身上。</p>
<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>所有的文本框都完全支持CSS盒模型相关的属性（<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/width" target="_blank" rel="external">width</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/height" target="_blank" rel="external">height</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding" target="_blank" rel="external">padding</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin" target="_blank" rel="external">margin</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border" target="_blank" rel="external">border</a>）。然而以前要呈现这些组件时，浏览器都得依赖系统的默认样式。至于如何把这些样式混用到你的页面中，这得取决于你。</p>
<p>若你想保持这些原生组件的样子和体验，你会在给它们实现一致的样式时遇到点困难。这是因为每个组件都有它们独有的边框、内边距和外边距的规定。所以，如果你希望在几个不同的组件间保持相同的大小，你就得使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing" target="_blank" rel="external">box-sizing</a>属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">select</span>, <span class="selector-tag">button</span> &#123;</div><div class="line">  <span class="attribute">width </span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box; <span class="comment">/* 兼容基于Webkit的旧版浏览器 */</span></div><div class="line">     <span class="attribute">-moz-box-sizing</span>: border-box; <span class="comment">/* 兼容基于Gecko的旧版浏览器（Firefox &lt; 29） */</span></div><div class="line">          <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4161/size-chrome-win7.png" alt=""></p>
<p>上面的截图中，左边一列是不使用<code>box-sizing</code>构建的，而右边一列则使用了该属性并赋予其值<code>border-box</code>。可见设置该属性让所有的元素都占据了相同的空间大小，而覆盖了系统给各种组件的默认规则。</p>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>定位HTML表单元素通常不是什么大问题，然而有两个特殊元素值得你关注一下：</p>
<h4 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h4><p><code>&lt;legend&gt;</code>元素可以很好地支持样式，除了定位。在每种浏览器中，<code>&lt;legend&gt;</code>元素都位于其父<code>&lt;fieldset&gt;</code>元素的上边框以上，根本没办法在HTML文档流中改变其定位、让其远离那个上边框。你只能使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="external">position</a>属性来让其绝对或相对定位，否则它就只能视作是fieldset边框的一部分。</p>
<p>以为无障碍技术的原因，使得<code>&lt;legend&gt;</code>成为很重要的元素（它作为fieldset中各个表单组件的label，并以此被无障碍设备读出），通常他会和一个标题做搭配，并以无障碍技术可识别的形式隐藏起来，就像这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">legend</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><p>所有浏览器都默认将<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea" target="_blank" rel="external">textarea</a>元素当作内联元素，并让它与文本的底线对齐。而这种设定通常并不是我们想要的，使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">display</a>属性可以很容易就将其从<code>inline-block</code>改为<code>block</code>。但若你还想把它当内联元素使用，那通常得改变其垂直对齐方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">textarea</span> &#123;</div><div class="line">  <span class="attribute">vertical-align</span>: top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>来看一个给表单以样式的例子吧，通过例子，许多相关的知识点会更容易理解些。而我们要构建的，是如下图所示的contact表单：</p>
<p><img src="https://developer.mozilla.org/files/4149/screenshot.png" alt=""></p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>相比<a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">本指南第一篇文章</a>，这里的HTML稍微多了点内容；只有几个额外的字段和一个标题而已。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>to: Mozilla<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"from"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>from:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"user_name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"reply"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span>reply:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">name</span>=<span class="string">"user_email"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"msg"</span>&gt;</span>Your message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"msg"</span> <span class="attr">name</span>=<span class="string">"user_message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Send your message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>有趣的部分开始了，但在我们编码之前，还需要三个额外的资源：</p>
<ol>
<li>明信片<a href="https://developer.mozilla.org/files/4151/background.jpg" target="_blank" rel="external">背景</a></li>
<li>一套打字机字体：<a href="http://www.fontsquirrel.com/fonts/Secret-Typewriter" target="_blank" rel="external">fontsquirrel.com上的”Secret Typewriter”</a></li>
<li>一套手写字体：<a href="http://www.fontsquirrel.com/fonts/Journal" target="_blank" rel="external">fontsquirrel.com上的”Journal”</a></li>
</ol>
<p>现在我们可以投入写代码了。首先，我们要准备好<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face" target="_blank" rel="external">@font-face</a>的定义以及<code>&lt;body&gt;</code>、<code>&lt;form&gt;</code>元素的基本样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span>&#123;</div><div class="line">  <span class="attribute">font-family </span>: <span class="string">"handwriting"</span>;</div><div class="line"></div><div class="line">  <span class="attribute">src </span>: <span class="built_in">url</span>(<span class="string">'journal.eot'</span>);</div><div class="line">  <span class="attribute">src </span>: <span class="built_in">url</span>(<span class="string">'journal.eot?'</span>) <span class="built_in">format</span>(<span class="string">'eot'</span>),</div><div class="line">        <span class="built_in">url</span>(<span class="string">'journal.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</div><div class="line">        <span class="built_in">url</span>(<span class="string">'journal.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">font-face</span>&#123;</div><div class="line">  <span class="attribute">font-family </span>: <span class="string">"typewriter"</span>;</div><div class="line"></div><div class="line">  <span class="attribute">src </span>: <span class="built_in">url</span>(<span class="string">'veteran_typewriter.eot'</span>);</div><div class="line">  <span class="attribute">src </span>: <span class="built_in">url</span>(<span class="string">'veteran_typewriter.eot?'</span>) <span class="built_in">format</span>(<span class="string">'eot'</span>),</div><div class="line">        <span class="built_in">url</span>(<span class="string">'veteran_typewriter.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</div><div class="line">        <span class="built_in">url</span>(<span class="string">'veteran_typewriter.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font  </span>: <span class="number">21px</span> sans-serif;</div><div class="line"></div><div class="line">  <span class="attribute">padding </span>: <span class="number">2em</span>;</div><div class="line">  <span class="attribute">margin  </span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">background </span>: <span class="number">#222</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line"></div><div class="line">  <span class="attribute">width  </span>: <span class="number">740px</span>;</div><div class="line">  <span class="attribute">height </span>: <span class="number">498px</span>;</div><div class="line">  <span class="attribute">margin </span>: <span class="number">0</span> auto;</div><div class="line"></div><div class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span> <span class="built_in">url</span>(background.jpg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们来定位标题和所有表单元素：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">position </span>: absolute;</div><div class="line">  <span class="attribute">left </span>: <span class="number">415px</span>;</div><div class="line">  <span class="attribute">top  </span>: <span class="number">185px</span>;</div><div class="line"> </div><div class="line">  <span class="attribute">font </span>: <span class="number">1em</span> <span class="string">"typewriter"</span>, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#from</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left </span>: <span class="number">398px</span>;</div><div class="line">  <span class="attribute">top  </span>: <span class="number">235px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#reply</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left </span>: <span class="number">390px</span>;</div><div class="line">  <span class="attribute">top  </span>: <span class="number">285px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#message</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left </span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">top  </span>: <span class="number">70px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们得开始对表单元素自身做配置了。首先，确保<code>&lt;label&gt;</code>使用了正确的字体：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">font </span>: .<span class="number">8em</span> <span class="string">"typewriter"</span>, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文本框需要使用一些公共样式。简单起见，可以移除它们的边框和背景，然后重新定义其内外边距：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</div><div class="line">  <span class="attribute">font    </span>: .<span class="number">9em</span>/<span class="number">1.5em</span> <span class="string">"handwriting"</span>, sans-serif;</div><div class="line"></div><div class="line">  <span class="attribute">border  </span>: none;</div><div class="line">  <span class="attribute">padding </span>: <span class="number">0</span> <span class="number">10px</span>;</div><div class="line">  <span class="attribute">margin  </span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width   </span>: <span class="number">240px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而当这些输入框获得焦点时，还得让它们用一个浅灰色、半透明背景做高亮。注意为了移除一些浏览器自带默认的高亮，还需要配置<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline" target="_blank" rel="external">outline</a>属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">  <span class="attribute">background   </span>: <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">outline      </span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们的文本框已经整好了，但我们还得调整单行和多行文本框以作适配，因为通常它们看起来是一点都不相同的。</p>
<p>对单行文本框需要一些微调以让其在IE下看起来漂亮点。IE不是基于字体的自然高度来定义文本框高度的（但其它所有浏览器都这么做），要修复这点，我们得给文本框指定一个明确的高度，如下所示：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">2.5em</span>; <span class="comment">/* 针对IE */</span></div><div class="line">    <span class="attribute">vertical-align</span>: middle; <span class="comment">/* 可选配置，能在旧版IE中看起来漂亮点 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>&lt;textarea&gt;</code>元素应被预设置为块级元素进行渲染。这里还有两个重要的属性，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/resize" target="_blank" rel="external">resize</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow" target="_blank" rel="external">overflow</a>。由于我们采用固定大小的设计，所以得使用<code>resize</code>属性来防止用户改变多行文本框的大小。而<code>overflow</code>属性则让文本框在不同浏览器下的效果趋于一致；因为有的浏览器默认使用值<code>auto</code>而另一些使用值<code>scroll</code>。本例中，最好得保证各个浏览器下都使用<code>auto</code>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">textarea</span> &#123;</div><div class="line">  <span class="attribute">display </span>: block;</div><div class="line"></div><div class="line">  <span class="attribute">padding </span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">margin  </span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">10px</span>;</div><div class="line">  <span class="attribute">width   </span>: <span class="number">340px</span>;</div><div class="line">  <span class="attribute">height  </span>: <span class="number">360px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">resize  </span>: none;</div><div class="line">  <span class="attribute">overflow</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button" target="_blank" rel="external"><code>&lt;button&gt;</code></a>元素可以很方便地使用CSS；这样你就可以尽情发挥了，即使用上<a href="https://developer.mozilla.org/en-US/docs/CSS/Pseudo-elements" target="_blank" rel="external">伪元素</a>也没问题！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">  <span class="attribute">position     </span>: absolute;</div><div class="line">  <span class="attribute">left         </span>: <span class="number">440px</span>;</div><div class="line">  <span class="attribute">top          </span>: <span class="number">360px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">padding      </span>: <span class="number">5px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">font         </span>: bold .<span class="number">6em</span> sans-serif;</div><div class="line">  <span class="attribute">border       </span>: <span class="number">2px</span> solid <span class="number">#333</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">background   </span>: none;</div><div class="line"></div><div class="line">  <span class="attribute">cursor       </span>: pointer;</div><div class="line"></div><div class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-1.5deg);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-1.5deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-1.5deg);</div><div class="line">     <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-1.5deg);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-1.5deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">" &gt;&gt;&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>,</div><div class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">  <span class="attribute">outline   </span>: none;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">color   </span>: <span class="number">#FFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随意尝试下吧，试了你才知道你可以做到！</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如你所见，如果我们想构建只含文本框和按钮的表单，那么用CSS来提供样式是件很容易的事。若你还想了解多些能让你更轻松地处理表单组件的CSS技巧，可以参见<a href="http://necolas.github.com/normalize.css" target="_blank" rel="external">normalize.css项目</a>的表单部分。</p>
<p><a href="http://levonlin.info/2016/06/29/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/">下篇文章</a>，我们会学习如何处理那些属于“比较糟糕的”和“丑陋的”类别的表单组件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】原生表单组件</title>
    <link href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>http://levonlin.info/2016/05/24/【译】原生表单组件/</id>
    <published>2016-05-24T09:52:28.000Z</published>
    <updated>2017-07-19T16:40:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/The_native_form_widgets" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Forms" target="_blank" rel="external">HTML表单</a>是由组件构成的，这些组件是各种浏览器都支持的内置控件。本文中我们将深入探讨它们、了解它们的作用、学习如何让各种浏览器更好地支持它们。</p>
<p>虽然这里我们只探讨内建表单组件，但由于HTML表单有诸多限制、以及不同浏览器间的实现有很多的不同，故web开发者有时也得构建自定义的表单组件。这部分内容将会在<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">怎样创建定制表单组件</a>一文中详细讨论。</p>
<h2 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h2><p>文本输入框是最基本的表单组件，它便于用户输入各种数据。然而一些文本框也可以专门用来实现一些特定需求。</p>
<p>值得注意的是，HTML文本框只是个纯文本输入控件。这就意味着你不能用它来进行<a href="https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla" target="_blank" rel="external">富文本编辑</a>（如加粗、斜体等）。所谓的富文本编辑器其实都是自定义的组件。</p>
<p>所有文本框都共享一些公共行为：</p>
<ul>
<li>它们可以被标记为<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">只读</a>（用户不可修改输入的值）或者<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-disabled" target="_blank" rel="external">禁用</a>（输入的值不会随着表单的其他部分一起提交）。</li>
<li>它们可拥有一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">占位符</a>；这是一小段在文本输入框内的、用于简明描述文本框作用的文本。</li>
<li>它们都受<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a>（输入框的物理尺寸）和<a href="https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-maxlength" target="_blank" rel="external">length</a>（文本框能输入的最大字符数）的约束。</li>
<li>它们可以有<a href="https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-spellcheck" target="_blank" rel="external">拼写检查</a>，如果浏览器支持的话。</li>
</ul>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.readonly</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>6</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.disabled</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>6</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.placeholder</td>
<td>10.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>11.10</td>
<td>4.0</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code>.placeholder</td>
<td>10.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>11.50</td>
<td>5.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.size</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.maxlength</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.spellcheck</td>
<td>10.0</td>
<td>Unknown (3.6)</td>
<td>10</td>
<td>11.0</td>
<td>4.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.readonly</td>
<td>(Yes)</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.disabled</td>
<td>(Yes)</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.placeholder</td>
<td>2.3</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>11.10</td>
<td>4</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code>.placeholder</td>
<td>?</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>11.50</td>
<td>4</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.size</td>
<td>(Yes)</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.maxlength</td>
<td>(Yes)</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.spellcheck</td>
<td>?</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>11.0</td>
<td>?</td>
</tr>
</tbody>
</table>
<h3 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h3><p>单行文本框是用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type" target="_blank" rel="external"><code>type</code></a>属性值为<code>text</code>的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" target="_blank" rel="external"><code>&lt;input&gt;</code></a>元素创建的（若未提供<code>type</code>属性值，<code>text</code>也是个默认属性）。此外，如果你指定给<code>type</code>属性的值不被浏览器支持，也会使用<code>text</code>作为回退值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4273/all-single-line-text-field.png" alt=""></p>
<p>单行文本框只有一个约束：若你输入的文本中有换行，浏览器会在发送数据前将这个换行给移除。</p>
<p>但是，我们也可以给单行文本框“按需”添加一些约束。这得用到<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external"><code>pattern</code></a>属性；该属性会告诉浏览器根据你选择的一个<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">正则表达式</a>来验证值的有效性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"^cherry|banana$"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>HTML5添加了几个<code>type</code>属性的值来增强基本的单行文本框。虽然这些值仍会把<code>&lt;input&gt;</code>元素呈现为一个单行文本框，但实际上它们还给文本框添加了几个额外的约束和特性。</p>
<h4 id="E-mail输入框"><a href="#E-mail输入框" class="headerlink" title="E-mail输入框"></a>E-mail输入框</h4><p>该类型的输入框设置了<code>type</code>值为<code>email</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">multiple</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它给输入框添加了这样的验证约束：用户需要输入一个有效的e-mail地址；其他任何输入都会导致输入框报错。而通过设置<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple" target="_blank" rel="external"><code>multiple</code></a>属性，这种输入框也可以让用户输入多个e-mail地址。</p>
<h4 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h4><p>该类型的输入框设置了<code>type</code>值为<code>password</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它并未给输入文本添加任何特殊的约束，只是把输入框的里值做了隐藏以防止被读取。</p>
<blockquote>
<p>注：注意这只是个用户界面的特性；浏览器还是会发送纯文本，除非你用Javascript给文本进行编码。</p>
</blockquote>
<h4 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h4><p>该类型的输入框设置了<code>type</code>值为<code>search</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">autosave</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4269/all-search-field.png" alt=""></p>
<p>文本框和搜索框的主要区别在于外观和体验上（通常，搜索框会以圆角呈现）。但其实搜索框还增加了一个特性：输入的值可被自动保存，以实现在同一站点的不同页面中给出自动补全。</p>
<h4 id="电话号码输入框"><a href="#电话号码输入框" class="headerlink" title="电话号码输入框"></a>电话号码输入框</h4><p>该类型的输入框设置了<code>type</code>值为<code>tel</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于世界上有多种电话号码制式，所以此类型的的文本框不会给用户输入的值强制使用任何约束，主要是一个语义上的区别而已。虽然在某些设备上（尤其是手机）点击该输入框，会出现一个不同的虚拟键盘。</p>
<h4 id="URL输入框"><a href="#URL输入框" class="headerlink" title="URL输入框"></a>URL输入框</h4><p>该类型的输入框设置了<code>type</code>值为<code>url</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为确保只输入有效的URL，它为输入框添加了些特殊的验证约束；若输入的值不是个符合格式的URL，表单将会呈现错误状态。</p>
<blockquote>
<p>注：URL符合格式并不意味着它指向确切存在的地址。</p>
</blockquote>
<p>有特殊约束并处于错误状态的输入框会阻止表单提交；此外，为让错误提示更明显，也可以为它们加些样式，我们将在<a href="http://levonlin.info/2016/12/31/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/">表单数据校验</a>一文中详细讨论这点。</p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”text”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”email”</td>
<td>10.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>10.62</td>
<td>?</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”password”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”search”</td>
<td>5.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>11.01</td>
<td>5.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”tel”</td>
<td>5.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>11.01</td>
<td>5.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”url”</td>
<td>10.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>10.62</td>
<td>?</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”text”</td>
<td>(Yes)</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”email”</td>
<td>Not supported</td>
<td>4.0 (4.0)</td>
<td>Not supported</td>
<td>(Yes)</td>
<td>?</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”password”</td>
<td>?</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>?</td>
<td>?</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”search”</td>
<td>Not supported</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>(Yes)</td>
<td>4.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”tel”</td>
<td>2.3</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>(Yes)</td>
<td>3.1</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”url”</td>
<td>Not supported</td>
<td>4.0 (4.0)</td>
<td>?</td>
<td>(Yes)</td>
<td>3.1</td>
</tr>
</tbody>
</table>
<h3 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h3><p>多行文本框使用了<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea" target="_blank" rel="external"><code>&lt;textarea&gt;</code></a>元素而非<code>&lt;input&gt;</code>元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
<p>多行文本框与普通的单行文本框间的主要不同在于，用户可以输入带有显式换行（即支持回车[CR]和换行[LF]字符）的文本。</p>
<p>值得注意的是，使用CSS属性<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/resize" target="_blank" rel="external"><code>resize</code></a>，用户可以直接改变多行文本框大小，如果你想让他们这么做的话。</p>
<p><img src="https://developer.mozilla.org/files/4271/all-multi-lines-text-field.png" alt=""></p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>(Yes)</td>
<td>1.0 (1.7 or earlier)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>(Yes)</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h2 id="下拉组件"><a href="#下拉组件" class="headerlink" title="下拉组件"></a>下拉组件</h2><p>下拉组件能让用户很方便地从众多选项中作选择。HTML有两种下拉组件：选择框和自动补全组件。这两者的交互方式是一样的，一旦控件被激活，浏览器会展示一列表的值让用户从中选择，这个值列表会覆盖在页面内容之上。</p>
<h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><p>选择框是通过<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select" target="_blank" rel="external"><code>&lt;select&gt;</code></a>元素创建的，并使用一或多个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option" target="_blank" rel="external"><code>&lt;option&gt;</code></a>元素作为其子元素，每个<code>&lt;option&gt;</code>都指定了一个可能的值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若有需要，选择框的默认值可通过为相应的<code>&lt;option&gt;</code>元素设置<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-selected" target="_blank" rel="external"><code>selected</code></a>属性进行指定。为了给值创建分组，<code>&lt;option&gt;</code>元素亦可嵌套于<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup" target="_blank" rel="external"><code>&lt;optgroup&gt;</code></a>元素中：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"fruits"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"vegetables"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Eggplant<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Potatoe<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4517/all-select.png" alt=""></p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;option&gt;</code></td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;optgroup&gt;</code></td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>1.0</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;option&gt;</code></td>
<td>1.0</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;optgroup&gt;</code></td>
<td>1.0</td>
<td>4.0 (4.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h3 id="多选下拉框"><a href="#多选下拉框" class="headerlink" title="多选下拉框"></a>多选下拉框</h3><p>默认的，选择框只允许用户选择一个值。要让用户能选择多个值，可通过给<code>&lt;select&gt;</code>元素添加<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple" target="_blank" rel="external"><code>multiple</code></a>属性实现。但此时，选择框就不再呈现为一个下拉组件了，反而呈现为一个普通的列表框。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4559/all-multi-lines-select.png" alt=""></p>
<blockquote>
<p>注：所有支持<code>&lt;select&gt;</code>元素的浏览器也都支持它的<code>multiple</code>属性。</p>
</blockquote>
<h3 id="自动补全组件"><a href="#自动补全组件" class="headerlink" title="自动补全组件"></a>自动补全组件</h3><p>通过使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist" target="_blank" rel="external"><code>&lt;datalist&gt;</code></a>元素，你可以给表单组件提供说明、自动补全的值，并通过子元素<code>&lt;option&gt;</code>来指定要呈现的值。设置好后，这份数据列表就能绑定到其他使用了<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external"><code>list</code></a>属性的组件上了。</p>
<p>一旦数据列表附加到一个表单组件上，它的选项就能被用于自动补全用户输入的文本；典型的情况是，选项被呈现为一个带有可能匹配的值的下拉框。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myFruit"</span>&gt;</span>What's your favorite fruit?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"myFruit"</span> <span class="attr">list</span>=<span class="string">"mySuggestion"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"mySuggestion"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blackberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blueberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lychee<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Peach<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://developer.mozilla.org/files/4593/all-datalist.png" alt=""></p>
<blockquote>
<p>注：根据<a href="http://www.w3.org/TR/html5/common-input-element-attributes.html#attr-input-list" target="_blank" rel="external">HTML规范</a>，<code>list</code>属性和<code>&lt;datalist&gt;</code>元素可被用于任何需要用户输入的组件上。然而，其并未清楚指明如何在非文本控件上使用，同时不同浏览器的实现也是各有不同。所以，要在非文本控件使用该特性得多加小心。</p>
</blockquote>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;datalist&gt;</code></td>
<td>20.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>9.6</td>
<td>Not supported</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.list</td>
<td>20.0</td>
<td>Unknown (4.0)</td>
<td>10</td>
<td>9.6</td>
<td>Not supported</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;datalist&gt;</code></td>
<td>Not supported</td>
<td>4.0 (4.0)</td>
<td>Not supported</td>
<td>(Yes)</td>
<td>Not supported</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.list</td>
<td>Not supported</td>
<td>4.0 (4.0)</td>
<td>Not supported</td>
<td>(Yes)</td>
<td>Not supported</td>
</tr>
</tbody>
</table>
<h2 id="可勾选组件"><a href="#可勾选组件" class="headerlink" title="可勾选组件"></a>可勾选组件</h2><p>可勾选组件指的是可以通过点击改变其状态的组件。有两种可勾选组件：复选框和单选框，它们都可以通过<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-checked" target="_blank" rel="external"><code>checked</code></a>属性来指示该组件是否默认被勾选。</p>
<p>值得注意的是，这些组件的行为和其他表单组件不太一样。对大多数表单组件而言，表单提交后所有具有<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-name" target="_blank" rel="external"><code>name</code></a>属性的组件都会被提交，即使它们没有获值。但对于可勾选组件，它们的值却只有在它们被勾选之后才会提交，如果没有勾选，则不会提交东西，包括其<code>name</code>属性。</p>
<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>复选框由设置了<code>type</code>值为<code>checkbox</code>的<code>&lt;input&gt;</code>元素创建：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的HTML创建的复选框是默认勾选的。</p>
<p><img src="https://developer.mozilla.org/files/4595/all-checkbox.png" alt=""></p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”checkbox”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”checkbox”</td>
<td>1.0</td>
<td>1.0 (1.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><p>单选框由设置了<code>type</code>值为<code>radio</code>的<code>&lt;input&gt;</code>元素创建：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>&gt;</span></div></pre></td></tr></table></figure>
<p>几个单选框可以被绑定在一起，只要它们使用相同的<code>name</code>属性值，它们就被视为同一组选框。而在同一组中，只有一个选框能被勾选；这意味着其中一个勾选之后，其他所有选框会自动不勾选。</p>
<p>到了表单提交时，也只有被勾选的值会被提交；如果没有勾选，整组单选框会被认为处于未知状态且不会随表单提交。</p>
<p><img src="https://developer.mozilla.org/files/4597/all-radio.png" alt=""></p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”radio”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”radio”</td>
<td>1.0</td>
<td>1.0 (1.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>HTML表单中，有三种按钮：</p>
<p><strong>提交按钮</strong><br>用于发送表单数据给服务器。<br><strong>重置按钮</strong><br>用于重置所有表单组件为默认值。<br><strong>匿名按钮</strong><br>这种按钮不自带特效，但也可以通过Javascript代码进行自定义。</p>
<p>按钮可以由<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button" target="_blank" rel="external"><code>&lt;button&gt;</code></a>元素或<code>&lt;input&gt;</code>元素创建。<code>type</code>属性的值会指定将呈现何种按钮。</p>
<h3 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    This a <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>submit button<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"This is a submit button"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></div><div class="line">    This a <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>reset button<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"This is a reset button"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="匿名按钮"><a href="#匿名按钮" class="headerlink" title="匿名按钮"></a>匿名按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">    This a <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>anonymous button<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"This is a anonymous button"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通常使用<code>&lt;button&gt;</code>或<code>&lt;input&gt;</code>创建的按钮行为都是一样的。然而也存在几点不同：</p>
<ul>
<li>就如先前的例子所示，<code>&lt;button&gt;</code>元素允许你使用HTML内容作为其标记内容，但<code>&lt;input&gt;</code>元素只接受纯文本内容。</li>
<li>使用<code>&lt;button&gt;</code>元素是，可以采用和按钮中内容不一样的值。（但在IE8以下的浏览器中这是不可行的）</li>
</ul>
<p><img src="https://developer.mozilla.org/files/4599/all-buttons.png" alt=""></p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”number”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”reset”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”button”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>3</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr>
<td><code>&lt;button&gt;</code></td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>(Yes)(Buggy before IE8)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”number”</td>
<td>1.0</td>
<td>1.0 (1.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”reset”</td>
<td>1.0</td>
<td>1.0 (1.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”button”</td>
<td>1.0</td>
<td>1.0 (1.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;button&gt;</code></td>
<td>1.0</td>
<td>1.0 (1.0)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h2 id="高级表单组件"><a href="#高级表单组件" class="headerlink" title="高级表单组件"></a>高级表单组件</h2><p>这一系列的组件能让用户输入一些复杂或高度结构化的数据，包括精确或近似数字、日期和时间、颜色。</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>数字组件是通过<code>type</code>设置为<code>number</code>的<code>&lt;input&gt;</code>元素创建的。该控件看起来像文本框，但却只允许输入浮点数，而且通常还会带有几个按钮来增加或减少组件的值。</p>
<p>我们可以通过设置<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external"><code>min</code></a>和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external"><code>max</code></a>属性来约束该组件的值。也可以通过<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step" target="_blank" rel="external"><code>step</code></a>属性来指定该组件的增加和减少按钮的改变量。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"2"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述代码创建了一个取值被限制在1到10之间的数字组件，其增加和减少按钮的改变量为2。</p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”number”</td>
<td>11.0</td>
<td>Not supported</td>
<td>10(recognized but no UI)</td>
<td>(Yes)</td>
<td>5.2</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”number”</td>
<td>2.3</td>
<td>Not supported</td>
<td>Not supported</td>
<td>(Yes)</td>
<td>4.0</td>
</tr>
</tbody>
</table>
<h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h3><p>另一种选取数字的方法是使用滑块。由于操作滑块看起来不及文本框输入数字精确，所以滑块常用于选取对值的要求不是很精确的数字。</p>
<p>滑块组件是通过<code>type</code>设置为<code>range</code>的<code>&lt;input&gt;</code>元素创建的。适当配置滑块是很重要的，强烈推荐你设置其<code>min</code>, <code>max</code>, <code>step</code>属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"5"</span> <span class="attr">step</span>=<span class="string">"1"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>示例中创建了一个取值被限制在1到5之间的滑块组件，其增加和减少按钮的改变量分别为+1和-1。</p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”range”</td>
<td>5.0</td>
<td>23.0</td>
<td>10</td>
<td>10.62</td>
<td>4.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”range”</td>
<td>Not supported</td>
<td>23.0</td>
<td>Not supported</td>
<td>10.62</td>
<td>5.0</td>
</tr>
</tbody>
</table>
<h3 id="日期和时间选择器"><a href="#日期和时间选择器" class="headerlink" title="日期和时间选择器"></a>日期和时间选择器</h3><p>收集日期和时间的值在之前往往是web开发者的噩梦。现在HTML5通过引入一个特殊的控件用于处理这类特定的数据，带来了一些新改进。</p>
<p>日期和时间控件是通过<code>type</code>设置为特定值的<code>&lt;input&gt;</code>元素创建的。因为你可能希望能收集日期、时间或者两者兼有，所以它提供了几个不同的<code>type</code>属性值：</p>
<h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>创建展示和选取日期、但不含具体时间的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p>创建展示和选取日期、并带有UTC时区时间的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="datetime-local"><a href="#datetime-local" class="headerlink" title="datetime-local"></a>datetime-local</h4><p>创建展示和选取日期、并带有任何指定时区时间的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="month"><a href="#month" class="headerlink" title="month"></a>month</h4><p>创建展示和选取月份、并带有年份的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"month"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>创建展示和选取一个时间值的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="week"><a href="#week" class="headerlink" title="week"></a>week</h4><p>创建展示和选取周数、并带其年份的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>所有的日期与时间控件都可以使用<code>max</code>和<code>min</code>属性进行约束：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myDate"</span>&gt;</span>When are you available this summer?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">min</span>=<span class="string">"2013-06-01"</span> <span class="attr">max</span>=<span class="string">"2013-08-31"</span> <span class="attr">id</span>=<span class="string">"myDate"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”date”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”datetime”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”datetime-local”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”month”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”time”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”week”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”date”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>5.0</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”datetime”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”datetime-local”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”month”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”time”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code>.type=”week”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>10.62</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>警告：日期和时间组件都是很新的组件，甚至那些声称支持它们的浏览器也常有重大的用户界面问题，这让这些组件很难被使用。所以在发布你的内容之前，请先彻底地在不同的浏览器上测试一遍！</p>
</blockquote>
<h3 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h3><p>通常颜色都有点难于处理，因为有许多种方式来表示它们：RGB值（十进制或十六进制）、HSL值、关键字等等。而颜色选择器能方便用户以文本或图形的形式选择颜色。</p>
<p>颜色组件是通过<code>type</code>设置为<code>color</code>的<code>&lt;input&gt;</code>元素创建的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”color”</td>
<td>21.0</td>
<td>Not supported</td>
<td>Not supported</td>
<td>11.01</td>
<td>Not supported</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”color”</td>
<td>Not supported</td>
<td>Not supported</td>
<td>Not supported</td>
<td>?</td>
<td>Not supported</td>
</tr>
</tbody>
</table>
<h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><p>还有一些组件难以被归类，因为它们拥有一些非常特殊的行为；但其实它们也是很有用的。</p>
<h3 id="文件选择器"><a href="#文件选择器" class="headerlink" title="文件选择器"></a>文件选择器</h3><p>HTML表单可以向服务器发送文件，关于这点，在<a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a>一文中有详细的讨论。文件选择器组件是让用户选择一或多个文件进行发送的一种方式。</p>
<p>文件选择器组件是通过<code>type</code>设置为<code>file</code>的<code>&lt;input&gt;</code>元素创建的。被接收的文件类型可通过使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept" target="_blank" rel="external"><code>accept</code></a>属性进行指定；此外，若你想让用户选择不止一个文件，可以添加<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple" target="_blank" rel="external"><code>multiple</code></a>属性。</p>
<p>在下面的例子中，我们创建了一个接收图像图形文件的文件选择器，它也允许用户选择多个文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">multiple</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”file”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>3.02</td>
<td>1.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”file”</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>?</td>
</tr>
</tbody>
</table>
<h3 id="隐藏内容"><a href="#隐藏内容" class="headerlink" title="隐藏内容"></a>隐藏内容</h3><p>有时因为技术原因，我们得让一些随表单发送的数据对用户不可见。要这样做，你可以在你的表单中添加一个隐藏元素，只需使用<code>type</code>设置为<code>hidden</code>的<code>&lt;input&gt;</code>元素。</p>
<p>若你创建了这种元素，还必须设置其<code>name</code>和<code>value</code>属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"timestamp"</span> <span class="attr">value</span>=<span class="string">"1286705410"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”hidden”</td>
<td>1.0</td>
<td>1.0 (1.7 or earlier)</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”hidden”</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h3 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h3><p>图像按钮控件表面看起来就像是<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="external"><code>&lt;img&gt;</code></a>元素，除非被用户点击，它才会具有提交按钮的行为（参见上文）。</p>
<p>图像按钮是通过<code>type</code>设置为<code>image</code>的<code>&lt;input&gt;</code>元素创建的。该元素支持与<code>&lt;img&gt;</code>元素相同的属性集，且还加上了表单按钮支持的那些属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">alt</span>=<span class="string">"Click me!"</span> <span class="attr">src</span>=<span class="string">"my-img.png"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"30"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>若图像按钮被用于提交表单，它不会提交它的值，而是提交在图片上点击的X和Y坐标（坐标是相对图像而言的，取左上角为(0, 0)坐标）。坐标以两个键/值对的形式发送，X值的键名是<code>name</code>属性的值加上字符串”.x”，Y值的键名是<code>name</code>属性的值加上字符串”.y”。这样就提供了一种便于创建“热点地图”的方式。</p>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://foo.com"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 译注：原文是value="pos"，明显是错的，下面已改正 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">name</span>=<span class="string">"pos"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"map.png"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当你点击这个表单的图像时，你会发送出如下URL：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//foo.com?pos.x=123&amp;pos.y=456</span></div></pre></td></tr></table></figure>
<p><code>pos.x</code>和<code>pos.y</code>参数的值取决于你点击了图片上哪个地方。这些数据的发送和检索将在<a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a>一文中讨论。</p>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”image”</td>
<td>1.0</td>
<td>1.0</td>
<td>2</td>
<td>1.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code>.type=”image”</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
<td>(Yes)</td>
</tr>
</tbody>
</table>
<h3 id="度量和进度条"><a href="#度量和进度条" class="headerlink" title="度量和进度条"></a>度量和进度条</h3><p>度量和进度条是数字值的可视化表示。</p>
<p>进度条代表一个随时间变化、直至达到由<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-max" target="_blank" rel="external"><code>max</code></a>属性指定的最大值的值。进度条使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress" target="_blank" rel="external"><code>&lt;progress&gt;</code></a>元素进行创建，<code>&lt;progress&gt;</code>元素的内容用于让不支持该元素的浏览器作降级处理、也让无障碍设备能读出来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"75"</span>&gt;</span>75/100<span class="tag">&lt;/<span class="name">progress</span>&gt;</span></div></pre></td></tr></table></figure>
<p>度量条表示一个处于由<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-min" target="_blank" rel="external"><code>min</code></a>和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-max" target="_blank" rel="external"><code>max</code></a>值划分的范围的固定值。该值被渲染为一个长条，长条使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter" target="_blank" rel="external"><code>&lt;meter&gt;</code></a>元素进行创建，<code>&lt;meter&gt;</code>元素的内容用于让不支持该元素的浏览器作降级处理、也让无障碍设备能读出来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"75"</span> <span class="attr">low</span>=<span class="string">"33"</span> <span class="attr">high</span>=<span class="string">"66"</span> <span class="attr">optimum</span>=<span class="string">"50"</span>&gt;</span>75<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></div></pre></td></tr></table></figure>
<p>而要知道该长条长什么样子，我们还得比较它的<code>value</code>值与另外几个值：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-low" target="_blank" rel="external"><code>low</code></a>和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-high" target="_blank" rel="external"><code>high</code></a>值将一个长条的范围划分了三个部分：<ul>
<li>范围较低的那部分位于<code>min</code>和<code>low</code>之间（含这两个值）。</li>
<li>范围的中间部分位于<code>low</code>和<code>high</code>之间（不含这两个值）。</li>
<li>范围较高的那部分位于<code>high</code>和<code>max</code>之间（含这两个值）。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-optimum" target="_blank" rel="external"><code>optimum</code></a>值定义了<code>&lt;meter&gt;</code>元素的最佳值。结合<code>low</code>和<code>high</code>值，就能确定一个长条范围的哪个部分是最佳的：<ul>
<li>若<code>optimum</code>值位于范围较低的那部分，则较低的那部分是最佳的部分，中间部分是平均的部分，较高的那部分则是最差的部分。</li>
<li>若<code>optimum</code>值位于范围的中间部分，则较低的那部分是平均的部分，中间部分是最佳的部分，较高的那部分也还是平均的部分。</li>
<li>若<code>optimum</code>值位于范围较高的那部分，则较低的那部分是最差的部分，中间部分是平均的部分，较高的那部分是最佳的部分。</li>
</ul>
</li>
</ul>
<p>所有实现了<code>&lt;meter&gt;</code>元素的浏览器都会使用上述的值来改变度量长条的颜色：</p>
<ul>
<li>若现在的值位于范围最佳的部分，则长条显示为绿色。</li>
<li>若现在的值位于范围平均的部分，则长条显示为黄色。</li>
<li>若现在的值位于范围最差的部分，则长条显示为红色。</li>
</ul>
<p><strong>兼容性表</strong></p>
<table>
<thead>
<tr>
<th>属性（桌面端）</th>
<th>Chrome</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;progress&gt;</code></td>
<td>6.0</td>
<td>6.0(6.0)</td>
<td>10</td>
<td>10.6</td>
<td>5.2</td>
</tr>
<tr>
<td><code>&lt;meter&gt;</code></td>
<td>6.0</td>
<td>16.0(16.0)</td>
<td>Not supported</td>
<td>11.0</td>
<td>5.2</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性（移动端）</th>
<th>Android</th>
<th>Firefox (Gecko)</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;progress&gt;</code></td>
<td>Not supported</td>
<td>6.0(6.0)</td>
<td>Not supported</td>
<td>11.0</td>
<td>?</td>
</tr>
<tr>
<td><code>&lt;meter&gt;</code></td>
<td>Not supported</td>
<td>16.0(16.0)</td>
<td>Not supported</td>
<td>11.0</td>
<td>?</td>
</tr>
</tbody>
</table>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>若要深入了解表单组件的不同，这里还提供了一些你应该看看的有用资源：</p>
<ul>
<li><a href="http://wufoo.com/html5/" target="_blank" rel="external">The Current State of HTML5 Forms</a> by Wufoo</li>
<li><a href="http://www.quirksmode.org/html5/inputs.html" target="_blank" rel="external">HTML5 Tests - inputs</a> on Quirksmode (也可<a href="http://www.quirksmode.org/html5/inputs_mobile.html" target="_blank" rel="external">用于移动端浏览器</a>)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>百度面试的总结</title>
    <link href="http://levonlin.info/2016/05/18/%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://levonlin.info/2016/05/18/百度面试的总结/</id>
    <published>2016-05-18T12:10:40.000Z</published>
    <updated>2017-01-20T16:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天接到百度的电话面试了，人生中第一次电话面试啊，感觉有很多做不好的地方，必须来好好总结整理下。</p>
<h2 id="关于面试准备"><a href="#关于面试准备" class="headerlink" title="关于面试准备"></a>关于面试准备</h2><p>之前由于一直没有消息，还以为自己笔试没通过来着，直到昨天晚上偶然翻了下才知道自己被安排面试了。而且一直都没有好好刷过面试题，本来还想趁这几天好好查漏补缺下的，结果今天就来了电话。</p>
<p>而在这种情况下第一个电话我还漏接了T_T…，这种情况下回拨回去是根本就打不通的，幸好下午面试官再打来了一遍。然而此时我又犯了个错，原以为在图书馆楼梯间里接电话应该没问题，结果偏偏那时人来人往，在嘈杂的环境中本身就听不太清，同时好像面试官感冒得有点严重，所以很多问题都得重复几遍才听得清，这样双方都挺累的，严重影响面试效果。</p>
<p>总之面试的准备挺糟糕的，事后好好反思了下，其实在知道面试那一刻就要好好准备、同时保持通信畅通，这种电话要是错过了只能干着急。至于面试环境，好的环境必须保证安静无干扰，同时还得准备在面前准备好纸笔以备不时之需；此外最好备点水喝，在电话里长谈近一个小时免不了口干舌燥、影响发挥的。</p>
<h2 id="关于面试谈话"><a href="#关于面试谈话" class="headerlink" title="关于面试谈话"></a>关于面试谈话</h2><p>前面说了环境很嘈杂，说话得重复，这就导致在紧张的面试过程中情绪有点急躁，估计降低给面试官的印象分了吧。</p>
<p>而且在谈话过程中，若需要思考、或者回答完成时，应该有所反馈。要不然你突然间就不说话，不仅气氛很尴尬，而且面试官还得来不断确认你是否还在线，这也会拉低印象分的。</p>
<p>最后在谈话结束时，还忘了问结果何时出来、后续面试安排等问题，没有好好利用好面试的时间显示对该工作的关心、显得过于随意了。</p>
<h2 id="面试的内容"><a href="#面试的内容" class="headerlink" title="面试的内容"></a>面试的内容</h2><p>一开始先自我介绍一番，然后问我做过什么项目，我就把我简历上写的念了一遍。</p>
<p>然后就直入主题了，问题以基础题为主吧，认真把<a href="https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0001" target="_blank" rel="external">百度IFE的第一期</a>做下就基本涵盖了，当然。顺带还插了点前端工程化、<code>node</code>和<code>es6</code>的内容。</p>
<p>首先问的都是css上的问题，第一个就是<code>position</code>有几个值，不就是<code>absolute</code>, <code>relative</code>, <code>static</code>, <code>fixed</code>吗？最多再加个万金油<code>inherit</code>。但是面试官说还有，然而我闻所未闻，回来查了下，发现css3里居然还有个<code>sticky</code>值。该属性在其容器尚在视口内时，相当于<code>relative</code>，而当容器滚动出视口时其行为又相当于<code>fixed</code>，不过目前只有火狐和Safari可以用。。。</p>
<p>接下来是问居中的处理，分几种情况：已知div宽高、div宽高未知、文本元素居中。我把我知道的方式全说了一遍，但div高度未知时的垂直居中我就只能想想出flexbox布局的<code>align-item</code>了，但是面试官说还有，我就傻了。万没想到平时不怎么用的<code>transform</code>用百分比值时也有此奇效，一直只把它和<code>margin</code>负值一起记作居中微调的工具而已。</p>
<p>再接下来给了一个场景：页面内有许多背景图，问如何优化。一开始我有点不知所措，然后面试官提醒了下雪碧图，这下才我才恍然大悟，赶紧把原理和我知道的雪碧图优点诸如减少http请求、在老旧浏览器上模拟css圆角或阴影等统统说了一遍。然后面试官再问：“知道字体文件吗？”，这里所谓字体点含糊不清，不过由于刚问了雪碧图，我就猜是在问字体图标了，便把字体图标的缩放不失真、只支持纯色、文件小、可多个图标合并为一个文件特点说了，面试官也没做回应，估计猜对了吧。</p>
<p>然后问我一段文字太长如何把超出部分用几个点替代，但我忘了使用哪个属性了。其实就是设置一个<code>text-overflow:ellipsis</code>；然而这样还不够，必须按实际情况搭配其他属性。如果文字要求多行那情况就复杂了，可参见<a href="http://www.zhangxinxu.com/wordpress/2009/09/%E5%85%B3%E4%BA%8E%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E6%BA%A2%E5%87%BA%E7%94%A8%E7%82%B9%E7%82%B9%E7%82%B9-%E7%9C%81%E7%95%A5%E5%8F%B7%E8%A1%A8%E7%A4%BA/" target="_blank" rel="external">张鑫旭文章中给出的方法</a>。但如果文字只要求单行，采用如下样式即可：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">xx</span> &#123;</div><div class="line"> <span class="attribute">overflow</span>:hidden;</div><div class="line"> <span class="attribute">white-space</span>:nowrap;</div><div class="line"> <span class="attribute">text-overflow</span>:ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着再问了个a元素有几个伪类，当时回答少个了<code>link</code>，所以还是得罗列下备忘：</p>
<ul>
<li>a:link - 普通的、未被访问的链接</li>
<li>a:hover - 鼠标指针位于链接的上方</li>
<li>a:active - 链接被点击的时刻</li>
<li>a:visited - 用户已访问的链接</li>
<li>a:target - 向链接访问的锚点元素添加样式</li>
</ul>
<p>预处理器稍微提及了下，因为我说只是了解点<code>sass</code>，便没有细问。</p>
<p>差点忘了，还问了清除浮动，这个直接上<code>clearfix</code>大法呀。</p>
<p>然后就轮到js了，首先要我说出数组和字符串各自带有的方法，这个虽然经常用但是要集中报出来还是得想一想的，最好就想一想平时处理数组和字符串的各种场景，需求只要出现、那解决方法就自然冒出来了。</p>
<p>下一个问题是对是否用过js的模块化，然而我只能说我对模块化的认识尽停留在node下用过的<code>exports</code>、<code>require</code>（标准叫CommonJS吧）。听到我在node下用过，面试官便再问了下：“你没在浏览器环境下用过吗？”，真没有，我只能如实说就听过两个词RequireJS（AMD标准）、seajs（CMD标准），平时开发小打小闹，还没深入模块化这么高端的东西。</p>
<p>然后还是工程化的问题，问构建工具的使用。因为真没用过，这个也只能报名词：grunt、gulp、webpack…</p>
<p>接下来问我是否了解XSS，然而我只记得这是种攻击方式（中文意思都想不起来了，叫跨站脚本攻击），安全方面只是偶尔有点好奇去整点hacker的行为，也没深入研究过，囧。</p>
<p>回到js，问如何实现继承，有好多种方法吧，可以有绑定父类型的构造函数、原型链继承、组合式继承、原型式继承、寄生式继承、寄生组合式继承等等，平常用的多的也就是原型链继承或组合式继承。</p>
<p>接着问了<code>call</code>和<code>apply</code>的作用、事件冒泡、事件委托等，比较基础，也没啥好说。不过当面试官问我老版本IE下的事件是否有<code>event</code>对象时，我答不上来了，印象中得通过<code>window</code>来调用才行，回来一查果然是这样。。。</p>
<p>接下来是<code>ajax</code>方面的问题，因为一直做静态页面，这竟成我的短板了。首先问跨域的解决方案，只记得高程上列了不少方法，有点印象的也就是<code>CORS</code>、<code>JSONP</code>了，现在查了下，还有图像PING、Comet（有长轮询、http流两种方式，以SSE为代表）、Web Sockets等技术。然后问<code>ajax</code>有几种状态，光知道http的状态了，而这个真答不上来，罗列如下：</p>
<ul>
<li>0：未初始化。未调用<code>open()</code>方法。</li>
<li>1：启动。已调用<code>open()</code>方法，未调用<code>send()</code>方法。</li>
<li>2：发送。已调用<code>send()</code>方法，未调收到响应。</li>
<li>3：接收。已接收到部分响应。</li>
<li>4：完成、已接收到全部响应。</li>
</ul>
<p>接下来问我对node的使用、及es6的了解程度，这两个我现在还处于入门阶段，也实在没什么好说，但也是该找时间深入学习下了，现在做前端不了解这个都不能和人谈笑风生。。。</p>
<p>至于jquery，面试官问我有没有看过源码，我说我只是偶尔偷懒用用选择器，不太依赖框架，于是他就问我jquery选择器中<code>eq</code>和<code>get</code>，<code>eq</code>简单，但<code>get</code>是什么选择器？现在查了下，觉得他应该是问我jquery对象<code>eq</code>和<code>get</code>方法的区别才对（答案是返回值不同，<code>eq</code>返回jquery对象，而<code>get</code>返回dom元素），只是环境太吵我听不清、而且也没用过。。。T_T</p>
<p>还问我知道哪些浏览器存储技术，也就是<code>cookie</code>、<code>sessionStorage</code>、<code>globalStorage</code>、<code>localStorage</code>。翻翻书，发现还忘了<code>IndexDB</code>这东西。</p>
<p>最后问了下我的实习的时间安排，面试就结束了。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>其实我估计面试官不是看简历（或者只看招聘系统上那个没写技能点的简历）在面试，虽然我简历上写的前端技术点都有问到，但并不是直接点出来而是在谈话中慢慢给带出来的。</p>
<p>而就这些提及的技术点来说，如果刨去面试过程中的环境等因素，因为自己面试经验和准备不足，其实对上面提及的内容回答的也不是很好：</p>
<ul>
<li>css的问题出现在细节上了解不充分</li>
<li>而原生js写了那么多题目，但其实做的都是偏应用方向的，对js主干的面向对象、闭包等知识到有点生疏了；尤其是<code>ajax</code>，因为基本没怎么做过，导致现在成为一大短板</li>
<li>对主流的jquery等框架，虽然最近正在重新了解和用起来，但还是得翻翻api才能上手，经验的缺乏这点也不是几天就能突击提升的</li>
<li>而对于新技术，往往就只是有个印象而已。</li>
</ul>
<p>所以感觉要通过有点够呛啊，但通过这次面试和上面的总结，也算是给自己提了个醒吧，接下来的学习和开发也得有点针对性了：</p>
<ul>
<li>对于基础的css和原生js还是要多看看经典著作，老老实实把基础打牢，而且要在平时的开发中尝试融入这些特性才能掌握得全面。</li>
<li>对于主流技术和框架，和上面一样，多练多攒经验才是真理。</li>
<li>由于技术来自实际的生产环境，要创造机会多了解生产环境。毕竟现在的前端可不只是切切图，而是整个web开发流程中的一环，所以得把自己当成一个web开发者而不是只守着前端，才能对实际的工作和具体业务场景有更深的体会。比如要真正掌握<code>ajax</code>，就可以把它和用<code>node.js</code>搭建后台、<code>mysql</code>操作数据库等结合起来学习；这样掌握的可就是一个web应用的开发流程，而不是仅有前端这点ajax操作，这对于你的工作，不论是想从事全栈开发还是和后端的同事沟通，想来也是大有裨益的。</li>
<li>最后对于新技术，虽然说没必要步步紧跟、也没时间步步紧跟的，但作为一个工程师怎么能丧失好奇心呢？多了解一些总不是坏事，至于何时深入使用，还是得看时机和需求吧。</li>
</ul>
<h2 id="更新：第二次电面"><a href="#更新：第二次电面" class="headerlink" title="更新：第二次电面"></a>更新：第二次电面</h2><p>没想到第二次面试隔了一天就来了，当然也就难有长足点的准备了，但是吸取上次的经验，也没犯什么低级错误。这次面试主要是考察项目经历，但我毕竟还是写静态页面比较多，能上线的应用真没怎么做过。所以面试官也只能问问简历上写的东西了，比如在IFE学习到了什么、python的学习经历、用node来做什么、以及对node和python间的比较等等。当然也还问了些技术细节上的问题，这里就把我觉得当时回答不太好的整理下：</p>
<h3 id="应对移动端高ppi屏幕："><a href="#应对移动端高ppi屏幕：" class="headerlink" title="应对移动端高ppi屏幕："></a>应对移动端高ppi屏幕：</h3><p>高像素密度会导致物理像素和css像素间的比值（即缩放比window.devicePixelRatio = dip / px）变大，这样就让页面上的内容看起来缩小了。要解决这个问题，最常想到的思路是不使用<code>px</code>做长度单位而使用相对单位<code>rem</code>，只要针对不同屏幕去修改html元素的<code>font-size</code>属性即可。</p>
<p>对那些缩放不改变清晰度的内容，上面采用相对单位的方法是没有问题的。但对于高清图片，这样随便缩放大小便失去了高清屏的意义了。而使用html5的<code>picture</code>标签就解决该问题，常用格式如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"图像文件名, n倍像素密度图像文件名 nx"</span> <span class="attr">media</span>=<span class="string">"媒体查询"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该标签会根据媒体查询结果按需下载我们准备好的不同像素密度图片。</p>
<h3 id="解析JSON字符串"><a href="#解析JSON字符串" class="headerlink" title="解析JSON字符串"></a>解析JSON字符串</h3><p>当然是用<code>JSON.parse</code>了，但面试官还问我对老旧浏览器如何实现，当时思路有点混乱没讲明白。翻了翻高程，发现简单用个<code>eval</code>就可以了，因为JSON本身就是用的js语法嘛。如果觉得用<code>eval</code>不优雅，那就使用老道亲自写的<a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="external">js脚本</a>吧。</p>
<h3 id="关于HTTP协议"><a href="#关于HTTP协议" class="headerlink" title="关于HTTP协议"></a>关于HTTP协议</h3><p>只是有点印象，全称超文本传输协议，无连接、无状态等。至于为什么是无连接、无状态，就不清楚了，摘了计算机网络课本上的解释：</p>
<blockquote>
<p>超文本传送协议 HTTP (HyperText Transfer Protocol)是一个应用层协议，它使用 TCP 连接进行可靠的传送。 </p>
<p>HTTP 的主要特点 :</p>
<ol>
<li>面向事务的客户服务器协议。</li>
<li>无状态的协议</li>
<li>无连接的协议，虽然它使用了面向连接的 TCP 向上提供的服务。</li>
</ol>
<p>HTTP 有两类报文：<br>请求报文——从客户向服务器发送请求报文。<br>响应报文——从服务器到客户的回答。<br>报文由三个部分组成，即开始行、首部行和实体主体。</p>
</blockquote>
<p>请求报文的一些方法：</p>
<blockquote>
<p>OPTION： 请求一些选项的信息<br>GET： 请求读取由 URL所标志的信息<br>HEAD： 请求读取由 URL所标志的信息的首部<br>POST： 给服务器添加信息（例如，注释）<br>PUT： 在指明的 URL下存储一个文档<br>DELETE： 删除指明的 URL所标志的资源<br>TRACE： 用来进行环回测试的请求报文<br>CONNECT： 用于代理服务器</p>
</blockquote>
<p>至于各种响应码的含义，也附送如下：</p>
<blockquote>
<p>1xx 表示通知信息，如请求收到了或正在进行处理。<br>2xx 表示成功，如接受或知道了。<br>3xx 表示重定向，表示要完成请求还必须采取进一步的行动。<br>4xx 表示客户的差错，如请求中有错误的语法或不能完成。<br>5xx 表示服务器的差错，如服务器失效无法完成请求。</p>
</blockquote>
<h3 id="get和post请求的区别"><a href="#get和post请求的区别" class="headerlink" title="get和post请求的区别"></a>get和post请求的区别</h3><p>经典的面试题了，上面也稍微提及了下，摘个比较全点的答案：</p>
<blockquote>
<p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符。<br>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。<br>也就是说Get是通过地址栏来传值，而Post是通过提交表单来传值。</p>
</blockquote>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>也是经典面试题，写出来也不难：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newArr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> , len = arr.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (newArr.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</div><div class="line">            newArr.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何获取浏览器UA"><a href="#如何获取浏览器UA" class="headerlink" title="如何获取浏览器UA"></a>如何获取浏览器UA</h3><p>记错了，应该是<code>navigator.userAgent</code>。与此相关的还有<code>navigator.appCodeName</code>（基本都是<code>Mozilla</code>）、<code>navigator.appVersion</code>（获取UA中<code>Mozilla</code>后面的部分）等等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天接到百度的电话面试了，人生中第一次电话面试啊，感觉有很多做不好的地方，必须来好好总结整理下。&lt;/p&gt;
&lt;h2 id=&quot;关于面试准备&quot;&gt;&lt;a href=&quot;#关于面试准备&quot; class=&quot;headerlink&quot; title=&quot;关于面试准备&quot;&gt;&lt;/a&gt;关于面试准备&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="求职" scheme="http://levonlin.info/categories/%E6%B1%82%E8%81%8C/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="求职" scheme="http://levonlin.info/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>原生js练习题---杂项</title>
    <link href="http://levonlin.info/2016/05/14/%E5%8E%9F%E7%94%9Fjs%E7%BB%83%E4%B9%A0%E9%A2%98-%E6%9D%82%E9%A1%B9/"/>
    <id>http://levonlin.info/2016/05/14/原生js练习题-杂项/</id>
    <published>2016-05-14T07:17:44.000Z</published>
    <updated>2017-01-30T06:11:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>最后一篇了，来做几个查漏补缺的小练习吧：</p>
<h2 id="0x1-js条件注释-仅IE执行"><a href="#0x1-js条件注释-仅IE执行" class="headerlink" title="0x1 js条件注释 仅IE执行"></a>0x1 js条件注释 仅IE执行</h2><p>实现效果：</p>
<p></p><p data-height="300" data-theme-id="17410" data-slug-hash="zqXpVG" data-default-tab="result" data-user="levonlin" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/levonlin/pen/zqXpVG/" target="_blank" rel="external">7-01js条件注释 仅IE执行</a> by levonlin (<a href="http://codepen.io/levonlin" target="_blank" rel="external">@levonlin</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>这是兼容老旧IE的的常用手段之一，代码里实现了两种方式：</p>
<p>一是js里的条件注释，可在IE10及以下使用。形如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*@cc_on</span></div><div class="line">    @if (@_jscript)</div><div class="line">        // 注释之内，给IE10及以下执行的javascript</div><div class="line">    @else*/</div><div class="line">        <span class="comment">// 注释之外，给IE11及非IE浏览器执行的javascript</span></div><div class="line">    <span class="comment">/*@end</span></div><div class="line">@*/</div></pre></td></tr></table></figure>
<p>不过貌似codepen会把js里的注释全去掉，这里看不出效果。。。</p>
<p>二是html里的条件注释，只能在IE9及以下使用。通过在注释内添加<code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>标签用于给IE指定css或js，还可指定IE版本号，形如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if [! / lt / gt / lte / gte] IE [版本号]]&gt;</span></div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h2 id="0x2-js-实现进制转换"><a href="#0x2-js-实现进制转换" class="headerlink" title="0x2 js 实现进制转换"></a>0x2 js 实现进制转换</h2><p>实现效果：</p>
<p></p><p data-height="300" data-theme-id="17410" data-slug-hash="aNrbLG" data-default-tab="result" data-user="levonlin" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/levonlin/pen/aNrbLG/" target="_blank" rel="external">7-02js 实现进制转换</a> by levonlin (<a href="http://codepen.io/levonlin" target="_blank" rel="external">@levonlin</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>虽然可以自己实现，但其实js已经自带了进制转换的方法：</p>
<ul>
<li>n进制转十进制使用<code>parseInt(num, base)</code>方法，第二个参数为原来的数制。</li>
<li>十进制转n进制使用<code>toString(base)</code>方法，参数为目标数制。</li>
</ul>
<p>用起来是蛮简单的，但要注意到两者间的区别：</p>
<ol>
<li>调用对象不同，<code>parseInt</code>是个全局方法；<code>toString()</code>则必须通过<code>Number</code>对象而不是基本的数字类型的调用，才能实现进制转换，使用诸如<code>10.toString(2)</code>是会报错的。</li>
<li>返回类型不同，<code>parseInt</code>返回数字而<code>toString()</code>返回字符串。</li>
<li>两者虽然都只支持2至36进制，但在传入超出这个范围的进制时却有不同的处理，其中<code>parseInt</code>直接返回NaN，而<code>toString()</code>会报<code>Uncaught RangeError</code>。</li>
</ol>
<h2 id="0x3-js-base64加密转换"><a href="#0x3-js-base64加密转换" class="headerlink" title="0x3 js base64加密转换"></a>0x3 js base64加密转换</h2><p>实现效果：</p>
<p></p><p data-height="300" data-theme-id="17410" data-slug-hash="JXqepv" data-default-tab="result" data-user="levonlin" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/levonlin/pen/JXqepv/" target="_blank" rel="external">7-03js base64加密转换</a> by levonlin (<a href="http://codepen.io/levonlin" target="_blank" rel="external">@levonlin</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>这题其实分为两个部分，一个是base64加解密、一个是将图片转为base64加密的dataURI。</p>
<p><a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="external">关于base64</a></p>
<p>第一部分很简单，因为现在的浏览器都已经自带了base64的加解密的功能，不用再自己编写js实现了。其中，加密使用<code>btoa()</code>，解密使用<code>atob</code>。而如果只要加密某个子串就再加个正则匹配出来即可。</p>
<p>至于第二部分，需要使用html5的File Api。这个api有个比较固定的使用模式：</p>
<ul>
<li>获取文件集合：首先监听<code>&lt;input type=&quot;file&quot;&gt;</code>元素的<code>change</code>事件获取上传文件的集合<code>files</code>；</li>
<li>获取文件属性：<code>files</code>是由一系列File对象组成的，所以接下来可以通过File对象的<code>type</code>、<code>size</code>、<code>name</code>、<code>lastModifideDate</code>属性来获取文件的属性；</li>
<li>保存文件内容：只靠File对象的属性并不能直接读取文件的内容，而是要借助一个<code>FileReader</code>对象来实现。<code>FileReader</code>对象提供了几种读取文件数据的方法，其中就有我们需要的<code>readAsDataURL</code>方法，该方法会将文件内容转为data URI的形式存放于<code>FileReader</code>对象的<code>result</code>属性中。至于其他的读取方法，可参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">这个</a>。</li>
<li>获取文件内容：利用<code>FileReader</code>读取文件后我们就可以在其<code>result</code>属性中获取文件内容了。但由于文件读取是个异步的操作，所以我们还需要借助<code>FileReader</code>对象的<code>progress</code>、<code>error</code>、<code>load</code>等事件，才能从<code>result</code>属性中获取完整的文件内容。</li>
</ul>
<p>当然，这里获取的文件内容只是图片的data URI，要显示图片还得把URI赋给<code>img</code>元素的<code>src</code>属性。关于data URI的介绍，可参见我写过的<a href="http://levonlin.info/2015/11/19/data-URI%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/">data-URI及其应用</a>。</p>
<h2 id="0x4-正则应用练习"><a href="#0x4-正则应用练习" class="headerlink" title="0x4 正则应用练习"></a>0x4 正则应用练习</h2><p>验证QQ号码的正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">4</span>, <span class="number">10</span>&#125;$/</div></pre></td></tr></table></figure>
<p>就当了解下目前QQ号的特点：</p>
<ul>
<li>以1到9开头</li>
<li>总共5至11位</li>
</ul>
<p>再附赠个<a href="http://pandoraui.github.io/jquery-chm/regexp.html" target="_blank" rel="external">正则速查表</a>。</p>
<h2 id="0x5-操作cookie及提取数据"><a href="#0x5-操作cookie及提取数据" class="headerlink" title="0x5 操作cookie及提取数据"></a>0x5 操作cookie及提取数据</h2><p>原题的网页不见了，附上高程里的<code>cookieUtil</code>对象吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CookieUtil = &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>,</div><div class="line">            <span class="comment">// 获取名值对起始下标</span></div><div class="line">            cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</div><div class="line">            cookieValue = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</div><div class="line">            <span class="comment">// 获取名值对终止下标</span></div><div class="line">            <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>, cookieStart);</div><div class="line">            <span class="keyword">if</span> (cookieEnd) &#123;</div><div class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 截出并解码</span></div><div class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cookieValue;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value);</div><div class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> Data) &#123;</div><div class="line">            cookieText += <span class="string">'; expires='</span> + expires.toUTCString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (path) &#123;</div><div class="line">            cookieText += <span class="string">'; path='</span> + path;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (domain) &#123;</div><div class="line">            cookieText += <span class="string">'; domain='</span> + domain;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (secure) &#123;</div><div class="line">            cookieText += <span class="string">'; secure'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.cookie = cookieText;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 使用相同的路径、域和安全选项，并且将失效时间设为过去时间以删除cookie</span></div><div class="line">    unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.set(name, <span class="string">''</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个系列做了很久了，从寒假到现在整好三个月，几乎成了每天的日常任务。期间既有对基础的巩固、也遇到过各种深坑，但都走过来一一克服了。说实话，在接触到这份习题集时，面对许多没有做过的效果，尤其是后面几个大制作，我实在很难想见自己完成它的一天。但是现在我是真真实实完成了，事实证明，有了扎实的基础、沉下心来对这些效果条分缕析，再复杂的效果也能做出来。</p>
<p>当然，做出来是一回事，做得好、写出规范优雅的代码则是另一回事。由于历史的原因、原题的实现多写得不够优雅甚至有些混乱。而我一开始就要求自己甩掉历史包袱、轻装上阵，事实上这样做虽然让自己偷了很多兼容性上的懒，但正是这样才让自己更专注于实现功能和写出更好的代码。而且我也坚信这是前端未来的发展方向，毕竟和其他领域一样，能真正流传下来、成为未来标准的，必然是优雅的最佳实践，而不是靠堆砌出来的糟糕代码。</p>
<p>至于做记录，也坚持下来了，7篇文章也算是总结了不少东西，希望还能帮到更多的人吧！</p>
<p>这个系列题目主要是针对原生js，虽然这是很重要的基础，但也只是前端知识庞杂体系中的一部分而已。前端能从单纯的切图发展为一个炙手可热的岗位，说明它本身内容就很广博，而且常变常新也是前端界的一大特点。所以仅靠自己小打小闹获得的一点浅见是不能在业界立足的，否则就要面临经验与知识面不够带来的掣肘了。接下来的日子，还是得继续强化主干上的知识点、体验和跟上新变化，以期形成综合的开发能力、构建成自己的技术栈吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后一篇了，来做几个查漏补缺的小练习吧：&lt;/p&gt;
&lt;h2 id=&quot;0x1-js条件注释-仅IE执行&quot;&gt;&lt;a href=&quot;#0x1-js条件注释-仅IE执行&quot; class=&quot;headerlink&quot; title=&quot;0x1 js条件注释 仅IE执行&quot;&gt;&lt;/a&gt;0x1 js条件注释
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>元素auto宽高的影响因素</title>
    <link href="http://levonlin.info/2016/05/13/%E5%85%83%E7%B4%A0auto%E5%AE%BD%E9%AB%98%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0/"/>
    <id>http://levonlin.info/2016/05/13/元素auto宽高的影响因素/</id>
    <published>2016-05-13T11:13:38.000Z</published>
    <updated>2017-03-13T12:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，元素在没有设置宽高的情况下，默认的宽高值都为<code>auto</code>。而这个<code>auto</code>到底是如何让元素自动拥有宽高的呢，也就是说，元素的宽度和高度到底会受到什么因素的影响？本文将通过一个例子来对这一问题一探究竟，HTML结构和初始css如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ff9</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#979797</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="元素普通流定位（position为static或relative）"><a href="#元素普通流定位（position为static或relative）" class="headerlink" title="元素普通流定位（position为static或relative）"></a>元素普通流定位（position为static或relative）</h2><h3 id="auto宽度"><a href="#auto宽度" class="headerlink" title="auto宽度"></a>auto宽度</h3><p>先看上面代码运行结果：</p>
<p><img src="http://ww4.sinaimg.cn/large/85ad0d9cgw1f3xjhpp3aqj206405sa9w.jpg" alt=""></p>
<p>再往元素里加点内容：</p>
<p><img src="http://ww4.sinaimg.cn/large/85ad0d9cgw1f3xjh9u8jjj206506c3yd.jpg" alt=""></p>
<p>所以不设置<code>position</code>属性时（也就是取默认值<code>static</code>），就如上面的运行结果所示，元素的宽度似乎会自适应于容器的宽度，而高度则和元素内容高度有关。</p>
<p>但要注意所谓的宽度自适应并不是指元素的宽度就一定会等于的容器宽度，而是指元素的<strong>宽度+左右padding+左右border+左右margin</strong>等于的容器宽度。比如下面我再给<code>.test</code>元素加上margin之后，元素的宽度可就不等于容器的宽度了：</p>
<p><img src="http://ww3.sinaimg.cn/large/85ad0d9cgw1f3xjigtzbrj206805w3yf.jpg" alt=""></p>
<p>在进一步测试极端情况：</p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjir3546j20au065jra.jpg" alt=""></p>
<p>此时元素的宽度被margin挤得不见，文本溢出了。</p>
<h3 id="auto高度"><a href="#auto高度" class="headerlink" title="auto高度"></a>auto高度</h3><p>由上文可见元素的auto高度只会一直随内容的高度在同步变化，并不会去“自适应”容器的高度，即使元素已经溢出容器：</p>
<p><img src="http://ww4.sinaimg.cn/large/85ad0d9cgw1f3xjj2eflwj205t08bjsc.jpg" alt=""></p>
<p>当然，上面只是讨论了元素内容为文本的情况，所以auto高度才这么老实地跟随内容变化。而如果内容是块级元素，虽然一般情况下auto高度还是随内容高度变化的，但若内容采用绝对定位或浮动时，就会导致我们很熟悉的“溢出”（高度塌陷）了：</p>
<p><img src="http://ww3.sinaimg.cn/large/85ad0d9cgw1f3xjjc31wyj206m06cmx3.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjjvhz4fj206906c3yf.jpg" alt=""></p>
<p>同时通过这两个例子，也可以看到auto宽度还是继续在自适应容器的宽度。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>结论就是：在默认定位的情况下，元素的auto宽度始终都会自适应于容器的宽度；而auto高度则和元素内容的高度有关，除非遇到内容浮动或绝对定位时引发的高度塌陷。</p>
<p>若采用相对定位，结果和上面也是一样的。原理也很好理解，毕竟相对定位时元素还是在原位置渲染的，只是多了个可以设置相对偏移罢了，各位可以自己试试看~</p>
<h2 id="元素绝对定位和浮动"><a href="#元素绝对定位和浮动" class="headerlink" title="元素绝对定位和浮动"></a>元素绝对定位和浮动</h2><h3 id="auto宽度-1"><a href="#auto宽度-1" class="headerlink" title="auto宽度"></a>auto宽度</h3><p>现在我们让<code>.test</code>元素绝对定位：</p>
<p><img src="http://ww2.sinaimg.cn/large/85ad0d9cgw1f3xjkeskfcj205p05u0sk.jpg" alt=""></p>
<p>再加点内容：</p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjkoyy4mj205z05xjr8.jpg" alt=""></p>
<p>只有添加了内容元素才会有宽度，显然宽度只会适应内容的宽度咯。但还有个特殊情况，就是文本内容的宽度会因为换行飘忽不定，所以当我们再加长文本长度后：</p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjkxku60j205x05wq2t.jpg" alt=""></p>
<p><code>.test</code>元素的文本居然自动换行，导致宽度适应容器了，再禁止换行看看：</p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjlbs4htj20b8066dfr.jpg" alt=""></p>
<p>嗯，在不能换行时，就还是只会适应内容的宽度。所以下面要解决的，就是文本内容的换行规则是什么，或者说文本内容的宽度受什么影响？</p>
<p>规则其实不难：在可以自动换行（<code>white-space: normal/pre-wrap/pre-line</code>）时，文本中最长的一个单词或中文字符的长度就是最小的换行单位（若设置了<code>word-break: break-all</code>甚至可以取每个字母的长度作为换行单位），这个最小的换行单位是不可分割的。在文本容器宽度不够时，文本就只会在空格或<code>-</code>等字符处自动换行，而不会去分割换行单位。这条规则是不能违背的，我们可以来弄个超长的单词看看：</p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjlo557gj208u06cdfs.jpg" alt=""></p>
<p>上面的结果说明，<code>.test</code>元素的文本确实会自动换行来让元素宽度适应容器，但也只能是在换行规则下尽力而为，不会为适应容器而去分割单词；当然，若设置<code>word-break: break-all</code>就可以“尽力”得到这样的结果了：</p>
<p><img src="http://ww1.sinaimg.cn/large/85ad0d9cgw1f3xjlx6i0qj206o06kweg.jpg" alt=""></p>
<p>而如果<code>.test</code>元素到了容器外，文本依然会换行让<code>.test</code>元素宽度“适应”容器，哪怕此时给挤压成这样：</p>
<p><img src="http://ww2.sinaimg.cn/large/85ad0d9cgw1f3xjm3cx53j20aq06e3yg.jpg" alt=""></p>
<h3 id="auto高度-1"><a href="#auto高度-1" class="headerlink" title="auto高度"></a>auto高度</h3><p>最后来看下auto高度，上面几个例子中auto高度也是一直随文本内容的高度在同步变化。而如果内容是浮动时，也应该是这样，因为设置容器绝对定位也是清除浮动的方法之一嘛：</p>
<p><img src="http://ww2.sinaimg.cn/large/85ad0d9cgw1f3xjmc9umcj2066065dfq.jpg" alt=""></p>
<p>但当内容是绝对定位时，还是会溢出，而且因为内容溢出导致宽度也没了：</p>
<p><img src="http://ww3.sinaimg.cn/large/85ad0d9cgw1f3xjmiv3qhj205z060t8m.jpg" alt=""></p>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>综上，结论就是：</p>
<ol>
<li>内容为纯文本的元素绝对定位时，则其文本会尽量尝试换行以让元素的auto宽度适应容器的宽度。</li>
<li>而若元素内容只是定宽的块级元素，就不存在这种auto宽度变来变去的情况。且当内容是绝对定位或浮动时，不会让元素的高度塌陷。</li>
<li>当元素内容既有纯文本又有块级元素时，显然就得比较两者谁更宽，元素的auto宽度最终由最宽者决定。</li>
<li>auto高度只和元素的内容的总高度有关，除非遇到内容绝对定位时引发的高度塌陷。</li>
</ol>
<p>同样，经过验证，<code>.test</code>采用浮动定位时，结论和上面讨论的绝对定位是一样的。</p>
<h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><h3 id="关于表单元素"><a href="#关于表单元素" class="headerlink" title="关于表单元素"></a>关于表单元素</h3><p>自己原来的想法还是too young了，没有考虑到表单元素这种存在.由于浏览器对一些表单元素的原生实现是基于操作系统的，这就导致表单元素的auto宽高并不符合上面提到的那些规律。</p>
<p>比如一个按钮，不管是在何种定位之下、也不管容器如何，只要不手动指定宽高它就还是那个样子。而且由于和操作系统有关，所以浏览器并没有给我们提供能够取消这种默认行为的属性，也就是说我们不能采用诸如<code>-webkit-appearance: none;</code>这样的做法来覆盖默认样式。故而上面对auto宽高的讨论对这些表单元素都是不适用的，面对表单元素时我们没必要再auto宽高的问题，有什么需求就老实去去手动指定好了。</p>
<p>想了解更多关于表单元素原生的内容，可参考我翻译的<a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">原生表单组件</a>。</p>
<h3 id="关于内联元素"><a href="#关于内联元素" class="headerlink" title="关于内联元素"></a>关于内联元素</h3><p>之前讨论的多是块级元素，而没有考虑到内联元素的情况。其实分析起来也比较简单，只要考虑普通流定位的情况，因为绝对定位和浮动后他们就变成块级元素了。但巧合的是，在普通流定位中，内联元素auto宽度和高度规则却和块级元素绝对定位差不多，都只受内容大小影响。</p>
<p>当然凡事都有例外，这里的例外就是<code>&lt;img&gt;</code>元素，其auto宽高的规则和表单元素一样受到浏览器默认规则的影响。而该规则的特殊地方在于：auto宽高会等比例缩放，具体来说，就是为了防止失真，图片的宽高只要有一个没指定就会自动等比例缩放来决定最终大小，而不是像别的元素一样宽高各管各的。</p>
<h3 id="关于伪元素"><a href="#关于伪元素" class="headerlink" title="关于伪元素"></a>关于伪元素</h3><p>当CSS伪元素设置了<code>content</code>和<code>display:block;</code>时，可以看做是原元素作容器的子元素，此时伪元素的auto宽高也会受上面规则的影响。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，元素在没有设置宽高的情况下，默认的宽高值都为&lt;code&gt;auto&lt;/code&gt;。而这个&lt;code&gt;auto&lt;/code&gt;到底是如何让元素自动拥有宽高的呢，也就是说，元素的宽度和高度到底会受到什么因素的影响？本文将通过一个例子来对这一问题一探究竟，HTML结构和初始
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://levonlin.info/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>【译】怎么样构建HTML表单</title>
    <link href="http://levonlin.info/2016/05/03/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E4%B9%88%E6%A0%B7%E6%9E%84%E5%BB%BAHTML%E8%A1%A8%E5%8D%95/"/>
    <id>http://levonlin.info/2016/05/03/【译】怎么样构建HTML表单/</id>
    <published>2016-05-03T08:04:54.000Z</published>
    <updated>2017-07-19T16:43:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><a href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/">系列文章说明</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/How_to_structure_an_HTML_form" target="_blank" rel="external">原文</a></li>
</ul>
</blockquote>
<p>在建立<a href="https://developer.mozilla.org/en-US/docs/HTML/Forms" target="_blank" rel="external">HTML表单</a>时，最重要的一件事就是如何用正确的方式构建它。而之所以重要，原因有二：一是保证表单能被正确使用、二是这能保证你的表单是无障碍的（可以被能力不同的人使用）。而正因HTML表单的<a href="https://developer.mozilla.org/en-US/docs/Accessibility" target="_blank" rel="external">无障碍性</a>很重要，故在本文中我们将了解如何使一个表单无障碍，这并不很难、只是有几个技巧需要你了解下。</p>
<p>表单的灵活性决定了它们是<a href="https://developer.mozilla.org/en-US/docs/HTML" target="_blank" rel="external">HTML</a>中最复杂的结构。通过使用专门的表单元素和属性，我们可以建立任何形式的表单。也确实有过一些更丰富多彩的脚本技术如<a href="https://developer.mozilla.org/en-US/docs/XForms" target="_blank" rel="external">XForms</a>（现已过时），但很不幸这些表单技术并未被各大浏览器广泛应用。因此，我们往往得依赖Javascript来处理表单；但在本文中，我们只会详细讨论如何使用表单元素，若你想知道如何构建自定义表单组件，可参阅<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">怎样创建定制表单组件</a>。</p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="from元素"><a href="#from元素" class="headerlink" title="from元素"></a>from元素</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form" target="_blank" rel="external"><code>&lt;form&gt;</code></a>元素是用来正式定义表单的元素，其属性决定了表单会有什么行为。当你想要建立一个HTML表单时，就必须以该元素开头。很多无障碍技术或浏览器插件能够检测到<code>&lt;form&gt;</code>元素，同时他们也实现了特殊的方式来让表单更易于使用。</p>
<blockquote>
<p>注：严禁把一个form元素嵌套在另一个里边。那样会导致不可预知的行为，具体取决于用户使用了何种浏览器。</p>
</blockquote>
<p><code>&lt;form&gt;</code>元素支持下列属性，它们全是可选的：</p>
<p><strong><code>&lt;form&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-accept-charset" target="_blank" rel="external">accept-charset</a></td>
<td>UNKNOWN</td>
<td>一个空格分隔或逗号分隔的列表（HTML5中，只有空格可作为分隔符。），这个列表包括了服务器支持的字符编码。浏览器以这些编码被列举的顺序使用它们。默认值是一个保留字符串“UNKNOWN”。这个字符串指的是和包含这个form元素的文档使用相同的编码。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action" target="_blank" rel="external">action</a></td>
<td></td>
<td>处理这个表单所提交信息的程序所在的URL。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete" target="_blank" rel="external">autocomplete</a></td>
<td>on</td>
<td>指示表单组件是否能够拥有被浏览器自动补全的默认值。该属性共有两个可选值：<code>on</code>或<code>off</code>。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype" target="_blank" rel="external">enctype</a></td>
<td>application/x-www-form-urlencoded</td>
<td>当 method 属性值为 post 时, enctype 是提交form给服务器的内容的 <a href="http://en.wikipedia.org/wiki/Mime_type" target="_blank" rel="external">MIME 类型</a> 。可能的取值有：application/x-www-form-urlencoded (默认值)、multipart/form-data (用于一个 type 属性设置为 “file” 的<code>&lt;input&gt;</code>元素)、text/plain (HTML5)。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method" target="_blank" rel="external">method</a></td>
<td>get</td>
<td>浏览器使用这种 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html" target="_blank" rel="external">HTTP</a> 方式来提交 form。可能的值有:post、get。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-name" target="_blank" rel="external">name</a></td>
<td></td>
<td>这个form的名字。一个文档中的多个form当中，name必须唯一而不仅仅是一个空字符串。作为替代，最好使用<code>id</code>。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate" target="_blank" rel="external">novalidate</a></td>
<td>(false)</td>
<td>这个布尔类型的属性指示了，当提交时form是否没有被验证。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target" target="_blank" rel="external">target</a></td>
<td>_self</td>
<td>用一个关键字指示在何处展示提交表单后收到的响应，展示的地方可以是<code>&lt;iframe&gt;</code>、标签页、浏览器窗口等；下面是该属性几个可能的值：<code>_self</code> (把响应加载到同一浏览器环境（<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="external"><code>&lt;iframe&gt;</code></a>、标签页、浏览器窗口等）)、<code>_blank</code> (把响应加载到一个新的浏览器环境)、<code>_parent</code> (把响应加载到父级浏览器环境，若无父级环境则和<code>_self</code>一致)、<code>_top</code> (把响应加载到最顶层的浏览器环境（即已无父环境的浏览器环境），若无父级环境则和<code>_self</code>一致)</td>
</tr>
</tbody>
</table>
<p>要注意的是，可能你会经常在<code>&lt;form&gt;</code>元素外使用表单组件，而这样做的话这些组件就和任何表单都没有关系了。虽然这些表单组件确实可以用在表单之外，但如此一来你就得给它们设定好用途了，毕竟它们单独使用时是没有特殊效果的，你必须用Javascript来自定义。</p>
<p>从技术上讲，HTML5已经引进了一个<code>form</code>属性给各个表单元素，该属性能让你明确绑定一个元素和一个表单，即使元素不再<code>&lt;form&gt;</code>的内部。然而很遗憾，该特性的跨浏览器实现暂时还没能让人觉得它是可靠的。</p>
<h3 id="fieldset和legend元素"><a href="#fieldset和legend元素" class="headerlink" title="fieldset和legend元素"></a>fieldset和legend元素</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset" target="_blank" rel="external"><code>&lt;fieldset&gt;</code></a>元素可以很方便地用于创建一组具有相同目的的组件。一个<code>&lt;fieldset&gt;</code>元素可以被一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend" target="_blank" rel="external"><code>&lt;legend&gt;</code></a>元素所标记，<code>&lt;legend&gt;</code>元素用于明确地描述<code>&lt;fieldset&gt;</code>元素的目的。许多无障碍技术会使用<code>&lt;legend&gt;</code>元素作为<code>&lt;fieldset&gt;</code>元素内各组件label的一部分。例如，某些屏幕阅读器如<a href="http://www.freedomscientific.com/products/fs/jaws-product-page.asp" target="_blank" rel="external">jaws</a>或<a href="http://www.nvda-project.org/" target="_blank" rel="external">NVDA</a>会在读出各组件的label前先读出legend里的内容。</p>
<p>举个小例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Fruit juice size<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"size"</span> <span class="attr">id</span>=<span class="string">"size_1"</span> <span class="attr">value</span>=<span class="string">"small"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"size_1"</span>&gt;</span>Small<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"size"</span> <span class="attr">id</span>=<span class="string">"size_2"</span> <span class="attr">value</span>=<span class="string">"medium"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"size_2"</span>&gt;</span>Medium<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"size"</span> <span class="attr">id</span>=<span class="string">"size_3"</span> <span class="attr">value</span>=<span class="string">"large"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"size_3"</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>本例中，屏幕阅读器会将为第一个组件读出”Fruit juice size small”，为第二个组件读出”Fruit juice size medium”，为第三个组件读出”Fruit juice size large”。</p>
<p>上面这个例子是最重要的用法之一，当你有一堆单选按钮时，你得保证它们嵌套于<code>&lt;fieldset&gt;</code>元素中。而一般来说，<code>&lt;filedset&gt;</code>元素也能用于给一个表单分段。</p>
<p>由于该元素对无障碍技术的影响，<code>&lt;fieldset&gt;</code>元素已经成为构建无障碍表单的关键元素；但这也不是说你可以滥用它。当你构建表单时，可以试着听一下屏幕阅读器如何读取它，若听起来很奇怪，那就有必要改进你的表单结构了。</p>
<p><code>&lt;fieldset&gt;</code>元素支持以下的特有属性：</p>
<p><strong><code>&lt;fieldset&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset#attr-disabled" target="_blank" rel="external">disable</a></td>
<td>(false)</td>
<td>若设置了该布尔值，表单中的后代元素（除了其第一个<code>&lt;legend&gt;</code>元素的后代）将被禁用和禁止编辑。这些元素将不再接收任何浏览器事件，譬如鼠标点击或和输入焦点有关的事件。通常浏览器会将这些元素显示为灰色。</td>
</tr>
</tbody>
</table>
<h3 id="label元素"><a href="#label元素" class="headerlink" title="label元素"></a>label元素</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label" target="_blank" rel="external"><code>&lt;label&gt;</code></a>元素用于给某个表单组件定义一个标签。若你想构建一个无障碍表单，这个元素可就是最重要的元素了。</p>
<p><code>&lt;label&gt;</code>元素支持以下的属性：</p>
<p><strong><code>&lt;label&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#attr-for" target="_blank" rel="external">for</a></td>
<td></td>
<td>值取在同一文档中可标记的组件的ID。 文档中第一个ID值匹配该属性值的元素就是被这个label元素标记的元素。</td>
</tr>
</tbody>
</table>
<p><code>&lt;label&gt;</code>元素用<code>for</code>属性绑定其对应的组件，<code>for</code>属性可引用关联组件的<code>id</code>值。此外组件也可以嵌套于其<code>&lt;label&gt;</code>元素，但即使是这样，设置<code>for</code>属性仍被认为是最佳做法，因为一些无障碍设备无法理解label和组件间的隐性关系（译注：其实嵌套就相当于自动设置了<code>for</code>属性，不存在什么隐性关系，综合下文来看也这应该属于“最佳做法”的范畴吧）。</p>
<p>而即使不考虑无障碍技术，若有一个指派给特定组件的label，会让用户在点击label时，就能在所有浏览器下激活相应的组件。这就非常有便于使用单选按钮和复选框啦。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"taste_1"</span> <span class="attr">name</span>=<span class="string">"taste_cherry"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"taste_1"</span>&gt;</span>I like cherry<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"taste_2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"taste_2"</span> <span class="attr">name</span>=<span class="string">"taste_banana"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      I like banana</div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>某些无障碍设备在处理指派多个label的单个组件时会出现问题。因此，你得把组件嵌套进相关联的元素，才能构建一个无障碍的表单（译注：不是很能理解这句话，上面不是说这种做法一些无障碍设备不能理解吗？而且解决方法不应该是不准多对一吗，和嵌套有半毛钱关系？）。</p>
<p>来看下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Required fields are followed by <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 当你要标记的组件是label的后代时，就没必要在label上使用for属性了。 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 所以这个： --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 和这个是一样的： --&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"birth"</span>&gt;</span> <span class="comment">&lt;!-- 在这里，for属性就是多余的了。 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Date of birth: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"birth"</span> <span class="attr">name</span>=<span class="string">"userbirth"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> /&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span>formated as mm/dd/yyyy<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中，第一部分代码写的是必填元素的规则。该规则必须在表单头部以保证在用户找到必填元素之前，屏幕阅读器等无障碍设备能将其展示或读给用户。这样用户才能知道他到底该干嘛。</p>
<p>第一个文本域是必填的，所以在其label元素内指明了该文本域的名字以及该文本域是必填的。如此一来，屏幕阅读器会把label读作”Name star”或”Name required”（这取决于屏幕阅读器的设定，通常与第一段写的那些规则相一致）。而若你使用了两个label，那就不能确保用户会被提示该元素是必填的。</p>
<p>第二个表单元素（译注：<code>id</code>为<code>birth</code>那个）也采用了同样的手段，使用上面例子的代码后，你就能保证用户在进入该字段时会被告知如何格式化日期数据了。</p>
<h3 id="output元素"><a href="#output元素" class="headerlink" title="output元素"></a>output元素</h3><p>该元素用于存放计算的输出结果，它定义了用于获取运算数据的输入框和用于展示结果的元素间的联系。对于一些无障碍技术来讲，该元素也可以认为是一个保持活动的区域（也就是说当<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output" target="_blank" rel="external"><code>&lt;output&gt;</code></a>元素的内容发生变化时，无障碍设备就能感知该变化并能对其做出响应）。</p>
<p>‘<output>`元素支持以下的属性：</output></p>
<p><strong><code>&lt;output&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output#attr-for" target="_blank" rel="external">for</a></td>
<td></td>
<td>一个用空格分隔的其他元素的ID列表，指示那些提供输入值（或其他效应）参与运算的元素</td>
</tr>
</tbody>
</table>
<h3 id="表单的常用HTML结构"><a href="#表单的常用HTML结构" class="headerlink" title="表单的常用HTML结构"></a>表单的常用HTML结构</h3><p>除了一些表单的具体结构，我们还应知道表单其实就是HTML代码。这就意味着你可以用所有的HTML技术来构建一个表单。</p>
<p>就如你已经看到的例子中那样，通常我们会把一个label及其对应的组件包裹在一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p" target="_blank" rel="external"><code>&lt;p&gt;</code></a>或<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div" target="_blank" rel="external"><code>&lt;div&gt;</code></a>元素中。</p>
<p>而除了<code>&lt;fieldset&gt;</code>元素，我们通常也会使用HTML的标题和<code>section</code>来构建复杂的表单。</p>
<p>HTML的列表则常用在使用复选框和单选框时。</p>
<p>来看一个简单的支付表单例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Payment form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Required fields are followed by <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Contact information<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"title_1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"title_1"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"M."</span> /&gt;</span></div><div class="line">            Mister</div><div class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"title_2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"title_2"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Ms."</span> /&gt;</span></div><div class="line">            Miss</div><div class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    </div><div class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>E-mail: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">name</span>=<span class="string">"usermail"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Payment information<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Card type:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"card"</span> <span class="attr">name</span>=<span class="string">"usercard"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"visa"</span>&gt;</span>Visa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mc"</span>&gt;</span>Mastercard<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"amex"</span>&gt;</span>American Express<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Card number:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"cardnumber"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"date"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Expiration date:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"expiration"</span> <span class="attr">required</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"required"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span>formated as mm/yy<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>Validate the payment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>看一看执行效果吧（这里加了点CSS）</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/How_to_structure_an_HTML_form/Example" target="_blank" rel="external">演示</a></p>
<h2 id="HTML组件"><a href="#HTML组件" class="headerlink" title="HTML组件"></a>HTML组件</h2><p>构建表单时，我们需要一些组件来从用户那儿收集数据。所以在本文中，我们还将看到如何呈现这些组件；若你想了解这些组件是如何工作的，可参见<a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">原生表单组件</a>。</p>
<h3 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h3><p>这个元素相当特殊，因为它可以变成不少东西。只要简单设置下其<code>type</code>属性，它就能发生大变化。为简单起见，<code>type</code>的值可归为四种类型：单行文本框、无文本输入的控件、日期控件和按钮。而正因这种多样性，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" target="_blank" rel="external"><code>&lt;input&gt;</code></a>元素支持众多属性，但我们很难知道其中那个是相关的、哪个是必须的，这取决于<code>type</code>属性的值。</p>
<p>下面的表格就是一个汇总（要获得完整的属性列表，请访问<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" target="_blank" rel="external"><code>&lt;input&gt;</code></a>元素的页面）：</p>
<table>
<thead>
<tr>
<th><code>type</code>属性的值</th>
<th>描述</th>
<th>必要属性</th>
<th>可选属性</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>单行文本框</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>text</td>
<td>这是最基本的文本框，该值也是<code>type</code>属性的默认值，这时不会执行自动校验</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external">pattern</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">placeholder</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-spellcheck" target="_blank" rel="external">spellcheck</a></td>
</tr>
<tr>
<td>email</td>
<td>用于编辑一或多个电子邮箱地址的文本框</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple" target="_blank" rel="external">multiple</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external">pattern</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">placeholder</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a></td>
</tr>
<tr>
<td>password</td>
<td>文本框的值会被隐藏起来</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a></td>
</tr>
<tr>
<td>search</td>
<td>用于输入查询字符串的文本框</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autosave" target="_blank" rel="external">autosave</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external">pattern</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">placeholder</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-spellcheck" target="_blank" rel="external">spellcheck</a></td>
</tr>
<tr>
<td>tel</td>
<td>用于编辑电话号码的文本框</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external">pattern</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">placeholder</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a></td>
</tr>
<tr>
<td>url</td>
<td>用于编辑绝对URL的文本框</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength" target="_blank" rel="external">maxlength</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern" target="_blank" rel="external">pattern</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder" target="_blank" rel="external">placeholder</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-size" target="_blank" rel="external">size</a></td>
</tr>
<tr>
<td><strong>无文本输入的控件</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>checkbox</td>
<td>复选框</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-checked" target="_blank" rel="external">checked</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>color</td>
<td>用于指定颜色的控件</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>file</td>
<td>用于让用户选择文件的控件</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept" target="_blank" rel="external">accept</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple" target="_blank" rel="external">multiple</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>hidden</td>
<td>不显示的控件，但它的值会被提交给服务器</td>
<td></td>
<td></td>
</tr>
<tr>
<td>number</td>
<td>用于获得浮点数的控件</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step" target="_blank" rel="external">step</a></td>
</tr>
<tr>
<td>radio</td>
<td>单选框</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-checked" target="_blank" rel="external">checked</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>range</td>
<td>用于获得非精确值的控件</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step" target="_blank" rel="external">step</a></td>
</tr>
<tr>
<td><strong>时间和日期控件</strong>（尚未支持，译注：最新的浏览器已实现了部分控件）</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>用于获得日期（年月日，没有钟点）的控件</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>datetime</td>
<td>用于获得日期和时间（时分秒，及二分之一秒）的控件，基于UTC时区</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>datetime-local</td>
<td>用于获得日期和时间的控件，不含时区</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>month</td>
<td>用于获得年份和月份的控件，不含时区</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>time</td>
<td>用于获得时间的控件，不含时区</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td>month</td>
<td>用于获得年份和周数的控件，不含时区</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete" target="_blank" rel="external">autocomplete</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-list" target="_blank" rel="external">list</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max" target="_blank" rel="external">max</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min" target="_blank" rel="external">min</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly" target="_blank" rel="external">readonly</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required" target="_blank" rel="external">required</a></td>
</tr>
<tr>
<td><strong>按钮</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>button</td>
<td>无默认行为的按钮</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formaction" target="_blank" rel="external">formaction</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formenctype" target="_blank" rel="external">formenctype</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formmethod" target="_blank" rel="external">formmethod</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formnovalidate" target="_blank" rel="external">formnovalidate</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formtarget" target="_blank" rel="external">formtarget</a></td>
</tr>
<tr>
<td>image</td>
<td>图片按钮</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-src" target="_blank" rel="external">src</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-alt" target="_blank" rel="external">alt</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-width" target="_blank" rel="external">width</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-height" target="_blank" rel="external">height</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formaction" target="_blank" rel="external">formaction</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formenctype" target="_blank" rel="external">formenctype</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formmethod" target="_blank" rel="external">formmethod</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formnovalidate" target="_blank" rel="external">formnovalidate</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formtarget" target="_blank" rel="external">formtarget</a></td>
</tr>
<tr>
<td>reset</td>
<td>用于将表单内容重置为默认值的按钮</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formaction" target="_blank" rel="external">formaction</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formenctype" target="_blank" rel="external">formenctype</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formmethod" target="_blank" rel="external">formmethod</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formnovalidate" target="_blank" rel="external">formnovalidate</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formtarget" target="_blank" rel="external">formtarget</a></td>
</tr>
<tr>
<td>submmit</td>
<td>用于提交表单的按钮</td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formaction" target="_blank" rel="external">formaction</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formenctype" target="_blank" rel="external">formenctype</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formmethod" target="_blank" rel="external">formmethod</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formnovalidate" target="_blank" rel="external">formnovalidate</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-formtarget" target="_blank" rel="external">formtarget</a></td>
</tr>
</tbody>
</table>
<p>如果我们给<code>type</code>属性设置的值不被浏览器支持，那它就会把<code>&lt;input&gt;</code>元素渲染为和使用<code>text</code>值一样的效果。这样能确保表单可以使用，即使它看起来不那么吸引人。</p>
<p>虽然<code>&lt;input&gt;</code>元素是个强大的工具，但它也并非万能，所以还得一些其他元素来处理这些<code>&lt;input&gt;</code>力不能及的情况。</p>
<h3 id="textarea元素"><a href="#textarea元素" class="headerlink" title="textarea元素"></a>textarea元素</h3><p>该元素用于声明多行文本框。其行为与单行文本框基本一致，除了能让用户在输入文本时换行。此外该元素也接受几个额外的属性，以控制其在渲染时能占多大地方：</p>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea" target="_blank" rel="external"><code>&lt;textarea&gt;</code></a>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols" target="_blank" rel="external">cols</a></td>
<td>20</td>
<td>文本控件的可视宽度，单位是字符的平均宽度</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows" target="_blank" rel="external">rows</a></td>
<td></td>
<td>文本控件的可视文本行数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap" target="_blank" rel="external">wrap</a></td>
<td>soft</td>
<td>表明控件如何包含文本，可取值为<code>hard</code>或<code>soft</code></td>
</tr>
</tbody>
</table>
<p>注意<code>&lt;textarea&gt;</code>元素的用法与<code>&lt;input&gt;</code>元素稍有不同。<code>&lt;input&gt;</code>元素是个自闭合元素，这意味着它不能包含任何子元素。而另一方面，<code>&lt;textarea&gt;</code>元素则是个可以直接包含文本内容的普通元素。</p>
<p>这就造成两个影响：</p>
<ul>
<li>若你想给<code>&lt;input&gt;</code>元素定义默认值，你得使用<code>valur</code>属性；而对于<code>&lt;textarea&gt;</code>元素，你只需把默认文本置于其起始标签之间即可。</li>
<li>默认地，<code>&lt;textarea&gt;</code>元素只接受文本内容；也就是说任何输入到<code>&lt;textarea&gt;</code>元素内的HTML内容都会以纯文本的形式显示出来。</li>
</ul>
<p>下面这个例子中，<code>&lt;textarea&gt;</code>元素会以相同形式渲染出来：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"text_1"</span>&gt;</span>With regular HTML<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"text_1"</span> <span class="attr">name</span>=<span class="string">"regular"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm a paragraphe<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"text_2"</span>&gt;</span>With escaped HTML<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"text_2"</span> <span class="attr">name</span>=<span class="string">"escaped"</span>&gt;</span>&amp;lt;p&amp;gt;I'm a paragraphe&amp;lt;/p&amp;gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="select-option和optgroup元素"><a href="#select-option和optgroup元素" class="headerlink" title="select, option和optgroup元素"></a>select, option和optgroup元素</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select" target="_blank" rel="external"><code>&lt;select&gt;</code></a>元素能让你构建选择框（也叫组合框）。选择框是一种让用户选择一或多个预定义的值的组件。单值和多值选择框的不同将在<a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">原生表单组件</a>一文中进行讨论。</p>
<p>选择框中的每个值都会用一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option" target="_blank" rel="external"><code>&lt;option&gt;</code></a>元素进行定义，而这些<code>&lt;option&gt;</code>元素也可以置于<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup" target="_blank" rel="external"><code>&lt;optgroup&gt;</code></a>元素中进行分组。</p>
<p>来看个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myFruit"</span>&gt;</span>Pick a fruit<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"myFruit"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 这里耍了个小把戏，你以为你选择了根香蕉，其实你是吃了个橘子 &gt;:-) --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"orange"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"berries"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blueberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Raspberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若<code>&lt;option&gt;</code>元素设置了<code>value</code>属性，那么在表单提交时该值就会被提交。若<code>value</code>属性未设置，则使用<code>&lt;option&gt;</code>元素的内容作为整个选择框的值。</p>
<p>至于<code>&lt;optgroup&gt;</code>元素，其<code>label</code>属性将会先于其内容进行展示。而且它虽然看起来像一个选项，但实质上它是不可选的。</p>
<p><strong><code>&lt;option&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-label" target="_blank" rel="external">label</a></td>
<td></td>
<td>该属性是用于描述选项的文本，若<code>label</code>属性未被定义，那它的值就默认取元素的文本内容</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-selected" target="_blank" rel="external">selected</a></td>
<td>(false)</td>
<td>目前来讲，该布尔值表明选项是否在一开始就被选中</td>
</tr>
</tbody>
</table>
<p><strong><code>&lt;optgroup&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup#attr-label" target="_blank" rel="external">label</a></td>
<td></td>
<td>一组选项的名字。<strong>该属性是强制要有的</strong></td>
</tr>
</tbody>
</table>
<h3 id="datalist元素"><a href="#datalist元素" class="headerlink" title="datalist元素"></a>datalist元素</h3><p>该元素通过为给定的组件预设值，实现了对已有组件的拓展，最广为人知的例子就是文本框的自动补全列表了。这些用于填充的值实际上是通过<code>&lt;datalist&gt;</code>元素里的<code>&lt;option&gt;</code>元素进行设置的。</p>
<p>要把<code>&lt;datalist&gt;</code>元素和某个组件绑定起来，你得先设置目标组件的<code>list</code>属性；该属性需指定为相应的<code>&lt;datalist&gt;</code>元素的<code>id</code>属性。</p>
<p><code>&lt;datalist&gt;</code>元素是最近才被加入到HTML表单中的，故仍有些浏览器不支持它。这里有一个巧妙的兼容技巧，用于应对这些浏览器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myFruit"</span>&gt;</span>What is your favorite fruit?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"myFruit"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">list</span>=<span class="string">"fruitList"</span> /&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"fruitList"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"suggestion"</span>&gt;</span>or pick a fruit<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"suggestion"</span> <span class="attr">name</span>=<span class="string">"altFruit"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"banana"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"cherry"</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"strawberry"</span>&gt;</span>Strawberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>支持<code>&lt;datalist&gt;</code>的浏览器将会忽略其中那些非<code>&lt;option&gt;</code>元素，且最终效果和预期的一样。而支持<code>&lt;datalist&gt;</code>的浏览器将会显示label和选择框。当然，也有别的方法来处理<code>&lt;datalist&gt;</code>缺乏支持的问题，但那得用到javascript，而这通常不是个好的选择。</p>
<p><img src="https://developer.mozilla.org/files/4583/datalist-safari.png" alt="datalist-demo"></p>
<h3 id="meter和progress元素"><a href="#meter和progress元素" class="headerlink" title="meter和progress元素"></a>meter和progress元素</h3><p>这两个元素常用于图形化展示给定的数字值，两者的区别主要是语义上的：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter" target="_blank" rel="external"><code>&lt;meter&gt;</code></a>元素代表一个静态值，其相对位置在最大值和最小值之间。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress" target="_blank" rel="external"><code>progress</code></a>元素代表一个在最大值和最小值间随时间变化的值。值得注意的是，改变该元素的值（也就是显示进度）必须交给Javascript来完成，该元素自身没有任何机制来做到这一点。</li>
</ul>
<p>默认的，这俩元素支持下列特有属性：</p>
<p><strong><code>&lt;meter&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-min" target="_blank" rel="external">min</a></td>
<td>0</td>
<td>度量范围的数值下界</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-max" target="_blank" rel="external">max</a></td>
<td>1</td>
<td>度量范围的数值上界</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-low" target="_blank" rel="external">low</a></td>
<td><code>min</code>值</td>
<td>比度量范围的下界要高的数值界限</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-high" target="_blank" rel="external">high</a></td>
<td><code>max</code>值</td>
<td>比度量范围的上界要低的数值界限</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter#attr-optimum" target="_blank" rel="external">optimum</a></td>
<td></td>
<td>最佳数字值</td>
</tr>
</tbody>
</table>
<p><strong>译注：溢出low、high间的范围时，浏览器会以特殊样式显示<code>&lt;metter&gt;</code>数值</strong></p>
<p><strong><code>&lt;progress&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-max" target="_blank" rel="external">max</a></td>
<td></td>
<td>该属性用于描述<code>&lt;progress&gt;</code>对应的任务完成前需要做多少工作量</td>
</tr>
</tbody>
</table>
<h3 id="button元素"><a href="#button元素" class="headerlink" title="button元素"></a>button元素</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button" target="_blank" rel="external"><code>&lt;button&gt;</code></a>元素是最便于创建表单按钮的方式。一个按钮可以是三种类型质疑，由以下<code>type</code>属性值决定：</p>
<ul>
<li><code>submmit</code>按钮会把表单数据发送给由<code>&lt;form&gt;</code>元素的<code>action</code>属性定义的页面。</li>
<li><code>reset</code>按钮会立即把所有表单组件重置为默认值。从用户体验的角度看，现在认为使用这种按钮是一种糟糕的、应该避免的做法，因为它很容易让用户不小心就丢掉他们已填写的内容。</li>
<li>匿名（<code>button</code>）按钮就没有固有属性了，你得使用Javascript来给其实现功能。</li>
</ul>
<p><strong><code>&lt;button&gt;</code>元素的属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type" target="_blank" rel="external">type</a></td>
<td>submit</td>
<td>按钮的类型。可能的值有：<code>button</code>, <code>reset</code>, <code>submit</code></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formaction" target="_blank" rel="external">formaction</a></td>
<td></td>
<td>如果按钮是个提交按钮，该属性的值会重写<code>&lt;form&gt;</code>元素的<code>action</code>属性</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formentype" target="_blank" rel="external">formentype</a></td>
<td></td>
<td>如果按钮是个提交按钮，该属性的值会重写<code>&lt;form&gt;</code>元素的<code>enctype</code>属性</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formmethod" target="_blank" rel="external">formmethod</a></td>
<td></td>
<td>如果按钮是个提交按钮，该属性的值会重写<code>&lt;form&gt;</code>元素的<code>method</code>属性</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formnovalidate" target="_blank" rel="external">formnovalidate</a></td>
<td></td>
<td>如果按钮是个提交按钮，该属性的值会重写<code>&lt;form&gt;</code>元素的<code>novalidate</code>属性</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formtarget" target="_blank" rel="external">formtarget</a></td>
<td></td>
<td>如果按钮是个提交按钮，该属性的值会重写<code>&lt;form&gt;</code>元素的<code>target</code>属性</td>
</tr>
</tbody>
</table>
<p>从技术上讲，用<code>&lt;button&gt;</code>或<code>&lt;input&gt;</code>元素定义的按钮间基本是没有区别的。只在按钮的标记上有一个值得注意的区别：在<code>&lt;input&gt;</code>元素内标记只能是字符数据；而在<code>&lt;button&gt;</code>元素内，标记的内容可以是HTML，所以此处按钮的样式可以被按需定制。</p>
<blockquote>
<p><strong>注意</strong>：因为一些历史原因，<code>&lt;button&gt;</code>元素一直不被大量使用，且许多表单开发者更倾向于使用由<code>&lt;input&gt;</code>构建的按钮。而罪魁祸首就是旧版本IE的一个bug，在IE6和IE7中，若你给<code>&lt;button&gt;</code>元素加了<code>name</code>和<code>value</code>属性，表单就不会发送该<code>value</code>属性而是直接发送按钮的内容。但这个bug已经在IE8之后给修复了，所以现在不再有什么理由来回避使用<code>&lt;button&gt;</code>元素了。</p>
</blockquote>
<h3 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h3><p>许多用来定义表单组件的元素拥有一些自己的属性，而这里还有一个所有表单元素的公共属性汇总，它们能给你跨组件的控制能力。下面就是这些公共属性的列表：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>autofocus</td>
<td>(false)</td>
<td>这个布尔属性让你能够指定在页面加载时需要自动获得输入焦点的元素，除非用户重写了它，比如在另一控件上输入。在一个文档中，只能有唯一一个表单元素能指定该值。</td>
</tr>
<tr>
<td>disabled</td>
<td>(false)</td>
<td>这个布尔属性表明用户不能与某个元素交互。如该属性未指定，则会继承自容器元素如<code>&lt;fieldset&gt;</code>的设置；若无容器元素设置了<code>disabled</code>属性，则该元素就是可用的</td>
</tr>
<tr>
<td>form</td>
<td></td>
<td>和组件关联的form元素。这个属性的值必须是同一文档下某<code>&lt;form&gt;</code>元素的<code>id</code>值。理论上，这能让你在<code>&lt;form&gt;</code>元素外设置表单组件。但在实际应用中，并没有浏览器支持该特性。</td>
</tr>
<tr>
<td>name</td>
<td></td>
<td>元素的名字，该属性会随表单数据提交</td>
</tr>
<tr>
<td>value</td>
<td></td>
<td>指定元素初始值</td>
</tr>
</tbody>
</table>
<h2 id="使用ARIA来构建HTML表单"><a href="#使用ARIA来构建HTML表单" class="headerlink" title="使用ARIA来构建HTML表单"></a>使用ARIA来构建HTML表单</h2><p><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA" target="_blank" rel="external">ARIA</a>是一项<a href="http://www.w3.org/TR/wai-aria/" target="_blank" rel="external">W3C候选推荐标准</a>，用于添加到HTML以增强富Internet应用的可访问性。我们将在<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">怎样创建定制表单组件</a>一文中更具体地讨论它的使用，但这里有一些基础知识需要先知道。</p>
<p>在开始之前，要注意浏览器上对ARIA和无障碍技术的支持虽然还远称不上完美，但也已在持续改进之中了。出现这种问题就是因为，浏览器在遇到ARIA属性时，必须给操作系统的无障碍访问层发送消息，而并不是所有浏览器都能跨平台地做好这点。同时无障碍设备自身只能链接到操作系统的无障碍访问层去处理浏览器传来的消息。让人吃惊的是，有些无障碍设备连这点都做不好。</p>
<p>所以使用无障碍技术并不意味着你的web应用就是无障碍的，而是意味着你已经尽力来做到这点了。暂时来讲，ARIA只是尽最大努力的技术，但还是聊胜于无吧。</p>
<p>若你还想深入了解ARIA和HTML表单的结合使用，请自行阅读<a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/forms" target="_blank" rel="external">ARIA文档的相关章节</a>。</p>
<h3 id="aria-labelledby属性"><a href="#aria-labelledby属性" class="headerlink" title="aria-labelledby属性"></a><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute" target="_blank" rel="external">aria-labelledby</a>属性</h3><p>该属性便于在不适用<code>&lt;label&gt;</code>元素时定义一个label。可将其放在组件元素上并引用要作为label的元素的<code>id</code>属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"fruitLabel"</span>&gt;</span>What's your favorite fruit<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">aria-labelledby</span>=<span class="string">"fruitLabel"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从概念上，这个属性与<code>&lt;label&gt;</code>元素的<code>for</code>属性正好相反。使用<code>for</code>属性时引用的是组件的<code>id</code>，而使用<code>aria-labelledby</code>时则引用label的<code>id</code>。</p>
<h3 id="aria-describedby属性"><a href="#aria-describedby属性" class="headerlink" title="aria-describedby属性"></a><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute" target="_blank" rel="external">aria-describedby</a>属性</h3><p>该属性和<code>aria-labelledby</code>作用类似，主要就是语义上有不同。label用于定义对象的本质内容，而描述则提供更多用户可能要用到的信息。这个属性不建议直接用在表单元素上；最好还是使用<code>aria-labelledby</code>属性，除非你想为当前元素提供额外信息。毕竟该属性就是用来提供大段描述的。</p>
<h3 id="aria-label属性"><a href="#aria-label属性" class="headerlink" title="aria-label属性"></a><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute" target="_blank" rel="external">aria-label</a>属性</h3><p>该属性用于给定的组件在DOM中没有明确的label时，它能让你提供一个能通过无障碍设备使用的组件，而无需专门为其创建一个节点来做到这点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">aria-label</span>=<span class="string">"Search"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Go"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="role属性"><a href="#role属性" class="headerlink" title="role属性"></a><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques" target="_blank" rel="external">role</a>属性</h3><p>这是最重要的一个ARIA属性了，它能让你为给定的HTML元素提供无障碍设备可理解的、特定的语义信息。现在已经有不少可用的role了，且其中一些是表单专用的。</p>
<p>ARIA致力于给那些在HTML中尚不可用的组件、或已经存在的元素提供语法，我们将会在<a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">怎样创建定制表单组件</a>一文中看到如何使用这些role。</p>
<p>用于表单组件的role有：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role" target="_blank" rel="external">Button</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_checkbox_role" target="_blank" rel="external">Checkbox</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role" target="_blank" rel="external">Progressbar</a></li>
<li>Radio</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_slider_role" target="_blank" rel="external">Slider</a></li>
<li>Spinbutton</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_textbox_role" target="_blank" rel="external">textbox</a></li>
</ul>
<p>值得注意的还有几个复合的role：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Techniques/Using_the_listbox_role" target="_blank" rel="external">Listbox</a></li>
<li>Radiogroup</li>
</ul>
<p>若你觉得这些role很好用，可在这里了解更多；ARIA是个很庞大的规范，深入探索它能帮你为远超HTML表单之外的领域增强无障碍性。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>现在你已经拥有了所有可用于构建你的HTML表单的知识；下篇文章将会深入其实现细节和功能需求：<a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">原生表单组件</a>。</p>
<h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><ul>
<li><a href="http://www.alistapart.com/articles/sensibleforms/" target="_blank" rel="external">A List Apart: Sensible Forms: A Form Usability Checklist</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】HTML表单指南---第一个HTML表单</title>
    <link href="http://levonlin.info/2016/04/28/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E4%B8%AAHTML%E8%A1%A8%E5%8D%95/"/>
    <id>http://levonlin.info/2016/04/28/【译】HTML表单指南-第一个HTML表单/</id>
    <published>2016-04-28T11:30:09.000Z</published>
    <updated>2017-07-19T16:46:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个系列译自<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Forms" target="_blank" rel="external">mdn上的一份表单指南</a>，原文详尽阐述了表单相关的基础知识。而表单作为一个经典的页面交互方式，是每个前端工程师绕不开的话题，通过翻译这个系列的文章既是有助于扫清自己的知识盲区，也希望借此能让更多人受惠吧~</p>
<p>先列下目录：</p>
<ul>
<li><a href="./#第一个HTML表单">第一个HTML表单</a></li>
<li><a href="http://levonlin.info/2016/05/03/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E4%B9%88%E6%A0%B7%E6%9E%84%E5%BB%BAHTML%E8%A1%A8%E5%8D%95/">怎样构建HTML表单</a></li>
<li><a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">原生表单组件</a></li>
<li>HTML表单的CSS<ul>
<li><a href="http://levonlin.info/2016/06/05/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F/">HTML表单样式</a></li>
<li><a href="http://levonlin.info/2016/06/29/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/">HTML表单高级样式</a></li>
<li><a href="http://levonlin.info/2016/08/06/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8/">表单组件的属性兼容表</a></li>
</ul>
</li>
<li><a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a></li>
<li><a href="http://levonlin.info/2016/12/31/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/">表单数据校验</a></li>
<li><a href="http://levonlin.info/2017/05/31/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">怎样创建定制表单组件</a></li>
<li><a href="http://levonlin.info/2017/06/21/%E3%80%90%E8%AF%91%E3%80%91%E9%80%9A%E8%BF%87JavaScript%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95/">通过JavaScript发送表单</a><ul>
<li><a href="http://levonlin.info/2017/07/15/%E3%80%90%E8%AF%91%E3%80%91%E4%BD%BF%E7%94%A8FormData%E5%AF%B9%E8%B1%A1/">使用FormData对象</a></li>
</ul>
</li>
<li><a href="http://levonlin.info/2017/07/16/%E3%80%90%E8%AF%91%E3%80%91%E9%81%97%E7%95%99%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95/">遗留浏览器中的表单</a></li>
</ul>
<blockquote>
<p><strong>声明</strong>：本文源于mdn，遵循mdn的<a href="https://developer.mozilla.org/en-US/docs/MDN/About#Copyrights_and_licenses" target="_blank" rel="external">相关协议</a>，翻译过程可能会加入我个人的理解，转载请注明出处。</p>
</blockquote>
<p>好，该说的都说完了，正文开始~</p>
<h1 id="第一个HTML表单"><a href="#第一个HTML表单" class="headerlink" title="第一个HTML表单"></a>第一个HTML表单</h1><blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/My_first_HTML_form" target="_blank" rel="external">原文</a></p>
</blockquote>
<p>这是一篇介绍HTML表单的文章，通过一个简单的contact表单，我们可以看到构建HTML表单的所有基本知识。本文假设你已掌握基本的HTML和CSS，但还不了解HTML表单。</p>
<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><h3 id="啥是HTML表单？"><a href="#啥是HTML表单？" class="headerlink" title="啥是HTML表单？"></a>啥是HTML表单？</h3><p>HTML表单是用户和网站或引用的一个主要交互点。表单允许用户发送数据给网站，大多数时候数据会发到服务器上，然而页面也可以把数据拦下来给自己用。</p>
<p>一个HTML表单由一或多个部件组成，这些部件可以是文本框（单行或多行）、选择框、按钮、复选框、或单选按钮。通常，部件们会伴随一个描述它们使用目的的label出现。</p>
<h3 id="处理表单需要什么？"><a href="#处理表单需要什么？" class="headerlink" title="处理表单需要什么？"></a>处理表单需要什么？</h3><p>处理HTML时，你只需一个文本编辑器和一个浏览器即可。当然，你也也可以使用诸如<a href="http://www.microsoft.com/visualstudio" target="_blank" rel="external">Visual Studio</a>、 <a href="http://www.eclipse.org/" target="_blank" rel="external">Eclipse</a>，<a href="http://www.aptana.com/" target="_blank" rel="external">Aptana</a>之类的IDE。</p>
<p>此外，HTML表单和常规的HTML的主要区别在于表单收集的数据往往会被发送到服务器，这时你就需要搭个服务器来接受和处理这些数据了。至于如何搭建服务器，本文不作讨论，欲知详情，你可以看一篇这方面的文章：<a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a>。</p>
<h2 id="设计你的表单"><a href="#设计你的表单" class="headerlink" title="设计你的表单"></a>设计你的表单</h2><p>在开始撸代码前，最好先花点时间来构思下我们的表单。一个快速设计模型有助于你定义希望从用户那获得的数据集。从用户体验（UX）的观点来看，要知道你的表单越大，你越有可能失去用户。所以你应该保持简单和专注，只问你真想要的内容。要具体讨论表单的用户体验已超出本文的范围，给几篇这方面的文章把：</p>
<ul>
<li>Smashing Magazine有不少<a href="http://uxdesign.smashingmagazine.com/tag/forms/" target="_blank" rel="external">和表单UX有关的好文章</a>，但其中最重要的莫属<a href="Extensive Guide To Web Form Usability">Extensive Guide To Web Form Usability</a>啦。</li>
<li>UXMatters上的资源也蛮丰富的，从<a href="http://www.uxmatters.com/mt/archives/2012/05/7-basic-best-practices-for-buttons.php" target="_blank" rel="external">基本的最佳实践</a>到类似<a href="http://www.uxmatters.com/mt/archives/2010/03/pagination-in-web-forms-evaluating-the-effectiveness-of-web-forms.php" target="_blank" rel="external">多页表单</a>复杂内容都有。</li>
</ul>
<p>在本文，我们将建立一个简单的contact表单，草图如下：</p>
<p><img src="https://developer.mozilla.org/files/4579/form-sketch-low.jpg" alt=""></p>
<p>在我们的表单里，有三个文本框和一个按钮。文本框用来询问用户的名字、邮箱和他们想发送的消息，点击按钮则会把数据发给服务器。</p>
<h2 id="尽情地写一波HTML吧"><a href="#尽情地写一波HTML吧" class="headerlink" title="尽情地写一波HTML吧"></a>尽情地写一波HTML吧</h2><p>现在我们要开始编码了，建立起我们的contact表单，一共需要这几个的HTML元素： <code>&lt;form&gt;</code>, <code>&lt;label&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;button&gt;</code>。</p>
<h3 id="form元素："><a href="#form元素：" class="headerlink" title="form元素："></a>form元素：</h3><p>所有的HTML表单都和下面代码一样以<code>&lt;form&gt;</code>元素开头：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/my-handling-form-page"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;form&gt;</code>元素让我们定义了一个表单。虽然它也是个类似<code>&lt;div&gt;</code>或<code>&lt;p&gt;</code>一样的容器元素，但它还支持一些特有属性来定义表单行为。这些属性是可选的，而最佳实践是至少得设置<code>action</code>和<code>method</code>属性：</p>
<ul>
<li><code>action</code>属性定义了表单收集的数据会被送往的地址（URL）</li>
<li><code>method</code>属性则定义了用什么http方式来发送数据（比如”get”或”post”方式）</li>
</ul>
<p>若你还想知道这些属性是如何工作的，请阅读<a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a>。</p>
<h3 id="添加label、input和textarea元素"><a href="#添加label、input和textarea元素" class="headerlink" title="添加label、input和textarea元素"></a>添加label、input和textarea元素</h3><p>我们简单的contact表单只有三个带label的文本框：用于姓名输入域的是个基本的单行文本框；用于邮箱的输入域也是单行文本框，不过它只能填入邮箱地址；最后用于发生消息的输入域则是个基本的多行文本框。</p>
<p>HTML代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/my-handling-form-page"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span>E-mail:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"msg"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;div&gt;</code>元素在这里用于结构化我们的代码并方便我们定义样式。此外还要注意<code>&lt;label&gt;</code>元素<code>for</code>属性的使用，该属性是一种显式联系label和表单组件的方法，可以给它赋予想要关联组件的<code>id</code>值。这样一来，用户就可以通过点击label来激活表单组件了。如果你还想了解<code>for</code><br>属性的其他好处，就参考这篇文章吧：<a href="http://levonlin.info/2016/05/03/%E3%80%90%E8%AF%91%E3%80%91%E6%80%8E%E4%B9%88%E6%A0%B7%E6%9E%84%E5%BB%BAHTML%E8%A1%A8%E5%8D%95/">怎样构建HTML表单</a></p>
<p>至于<code>&lt;input&gt;</code>元素，<code>type</code>属性是其最重要的属性，因为该属性定义了<code>input</code>元素的行为。欲知更多，请阅读<a href="http://levonlin.info/2016/05/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8E%9F%E7%94%9F%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/">原生表单组件</a>。</p>
<p>在我们的示例里，一个文本框中用了该属性的默认值<code>text</code>，该值表示一个基本的单行文本框，用于接收无控制或验证的任何文本。而另外一个文本框则使用了值<code>email</code>，表示定义一个只接收合法邮箱地址单行文本框，也就是说它会对用户输入的数据进行一些检查。我们会在<a href="http://levonlin.info/2016/12/31/%E3%80%90%E8%AF%91%E3%80%91%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/">表单数据校验</a>这篇文章里讨论更多和表单验证有关的内容，</p>
<p>最后，我们来比较下<code>&lt;input/&gt;</code>和<code>&lt;textarea&gt;&lt;/textarea&gt;</code>间的语法差别。<code>&lt;input/&gt;</code>就是所谓的自动闭合元素，这种元素需要你加个”/“而不是结束标签来闭合（译注：这只是xhtml的强制要求，但在html里不用”/“也是可以的）；而<code>&lt;textarea&gt;</code>与之相反，并非自动闭合，这时你就得乖乖加上结束标签来闭合了。这点语法差别，其实决定了这两种元素在表单上设定默认值方法有所不同。</p>
<p>若要定义<code>&lt;input&gt;</code>元素的默认值，你得和下面的示例一样使用<code>value</code>属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"by default this element is filled with this text"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>至于<code>&lt;textarea&gt;</code>，你只需像下面一般，把默认值放进它的起止标签间即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>by default this element is filled with this text<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="再加个button来完成表单"><a href="#再加个button来完成表单" class="headerlink" title="再加个button来完成表单"></a>再加个button来完成表单</h3><p>我们的表单代码已经快准备好了，只差个让用户发送数据的按钮而已，再加个<code>&lt;button&gt;</code>元素就可以很简单地完成任务：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/my-handling-form-page"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span>E-mail:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"msg"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Send your message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>按钮共有三种类型：<code>submit</code>, <code>reset</code>, <code>button</code>。</p>
<ul>
<li>点击<code>submit</code>型按钮，会按照我们在<code>&lt;form&gt;</code>元素上定义的<code>action</code>属性，把表单数据发给指定的页面。</li>
<li>点击<code>reset</code>型按钮，会直接重置所有表单组件为它们的默认值。从用户体验的角度来看，这其实是个不太好的操作。</li>
<li>点击<code>button</code>型按钮，什么都不会发生。。。听起来有点蠢，但其实这对于用javascript来定义自定义按钮是再好不过啦。</li>
</ul>
<p>当然，你也可以用<code>&lt;input&gt;</code>元素来生成上面那几个按钮，和使用<code>&lt;button&gt;</code>相比，最大的区别就是<code>&lt;input&gt;</code>元素只允许使用纯文本作为它的内容，而<code>&lt;button&gt;</code>元素可以使用其他的HTML内容。（译注：比如图片，其实<code>&lt;input&gt;</code>元素通过css也能实现类似效果。此外还有个更大的差别，就是在旧版本IE中会出现<code>&lt;input&gt;</code>构造的按钮提交的是其<code>value</code>属性值，然而<code>&lt;button&gt;</code>按钮提交的不是<code>value</code>值而是元素的文本内容，不过考虑到要把按钮也设置<code>value</code>提交的情况实在少见，这个差别其实也没多大意义）</p>
<h2 id="用CSS装扮漂亮点"><a href="#用CSS装扮漂亮点" class="headerlink" title="用CSS装扮漂亮点"></a>用CSS装扮漂亮点</h2><p>HTML表单已经有了，在你的浏览器下看看吧，其实还是有点丑的：</p>
<p><img src="https://developer.mozilla.org/files/4049/form-no-style.png" alt=""></p>
<p>下面我们给它加点CSS装点装点，先让form元素居中并带上点边框：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">    <span class="comment">/* 用来使表单相对页面居中 */</span></div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">    <span class="comment">/* 设置表单外沿 */</span></div><div class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCC</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，给表单组件间加些间隔：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">form</span> <span class="selector-tag">div</span> + <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再来解决label们，最佳做法是设置所有label为统一大小并沿同一方向对齐。这里我们使用右对齐，但某些情况下使用左对齐也可以：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">    <span class="comment">/* 确保所有label大小相同并适当对齐 */</span></div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</div><div class="line">    <span class="attribute">text-align</span>: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实HTML表单的组件样式还是蛮难整的，其中文本框还算简单、但其他组件就难说了，若想深入了解如何设置表单组件样式，可见<a href="http://levonlin.info/2016/06/05/%E3%80%90%E8%AF%91%E3%80%91HTML%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F/">HTML表单样式</a>。</p>
<p>首先我们进行下一些通用配置：协调字体、大小和边框：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="comment">/* 确保所有文本框有相同的字体设置</span></div><div class="line">       默认设置一个等宽字体 */</div><div class="line">    <span class="attribute">font</span>: <span class="number">1em</span> sans-serif;</div><div class="line"></div><div class="line">    <span class="comment">/* 给所有文本框设置相同的大小 */</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line"></div><div class="line">    <span class="comment">/* 协调文本框边框的外形 */</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HTML表单还支持不少伪类，用以表现各元素的状态。比如，我们可以在组件被激活时作突出显示，这样可以方便用户知道表单填到哪一步了：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">    <span class="comment">/* 让元素被激活时突出显示 */</span></div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多行文本框还需要一些独有的自定义样式，<code>&lt;textarea&gt;</code>这个内联元素会默认让它的底部与别的文本的基线对齐，而我们往往并不想这样。想要完美对齐label和文本框，我们得把<code>&lt;textarea&gt;</code>的<code>vertical-align</code>属性设为<code>top</code>。</p>
<p>此外还得注意<code>resize</code>属性，它能方便用户缩放<code>&lt;textarea&gt;</code>的大小。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="comment">/* 对齐多行文本框和他们的label */</span></div><div class="line">    <span class="attribute">vertical-align</span>: top;</div><div class="line"></div><div class="line">    <span class="comment">/* 给输入文本留下足够的空间 */</span></div><div class="line">    <span class="attribute">height</span>: <span class="number">5em</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* 允许用户垂直缩放textarea但这并不会在所有浏览器上有效 */</span></div><div class="line">    <span class="attribute">resize</span>: vertical;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按钮也得加点特殊样式才行。为此，我们先将按钮置于一个<code>class</code>设为”button”的<code>&lt;div&gt;</code>中。因为我们还希望按钮能域其他表单组件对齐，所以我们得模仿出一个和其他<code>label</code>一样的效果（译注：在这里就是占同样大小），加上内外边距来实现吧。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span> &#123;</div><div class="line">    <span class="comment">/* 将按钮置于和文本框相同的位置 */</span></div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">90px</span>; <span class="comment">/* 和label元素一样大小 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="comment">/* 这个额外的外边距大致充当了label和对应文本框间的间距 */</span></div><div class="line">    <span class="attribute">margin-left</span>: .<span class="number">5em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们的表单看起来漂亮多了：</p>
<p><img src="https://developer.mozilla.org/files/4051/form-style.png" alt=""></p>
<h2 id="将数据发给你的web服务器"><a href="#将数据发给你的web服务器" class="headerlink" title="将数据发给你的web服务器"></a>将数据发给你的web服务器</h2><p>如前所述，HTML表单就是为了方便从用户那获取数据并发送到服务端。所以最后、也是看起来最棘手的，就是在服务端处理这些表单数据了。</p>
<p>其实<code>action</code>和<code>method</code>属性已经给<code>&lt;form&gt;</code>元素定义了数据发送到哪儿、如何发生数据了。</p>
<p>然而这还不够，我们还得给我们的数据起个名字。这些名字在两端都是很重要的：在浏览器端，这能告诉浏览器如何给各部分的数据命名；而在服务端，这也让服务器能够依据数据名来处理每块数据。</p>
<p>要给你的数据命名，就得给那些需要收集特定数据的表单组件加上<code>name</code>属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/my-handling-form-page"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"user_name"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span>E-mail:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">name</span>=<span class="string">"user_email"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"msg"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"msg"</span> <span class="attr">name</span>=<span class="string">"user_message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Send your message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在本例中，表单会发送三组数据，依次命名为user_name、user_email和user_message，他们会以HTTP POST的方式发送到URL”/my-handling-form-page”。</p>
<p>而在服务端，负责处理URL”/my-handling-form-page”的脚本会从HTTP请求中以3组键/值对的形式接收这些数据。至于脚本如何处理这些数据就取决于你的需求了，各种服务端语言（PHP, Python, Ruby, Java, C#等）有它们自有的机制来做这件事。要深入探究这方面就不是本文的主题了，欲知详情，我们会在<a href="http://levonlin.info/2016/09/24/%E3%80%90%E8%AF%91%E3%80%91%E5%8F%91%E9%80%81%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/">发送表单数据</a>这篇文章中给你一些例子。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>恭喜！你终于完成你的第一个HTML表单啦~下面就是最终效果的在线演示：</p>
<p><a href="https://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Forms/My_first_HTML_form/Example$samples/A_simple_form?revision=1012447" target="_blank" rel="external">演示</a></p>
<p>接下来是时候更上一层楼了，其实HTML表单远比我们在这里展现的强大，<a href="./#前言">本指南的其他文章</a>将会帮助你掌握剩下的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这个系列译自&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://levonlin.info/tags/html/"/>
    
      <category term="翻译" scheme="http://levonlin.info/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>textContent和innerText属性</title>
    <link href="http://levonlin.info/2016/04/27/textContent%E5%92%8CinnerText%E5%B1%9E%E6%80%A7/"/>
    <id>http://levonlin.info/2016/04/27/textContent和innerText属性/</id>
    <published>2016-04-27T11:22:10.000Z</published>
    <updated>2016-12-24T09:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在DOM操作中，我们如果要获取和修改节点的的文本，就离不开<code>textContent</code>或<code>innerText</code>属性。其中<code>textContent</code>作为标准方法，但无奈要IE8+；而<code>innerText</code>属性最近也被火狐支持了，已经成了不是标准的标准（<a href="http://caniuse.com/#search=innerText" target="_blank" rel="external">参考</a>）。也就是说，如果只考虑最新浏览器的话这两个方法都是可以使用的，那他们到底使用时有何不同呢？先上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>test<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">hi</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</div><div class="line">    <span class="built_in">console</span>.log(testDiv.textContent);</div><div class="line">    <span class="built_in">console</span>.log(testDiv.innerText);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行上述代码，结果为：</p>
<p>可看到存在两个差异：</p>
<ol>
<li><code>textContent</code>会获取<code>style</code>元素里的文本（若有<code>script</code>元素也是这样），而<code>innerText</code>不会</li>
<li><code>textContent</code>会获取<code>display:none</code>的节点的文本；而<code>innerText</code>好像会感知到节点是否呈现一样，不作返回</li>
</ol>
<p>也就是说，<code>textContent</code>能够获取元素的所有子节点上的文本，不管这个节点是否呈现；而<code>innerText</code>只返回呈现到页面上的文本。</p>
<p>当然，除了获取文本，这两个元素也可以设置元素的文本内容，不过要注意设置文本时被替换的可不只是文本了；这时，两个属性作用相当于<code>innerHTML</code>属性，会把指定节点下的所有子节点也一并替换掉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在DOM操作中，我们如果要获取和修改节点的的文本，就离不开&lt;code&gt;textContent&lt;/code&gt;或&lt;code&gt;innerText&lt;/code&gt;属性。其中&lt;code&gt;textContent&lt;/code&gt;作为标准方法，但无奈要IE8+；而&lt;code&gt;innerText
    
    </summary>
    
      <category term="前端" scheme="http://levonlin.info/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://levonlin.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://levonlin.info/tags/javascript/"/>
    
  </entry>
  
</feed>
